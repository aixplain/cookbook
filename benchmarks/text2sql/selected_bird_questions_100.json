[
    {
        "question_id": 47,
        "difficulty": "moderate",
        "db_id": "california_schools",
        "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "prediction": null,
        "ground_truth": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 66,
        "difficulty": "simple",
        "db_id": "california_schools",
        "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 77,
        "difficulty": "moderate",
        "db_id": "california_schools",
        "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
        "prediction": null,
        "ground_truth": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 45,
        "difficulty": "moderate",
        "db_id": "california_schools",
        "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
        "prediction": null,
        "ground_truth": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 85,
        "difficulty": "moderate",
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "prediction": null,
        "ground_truth": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 52,
        "difficulty": "simple",
        "db_id": "california_schools",
        "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 54,
        "difficulty": "simple",
        "db_id": "california_schools",
        "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
        "prediction": null,
        "ground_truth": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 51,
        "difficulty": "simple",
        "db_id": "california_schools",
        "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
        "prediction": null,
        "ground_truth": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 9,
        "difficulty": "simple",
        "db_id": "california_schools",
        "question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/california_schools/california_schools.sqlite",
        "schema": "CREATE TABLE frpm(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, combining county, district, and school codes\n    `Academic Year` TEXT null,  -- Academic year for which the data is reported\n    `County Code` TEXT null,  -- Code representing the county where the school is located\n    `District Code` INTEGER null,  -- Code representing the district where the school is located\n    `School Code` TEXT null,  -- Code representing the specific school\n    `County Name` TEXT null,  -- Name of the county where the school is located\n    `District Name` TEXT null,  -- Name of the district where the school is located\n    `School Name` TEXT null,  -- Name of the school\n    `District Type` TEXT null,  -- Type of district, such as County Office of Education (COE)\n    `School Type` TEXT null,  -- Type of school, such as Elementary, High School, etc.\n    `Educational Option Type` TEXT null,  -- Type of educational option, such as Traditional or Juvenile Court School\n    `NSLP Provision Status` TEXT null,  -- Status of the National School Lunch Program provision, if applicable\n    `Charter School (Y/N)` INTEGER null,  -- Indicator if the school is a charter school (1 for Yes, 0 for No)\n    `Charter School Number` TEXT null,  -- Unique number assigned to the charter school\n    `Charter Funding Type` TEXT null,  -- Type of funding for the charter school, such as Directly funded\n    IRC INTEGER null,  -- Indicator of whether the school is an Independent Reporting Charter (1 for Yes, 0 for No)\n    `Low Grade` TEXT null,  -- Lowest grade level offered at the school\n    `High Grade` TEXT null,  -- Highest grade level offered at the school\n    `Enrollment (K-12)` REAL null,  -- Total number of students enrolled in grades K-12\n    `Free Meal Count (K-12)` REAL null,  -- Number of students eligible for free meals in grades K-12\n    `Percent (%) Eligible Free (K-12)` REAL null,  -- Percentage of students eligible for free meals in grades K-12\n    `FRPM Count (K-12)` REAL null,  -- Number of students eligible for Free or Reduced Price Meals (FRPM) in grades K-12\n    `Percent (%) Eligible FRPM (K-12)` REAL null,  -- Percentage of students eligible for FRPM in grades K-12\n    `Enrollment (Ages 5-17)` REAL null,  -- Total number of students enrolled aged 5-17\n    `Free Meal Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for free meals\n    `Percent (%) Eligible Free (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for free meals\n    `FRPM Count (Ages 5-17)` REAL null,  -- Number of students aged 5-17 eligible for FRPM\n    `Percent (%) Eligible FRPM (Ages 5-17)` REAL null,  -- Percentage of students aged 5-17 eligible for FRPM\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER null,  -- Certification status of the school for the 2013-14 CALPADS Fall 1 data\n    foreign key (CDSCode) references schools (CDSCode) -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE satscores(\n    cds TEXT not null primary key,  -- Unique identifier for the school or district, used as a primary key\n    rtype TEXT not null,  -- Type of record, indicating whether it is a school ('S') or district ('D')\n    sname TEXT null,  -- Name of the school, if applicable\n    dname TEXT null,  -- Name of the district to which the school belongs\n    cname TEXT null,  -- Name of the county where the school or district is located\n    enroll12 INTEGER not null,  -- Number of students enrolled in the 12th grade\n    NumTstTakr INTEGER not null,  -- Number of 12th-grade students who took the SAT test\n    AvgScrRead INTEGER null,  -- Average SAT reading score for the students who took the test\n    AvgScrMath INTEGER null,  -- Average SAT math score for the students who took the test\n    AvgScrWrite INTEGER null,  -- Average SAT writing score for the students who took the test\n    NumGE1500 INTEGER null,  -- Number of students who scored 1500 or above on the SAT\n    -- PctGE1500 double null,  -- Percentage of students who scored 1500 or above on the SAT (commented out)\n    foreign key (cds) references schools (CDSCode)  -- Foreign key constraint linking to the schools table using CDSCode\n)\nCREATE TABLE schools(\n    CDSCode TEXT not null primary key,  -- Unique identifier for the school, typically a state-assigned code\n    NCESDist TEXT null,  -- National Center for Education Statistics (NCES) district identifier\n    NCESSchool TEXT null,  -- National Center for Education Statistics (NCES) school identifier\n    StatusType TEXT not null,  -- Current operational status of the school (e.g., Active, Closed)\n    County TEXT not null,  -- Name of the county where the school is located\n    District TEXT not null,  -- Name of the school district\n    School TEXT null,  -- Name of the school\n    Street TEXT null,  -- Street address of the school\n    StreetAbr TEXT null,  -- Abbreviated street address of the school\n    City TEXT null,  -- City where the school is located\n    Zip TEXT null,  -- ZIP code for the school's location\n    State TEXT null,  -- State where the school is located\n    MailStreet TEXT null,  -- Mailing street address for the school\n    MailStrAbr TEXT null,  -- Abbreviated mailing street address for the school\n    MailCity TEXT null,  -- Mailing city for the school\n    MailZip TEXT null,  -- Mailing ZIP code for the school\n    MailState TEXT null,  -- Mailing state for the school\n    Phone TEXT null,  -- Contact phone number for the school\n    Ext TEXT null,  -- Phone extension number, if applicable\n    Website TEXT null,  -- Website URL for the school\n    OpenDate DATE null,  -- Date when the school was opened\n    ClosedDate DATE null,  -- Date when the school was closed, if applicable\n    Charter INTEGER null,  -- Indicator if the school is a charter school (1 for yes, 0 for no)\n    CharterNum TEXT null,  -- Charter number assigned to the school, if applicable\n    FundingType TEXT null,  -- Type of funding the school receives (e.g., Directly funded)\n    DOC TEXT not null,  -- District of Control code, indicating the controlling district\n    DOCType TEXT not null,  -- Type of District of Control (e.g., County Office of Education)\n    SOC TEXT null,  -- School Operational Code, indicating the type of school\n    SOCType TEXT null,  -- Description of the School Operational Code (e.g., K-12 Schools)\n    EdOpsCode TEXT null,  -- Educational Operations Code, indicating the type of educational operation\n    EdOpsName TEXT null,  -- Description of the Educational Operations Code (e.g., Traditional)\n    EILCode TEXT null,  -- Educational Institution Level Code, indicating the level of education\n    EILName TEXT null,  -- Description of the Educational Institution Level Code (e.g., High School)\n    GSoffered TEXT null,  -- Grade span offered by the school (e.g., K-12)\n    GSserved TEXT null,  -- Grade span served by the school (e.g., 9-12)\n    Virtual TEXT null,  -- Indicator if the school offers virtual education (e.g., N for No, P for Partial)\n    Magnet INTEGER null,  -- Indicator if the school is a magnet school (1 for yes, 0 for no)\n    Latitude REAL null,  -- Latitude coordinate of the school's location\n    Longitude REAL null,  -- Longitude coordinate of the school's location\n    AdmFName1 TEXT null,  -- First name of the primary administrator\n    AdmLName1 TEXT null,  -- Last name of the primary administrator\n    AdmEmail1 TEXT null,  -- Email address of the primary administrator\n    AdmFName2 TEXT null,  -- First name of the secondary administrator\n    AdmLName2 TEXT null,  -- Last name of the secondary administrator\n    AdmEmail2 TEXT null,  -- Email address of the secondary administrator\n    AdmFName3 TEXT null,  -- First name of the tertiary administrator\n    AdmLName3 TEXT null,  -- Last name of the tertiary administrator\n    AdmEmail3 TEXT null,  -- Email address of the tertiary administrator\n    LastUpdate DATE not null  -- Date when the record was last updated\n)"
    },
    {
        "question_id": 148,
        "difficulty": "moderate",
        "db_id": "financial",
        "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
        "prediction": null,
        "ground_truth": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 156,
        "difficulty": "simple",
        "db_id": "financial",
        "question": "Who is the owner of the account with the largest loan amount?",
        "prediction": null,
        "ground_truth": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 190,
        "difficulty": "simple",
        "db_id": "financial",
        "question": "How many clients who were born in 1920 stay in east Bohemia?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 97,
        "difficulty": "simple",
        "db_id": "financial",
        "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
        "prediction": null,
        "ground_truth": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 108,
        "difficulty": "simple",
        "db_id": "financial",
        "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
        "prediction": null,
        "ground_truth": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 154,
        "difficulty": "simple",
        "db_id": "financial",
        "question": "How many male clients in 'Hl.m. Praha' district?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 90,
        "difficulty": "simple",
        "db_id": "financial",
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 93,
        "difficulty": "moderate",
        "db_id": "financial",
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 118,
        "difficulty": "moderate",
        "db_id": "financial",
        "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "prediction": null,
        "ground_truth": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/financial/financial.sqlite",
        "schema": "CREATE TABLE account(\n    account_id INTEGER default 0 not null primary key,  -- Unique identifier for the account\n    district_id INTEGER default 0 not null,             -- Identifier for the district associated with the account\n    frequency TEXT not null,                            -- Frequency of account operations or charges, e.g., monthly\n    date DATE not null,                                 -- Date when the account was created or registered\n    foreign key (district_id) references district (district_id)  -- Foreign key linking to the district table\n)\nCREATE TABLE card (\n    card_id INTEGER default 0 not null primary key,  -- Unique identifier for the card\n    disp_id INTEGER not null,                        -- Identifier for the associated disposition, linking to the disp table\n    type TEXT not null,                              -- Type of the card, such as 'gold', 'classic', or 'junior'\n    issued DATE not null,                            -- Date when the card was issued\n    foreign key (disp_id) references disp (disp_id)  -- Foreign key constraint linking disp_id to the disp table\n)\nCREATE TABLE client(\n    client_id INTEGER not null primary key,  -- Unique identifier for each client\n    gender TEXT not null,                    -- Gender of the client, typically 'M' for male or 'F' for female\n    birth_date DATE not null,                -- Birth date of the client\n    district_id INTEGER not null,            -- Identifier for the district where the client resides, linked to the district table\n    foreign key (district_id) references district (district_id)  -- Ensures district_id corresponds to a valid entry in the district table\n)\nCREATE TABLE disp(\n    disp_id INTEGER not null primary key,  -- Unique identifier for the disposition record\n    client_id INTEGER not null,  -- Identifier for the client associated with the disposition\n    account_id INTEGER not null,  -- Identifier for the account associated with the disposition\n    type TEXT not null,  -- Role of the client in relation to the account, such as 'OWNER' or 'DISPONENT'\n    foreign key (account_id) references account (account_id),  -- Ensures account_id corresponds to a valid account\n    foreign key (client_id) references client (client_id)  -- Ensures client_id corresponds to a valid client\n)\nCREATE TABLE district(\n    district_id INTEGER default 0 not null primary key,  -- Unique identifier for the district\n    A2 TEXT not null,  -- Name of the district or region\n    A3 TEXT not null,  -- Larger administrative area or region where the district is located\n    A4 TEXT not null,  -- Population of the district\n    A5 TEXT not null,  -- Number of schools in the district\n    A6 TEXT not null,  -- Number of hospitals in the district\n    A7 TEXT not null,  -- Number of parks in the district\n    A8 INTEGER not null,  -- District classification or type code\n    A9 INTEGER not null,  -- Number of administrative divisions within the district\n    A10 REAL not null,  -- Area of the district in square kilometers\n    A11 INTEGER not null,  -- Number of households in the district\n    A12 REAL null,  -- Unemployment rate in the district\n    A13 REAL not null,  -- Average income per household in the district\n    A14 INTEGER not null,  -- Number of businesses in the district\n    A15 INTEGER null,  -- Number of public transport routes in the district\n    A16 INTEGER not null  -- Number of cultural or historical sites in the district\n)\nCREATE TABLE loan(\n    loan_id INTEGER default 0 not null primary key,  -- Unique identifier for the loan\n    account_id INTEGER not null,                     -- Identifier for the account associated with the loan\n    date DATE not null,                              -- Date when the loan was issued\n    amount INTEGER not null,                         -- Total amount of the loan\n    duration INTEGER not null,                       -- Duration of the loan in months\n    payments REAL not null,                          -- Monthly payment amount for the loan\n    status TEXT not null,                            -- Current status of the loan (e.g., A, B, C, D)\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE `order`(\n    order_id INTEGER default 0 not null primary key,  -- Unique identifier for the order\n    account_id INTEGER not null,                      -- Identifier for the account associated with the order\n    bank_to TEXT not null,                            -- Code representing the bank to which the order is directed\n    account_to INTEGER not null,                      -- Account number to which the order amount is transferred\n    amount REAL not null,                             -- Monetary value of the order\n    k_symbol TEXT not null,                           -- Code representing the type or purpose of the transaction\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)\nCREATE TABLE trans(\n    trans_id INTEGER default 0 not null primary key,  -- Unique identifier for the transaction\n    account_id INTEGER default 0 not null,  -- Identifier for the account associated with the transaction\n    date DATE not null,  -- Date when the transaction occurred\n    type TEXT not null,  -- Type of transaction (e.g., PRIJEM for income)\n    operation TEXT null,  -- Specific operation type of the transaction (e.g., VKLAD for deposit)\n    amount INTEGER not null,  -- Amount of money involved in the transaction\n    balance INTEGER not null,  -- Account balance after the transaction\n    k_symbol TEXT null,  -- Additional transaction symbol or code, if applicable\n    bank TEXT null,  -- Bank identifier for transactions involving other banks\n    account INTEGER null,  -- Account number for transactions involving other accounts\n    foreign key (account_id) references account (account_id)  -- Foreign key linking to the account table\n)"
    },
    {
        "question_id": 333,
        "difficulty": "simple",
        "db_id": "toxicology",
        "question": "In the molecule TR008, how many carbons are present?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 204,
        "difficulty": "simple",
        "db_id": "toxicology",
        "question": "Of the first 100 molecules in number order, how many are carcinogenic?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 214,
        "difficulty": "simple",
        "db_id": "toxicology",
        "question": "What type of label is not on molecules with atoms with tin?",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 320,
        "difficulty": "moderate",
        "db_id": "toxicology",
        "question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
        "prediction": null,
        "ground_truth": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 306,
        "difficulty": "challenging",
        "db_id": "toxicology",
        "question": "Which molecules have triple bonds and list all the elements they contain.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 231,
        "difficulty": "challenging",
        "db_id": "toxicology",
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "prediction": null,
        "ground_truth": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 273,
        "difficulty": "moderate",
        "db_id": "toxicology",
        "question": "What is the percentage of element chlorine in carcinogenic molecules?",
        "prediction": null,
        "ground_truth": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 240,
        "difficulty": "challenging",
        "db_id": "toxicology",
        "question": "List all the elements of the toxicology of the molecule \"TR004\".",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 232,
        "difficulty": "moderate",
        "db_id": "toxicology",
        "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/toxicology/toxicology.sqlite",
        "schema": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the atom within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the atom belongs\n  `element` TEXT DEFAULT NULL,  -- Chemical element symbol representing the type of atom\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,  -- Unique identifier for the bond within a molecule\n  `molecule_id` TEXT DEFAULT NULL,  -- Identifier for the molecule to which the bond belongs\n  `bond_type` TEXT DEFAULT NULL,  -- Type of chemical bond (e.g., single, double, triple) represented by symbols like '-', '=', etc.,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,  -- Unique identifier for the first atom in the connection\n  `atom_id2` TEXT NOT NULL,  -- Unique identifier for the second atom in the connection\n  `bond_id` TEXT DEFAULT NULL,  -- Identifier for the bond connecting the two atoms, if applicable\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n)\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,  -- Unique identifier for each molecule\n  `label` TEXT DEFAULT NULL,    -- Classification label for the molecule, indicating a positive ('+') or negative ('-') status\n  PRIMARY KEY (`molecule_id`)\n)"
    },
    {
        "question_id": 448,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 504,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
        "prediction": null,
        "ground_truth": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 379,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "What are the cards belong to duel deck a? List the ID.",
        "prediction": null,
        "ground_truth": "SELECT id FROM cards WHERE duelDeck = 'a'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 495,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Evacuation\" in it?",
        "prediction": null,
        "ground_truth": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 340,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "Which are the cards that have incredibly powerful foils.",
        "prediction": null,
        "ground_truth": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 510,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?",
        "prediction": null,
        "ground_truth": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 368,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "What is the percentage of borderless cards?",
        "prediction": null,
        "ground_truth": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 389,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "prediction": null,
        "ground_truth": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 488,
        "difficulty": "simple",
        "db_id": "card_games",
        "question": "What's the code for the set which was released on 2017/7/14?",
        "prediction": null,
        "ground_truth": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/card_games/card_games.sqlite",
        "schema": "CREATE TABLE \"cards\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each card, automatically incremented\n    artist TEXT,  -- Name of the artist who illustrated the card\n    asciiName TEXT,  -- ASCII representation of the card's name, if applicable\n    availability TEXT,  -- Formats in which the card is available (e.g., mtgo, paper)\n    borderColor TEXT,  -- Color of the card's border\n    cardKingdomFoilId TEXT,  -- Identifier for the card's foil version on Card Kingdom\n    cardKingdomId TEXT,  -- Identifier for the card on Card Kingdom\n    colorIdentity TEXT,  -- Colors that define the card's identity\n    colorIndicator TEXT,  -- Indicator for the card's color, if different from its mana cost\n    colors TEXT,  -- Colors of the card\n    convertedManaCost REAL,  -- Total mana cost of the card, converted to a numeric value\n    duelDeck TEXT,  -- Duel deck information, if applicable\n    edhrecRank INTEGER,  -- Ranking of the card on EDHREC\n    faceConvertedManaCost REAL,  -- Converted mana cost of the card's face, if it has multiple faces\n    faceName TEXT,  -- Name of the card's face, if it has multiple faces\n    flavorName TEXT,  -- Flavor name of the card, if applicable\n    flavorText TEXT,  -- Flavor text of the card\n    frameEffects TEXT,  -- Special effects applied to the card's frame\n    frameVersion TEXT,  -- Version of the card's frame\n    hand TEXT,  -- Hand size modifier, if applicable\n    hasAlternativeDeckLimit INTEGER default 0 not null,  -- Indicates if the card has an alternative deck limit\n    hasContentWarning INTEGER default 0 not null,  -- Indicates if the card has a content warning\n    hasFoil INTEGER default 0 not null,  -- Indicates if the card has a foil version\n    hasNonFoil INTEGER default 0 not null,  -- Indicates if the card has a non-foil version\n    isAlternative INTEGER default 0 not null,  -- Indicates if the card is an alternative version\n    isFullArt INTEGER default 0 not null,  -- Indicates if the card is a full art version\n    isOnlineOnly INTEGER default 0 not null,  -- Indicates if the card is only available online\n    isOversized INTEGER default 0 not null,  -- Indicates if the card is oversized\n    isPromo INTEGER default 0 not null,  -- Indicates if the card is a promotional version\n    isReprint INTEGER default 0 not null,  -- Indicates if the card is a reprint\n    isReserved INTEGER default 0 not null,  -- Indicates if the card is on the reserved list\n    isStarter INTEGER default 0 not null,  -- Indicates if the card is part of a starter set\n    isStorySpotlight INTEGER default 0 not null,  -- Indicates if the card is part of a story spotlight\n    isTextless INTEGER default 0 not null,  -- Indicates if the card is textless\n    isTimeshifted INTEGER default 0 not null,  -- Indicates if the card is timeshifted\n    keywords TEXT,  -- Keywords associated with the card\n    layout TEXT,  -- Layout of the card (e.g., normal, split, flip)\n    leadershipSkills TEXT,  -- Leadership skills associated with the card, if applicable\n    life TEXT,  -- Life modifier, if applicable\n    loyalty TEXT,  -- Loyalty value for planeswalker cards\n    manaCost TEXT,  -- Mana cost of the card\n    mcmId TEXT,  -- Identifier for the card on Magic Card Market\n    mcmMetaId TEXT,  -- Meta identifier for the card on Magic Card Market\n    mtgArenaId TEXT,  -- Identifier for the card on MTG Arena\n    mtgjsonV4Id TEXT,  -- Identifier for the card in MTGJSON v4\n    mtgoFoilId TEXT,  -- Identifier for the card's foil version on Magic: The Gathering Online\n    mtgoId TEXT,  -- Identifier for the card on Magic: The Gathering Online\n    multiverseId TEXT,  -- Multiverse identifier for the card\n    name TEXT,  -- Name of the card\n    number TEXT,  -- Collector number of the card\n    originalReleaseDate TEXT,  -- Original release date of the card\n    originalText TEXT,  -- Original text of the card\n    originalType TEXT,  -- Original type of the card\n    otherFaceIds TEXT,  -- Identifiers for other faces of the card, if applicable\n    power TEXT,  -- Power value for creature cards\n    printings TEXT,  -- Sets in which the card has been printed\n    promoTypes TEXT,  -- Types of promotions for the card\n    purchaseUrls TEXT,  -- URLs for purchasing the card\n    rarity TEXT,  -- Rarity of the card (e.g., common, uncommon, rare)\n    scryfallId TEXT,  -- Identifier for the card on Scryfall\n    scryfallIllustrationId TEXT,  -- Identifier for the card's illustration on Scryfall\n    scryfallOracleId TEXT,  -- Oracle identifier for the card on Scryfall\n    setCode TEXT,  -- Code of the set in which the card is included\n    side TEXT,  -- Side of the card, if it has multiple sides\n    subtypes TEXT,  -- Subtypes of the card\n    supertypes TEXT,  -- Supertypes of the card\n    tcgplayerProductId TEXT,  -- Identifier for the card on TCGPlayer\n    text TEXT,  -- Text of the card\n    toughness TEXT,  -- Toughness value for creature cards\n    type TEXT,  -- Type of the card\n    types TEXT,  -- Types of the card\n    uuid TEXT not null unique,  -- Universally unique identifier for the card\n    variations TEXT,  -- Variations of the card\n    watermark TEXT  -- Watermark on the card, if applicable\n)\nCREATE TABLE \"foreign_data\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each entry, automatically incremented\n    flavorText TEXT,  -- Descriptive or thematic text associated with the card, often a quote or lore snippet\n    language TEXT,  -- Language in which the card's text is written\n    multiverseid INTEGER,  -- Unique identifier for the card within the multiverse database\n    name TEXT,  -- Name of the card\n    text TEXT,  -- Game-related text describing the card's abilities or effects\n    type TEXT,  -- Type of the card, indicating its category and subtypes\n    uuid TEXT references cards (uuid)  -- Universally unique identifier for the card, referencing the `uuid` in the `cards` table\n)\nCREATE TABLE \"legalities\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each legality record\n    format TEXT,  -- Name of the format in which the card's legality is being specified\n    status TEXT,  -- Legal status of the card in the specified format (e.g., Legal, Banned, Restricted)\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE,  -- Unique identifier for the card, referencing the 'uuid' column in the 'cards' table, with cascading updates and deletions\n)\nCREATE TABLE \"sets\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each set, automatically incremented\n    baseSetSize INTEGER,  -- Number of cards in the base set\n    block TEXT,  -- The block or series to which the set belongs\n    booster TEXT,  -- JSON structure detailing the booster pack contents and configurations\n    code TEXT not null unique,  -- Unique code representing the set\n    isFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only foil cards (0 for no, 1 for yes)\n    isForeignOnly INTEGER default 0 not null,  -- Indicator if the set is available only in foreign languages (0 for no, 1 for yes)\n    isNonFoilOnly INTEGER default 0 not null,  -- Indicator if the set contains only non-foil cards (0 for no, 1 for yes)\n    isOnlineOnly INTEGER default 0 not null,  -- Indicator if the set is available only online (0 for no, 1 for yes)\n    isPartialPreview INTEGER default 0 not null,  -- Indicator if the set is a partial preview (0 for no, 1 for yes)\n    keyruneCode TEXT,  -- Code representing the keyrune symbol associated with the set\n    mcmId INTEGER,  -- ID of the set in the Magic Card Market database\n    mcmIdExtras INTEGER,  -- Additional ID for extras in the Magic Card Market database\n    mcmName TEXT,  -- Name of the set in the Magic Card Market database\n    mtgoCode TEXT,  -- Code used for the set in Magic: The Gathering Online\n    name TEXT,  -- Official name of the set\n    parentCode TEXT,  -- Code of the parent set, if applicable\n    releaseDate DATE,  -- Official release date of the set\n    tcgplayerGroupId INTEGER,  -- Group ID of the set in the TCGPlayer database\n    totalSetSize INTEGER,  -- Total number of cards in the set, including all variations\n    type TEXT  -- Type of the set, such as core, expansion, etc.\n)\nCREATE TABLE \"set_translations\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each translation entry\n    language TEXT,  -- Language in which the set is translated\n    setCode TEXT REFERENCES sets (code) ON UPDATE CASCADE ON DELETE CASCADE,  -- Code of the set being translated, linked to the 'sets' table\n    translation TEXT  -- Translated name or description of the set in the specified language\n)\nCREATE TABLE \"rulings\"(\n    id INTEGER not null primary key autoincrement,  -- Unique identifier for each ruling entry, automatically incremented\n    date DATE,  -- Date when the ruling was issued or recorded\n    text TEXT,  -- Detailed description or explanation of the ruling\n    uuid TEXT REFERENCES cards (uuid) ON UPDATE CASCADE ON DELETE CASCADE  -- Unique identifier linking to the related card, with cascading updates and deletions\n)"
    },
    {
        "question_id": 613,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "prediction": null,
        "ground_truth": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 586,
        "difficulty": "challenging",
        "db_id": "codebase_community",
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "prediction": null,
        "ground_truth": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 619,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "How many adults who obtained the badge Supporter?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 623,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "How many elders obtained the \"Supporter\" badge?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 677,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "How many posts did Jay Stevens have in 2010?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 611,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
        "prediction": null,
        "ground_truth": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 599,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
        "prediction": null,
        "ground_truth": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 658,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "What are the titles of the top 5 posts with the highest popularity?",
        "prediction": null,
        "ground_truth": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 549,
        "difficulty": "simple",
        "db_id": "codebase_community",
        "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
        "prediction": null,
        "ground_truth": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/codebase_community/codebase_community.sqlite",
        "schema": "CREATE TABLE badges(\n    Id INTEGER not null primary key,  -- Unique identifier for each badge entry\n    UserId INTEGER null,              -- Identifier for the user associated with the badge, referencing the users table\n    Name TEXT null,                   -- Name or type of the badge awarded\n    Date DATETIME null,               -- Date and time when the badge was awarded\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE comments(\n    Id INTEGER not null primary key,  -- Unique identifier for each comment\n    PostId INTEGER null,  -- Identifier of the post to which the comment is related\n    Score INTEGER null,  -- Score or rating given to the comment, indicating its popularity or usefulness\n    Text TEXT null,  -- Content of the comment\n    CreationDate DATETIME null,  -- Date and time when the comment was created\n    UserId INTEGER null,  -- Identifier of the user who made the comment\n    UserDisplayName TEXT null,  -- Display name of the user who made the comment\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postHistory(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post history entry\n    PostHistoryTypeId INTEGER null,          -- Identifier for the type of post history event\n    PostId INTEGER null,                     -- Identifier for the associated post\n    RevisionGUID TEXT null,                  -- Globally unique identifier for the revision\n    CreationDate DATETIME null,              -- Date and time when the post history entry was created\n    UserId INTEGER null,                     -- Identifier for the user who made the change\n    Text TEXT null,                          -- Content of the post or revision\n    Comment TEXT null,                       -- Additional comments or notes about the revision\n    UserDisplayName TEXT null,               -- Display name of the user who made the change\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)\nCREATE TABLE postLinks(\n    Id INTEGER not null primary key,  -- Unique identifier for the post link\n    CreationDate DATETIME null,       -- Date and time when the post link was created\n    PostId INTEGER null,              -- Identifier of the primary post involved in the link\n    RelatedPostId INTEGER null,       -- Identifier of the related post involved in the link\n    LinkTypeId INTEGER null,          -- Identifier indicating the type of link between the posts\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,  -- Ensures PostId corresponds to an existing post and maintains referential integrity\n    foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade  -- Ensures RelatedPostId corresponds to an existing post and maintains referential integrity\n)\nCREATE TABLE posts(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each post\n    PostTypeId INTEGER null,  -- Identifier indicating the type of post (e.g., question, answer)\n    AcceptedAnswerId INTEGER null,  -- Identifier for the accepted answer to the post, if applicable\n    CreaionDate DATETIME null,  -- Date and time when the post was created\n    Score INTEGER null,  -- Score of the post based on user votes\n    ViewCount INTEGER null,  -- Number of times the post has been viewed\n    Body TEXT null,  -- Main content of the post\n    OwnerUserId INTEGER null,  -- Identifier of the user who owns the post\n    LasActivityDate DATETIME null,  -- Date and time of the last activity on the post\n    Title TEXT null,  -- Title of the post, if applicable\n    Tags TEXT null,  -- Tags associated with the post for categorization\n    AnswerCount INTEGER null,  -- Number of answers the post has received, if it is a question\n    CommentCount INTEGER null,  -- Number of comments on the post\n    FavoriteCount INTEGER null,  -- Number of times the post has been marked as a favorite by users\n    LastEditorUserId INTEGER null,  -- Identifier of the user who last edited the post\n    LastEditDate DATETIME null,  -- Date and time when the post was last edited\n    CommunityOwnedDate DATETIME null,  -- Date and time when the post became community-owned\n    ParentId INTEGER null,  -- Identifier of the parent post, if the post is an answer\n    ClosedDate DATETIME null,  -- Date and time when the post was closed, if applicable\n    OwnerDisplayName TEXT null,  -- Display name of the post owner, if available\n    LastEditorDisplayName TEXT null,  -- Display name of the last editor, if available\n    foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,\n    foreign key (ParentId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE tags(\n    Id INTEGER not null primary key,  -- Unique identifier for each tag\n    TagName TEXT null,                -- Name of the tag\n    Count INTEGER null,               -- Number of times the tag has been used\n    ExcerptPostId INTEGER null,       -- Identifier for the post containing the tag's excerpt, references the posts table\n    WikiPostId INTEGER null,          -- Identifier for the post containing the tag's wiki, references the posts table\n    foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade\n)\nCREATE TABLE users(\n    Id INTEGER not null UNIQUE primary key,  -- Unique identifier for each user\n    Reputation INTEGER null,  -- User's reputation score on the platform\n    CreationDate DATETIME null,  -- Date and time when the user account was created\n    DisplayName TEXT null,  -- Display name chosen by the user\n    LastAccessDate DATETIME null,  -- Date and time when the user last accessed the platform\n    WebsiteUrl TEXT null,  -- URL of the user's personal or professional website\n    Location TEXT null,  -- Geographical location of the user\n    AboutMe TEXT null,  -- User's self-description or biography\n    Views INTEGER null,  -- Number of times the user's profile has been viewed\n    UpVotes INTEGER null,  -- Total number of upvotes given by the user\n    DownVotes INTEGER null,  -- Total number of downvotes given by the user\n    AccountId INTEGER null,  -- Identifier for the user's account, possibly linked to another system\n    Age INTEGER null,  -- Age of the user\n    ProfileImageUrl TEXT null  -- URL of the user's profile image\n)\nCREATE TABLE votes(\n    Id INTEGER not null primary key,  -- Unique identifier for each vote\n    PostId INTEGER null,              -- Identifier of the post associated with the vote\n    VoteTypeId INTEGER null,          -- Type of vote, represented by an identifier\n    CreationDate DATE null,           -- Date when the vote was created\n    UserId INTEGER null,              -- Identifier of the user who cast the vote\n    BountyAmount INTEGER null,        -- Amount of bounty associated with the vote, if applicable\n    foreign key (PostId) references posts (Id) on update cascade on delete cascade,\n    foreign key (UserId) references users (Id) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 777,
        "difficulty": "simple",
        "db_id": "superhero",
        "question": "What is the gender of Agent 13 hero?",
        "prediction": null,
        "ground_truth": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 779,
        "difficulty": "simple",
        "db_id": "superhero",
        "question": "How many powers does Amazo hero have?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 783,
        "difficulty": "simple",
        "db_id": "superhero",
        "question": "Provide the eye colours of the heroes whose skin colours are gold.",
        "prediction": null,
        "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 778,
        "difficulty": "simple",
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the adaptation power.",
        "prediction": null,
        "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 794,
        "difficulty": "moderate",
        "db_id": "superhero",
        "question": "Which hero was the fastest?",
        "prediction": null,
        "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 814,
        "difficulty": "moderate",
        "db_id": "superhero",
        "question": "List the skin colour of the superheroes with 100 attribute value.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 792,
        "difficulty": "simple",
        "db_id": "superhero",
        "question": "What is Abomination's superpower?",
        "prediction": null,
        "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 823,
        "difficulty": "moderate",
        "db_id": "superhero",
        "question": "How many female superheroes are in Marvel Comics?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 825,
        "difficulty": "moderate",
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "prediction": null,
        "ground_truth": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/superhero/superhero.sqlite",
        "schema": "CREATE TABLE alignment(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each alignment entry\n    alignment TEXT DEFAULT NULL       -- Describes the alignment status, such as 'Good', 'Bad', 'Neutral', or 'N/A'\n)\nCREATE TABLE attribute(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE colour(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the attribute\n    attribute_name TEXT DEFAULT NULL  -- Name of the attribute, such as Intelligence, Strength, etc.\n)\nCREATE TABLE gender(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each gender entry\n    gender TEXT DEFAULT NULL          -- Gender description, which can include values like 'Male', 'Female', or 'N/A'\n)\nCREATE TABLE publisher(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the publisher\n    publisher_name TEXT DEFAULT NULL  -- Name of the publisher, can be empty or null if not provided\n)\nCREATE TABLE race(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for each race entry\n    race TEXT DEFAULT NULL           -- Name or type of the race, which can include various fictional or non-human races\n)\nCREATE TABLE superhero(\n    id INTEGER not null primary key,  -- Unique identifier for the superhero\n    superhero_name TEXT default NULL,  -- Name of the superhero\n    full_name TEXT default NULL,  -- Full name or real identity of the superhero\n    gender_id INTEGER default NULL,  -- Identifier for the gender of the superhero, referencing the gender table\n    eye_colour_id INTEGER default NULL,  -- Identifier for the eye color of the superhero, referencing the colour table\n    hair_colour_id INTEGER default NULL,  -- Identifier for the hair color of the superhero, referencing the colour table\n    skin_colour_id INTEGER default NULL,  -- Identifier for the skin color of the superhero, referencing the colour table\n    race_id INTEGER default NULL,  -- Identifier for the race of the superhero, referencing the race table\n    publisher_id INTEGER default NULL,  -- Identifier for the publisher of the superhero, referencing the publisher table\n    alignment_id INTEGER default NULL,  -- Identifier for the alignment of the superhero, referencing the alignment table\n    height_cm INTEGER default NULL,  -- Height of the superhero in centimeters\n    weight_kg INTEGER default NULL,  -- Weight of the superhero in kilograms\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n)\nCREATE TABLE hero_attribute(\n    hero_id INTEGER default NULL,  -- Unique identifier for the hero, referencing the `superhero` table\n    attribute_id INTEGER default NULL,  -- Unique identifier for the attribute, referencing the `attribute` table\n    attribute_value INTEGER default NULL,  -- Value of the attribute for the specified hero\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n)\nCREATE TABLE superpower(\n    id INTEGER NOT NULL PRIMARY KEY,  -- Unique identifier for the superpower\n    power_name TEXT DEFAULT NULL      -- Name of the superpowerLL\n)\nCREATE TABLE hero_power(\n    hero_id INTEGER DEFAULT NULL,  -- Identifier for the hero, referencing the `id` column in the `superhero` table\n    power_id INTEGER DEFAULT NULL,  -- Identifier for the power, referencing the `id` column in the `superpower` table\n    foreign key (hero_id) references superhero(id),  -- Establishes a relationship with the superhero table based on hero_id\n    foreign key (power_id) references superpower(id)  -- Establishes a relationship with the superpower table based on power_id\n)"
    },
    {
        "question_id": 1003,
        "difficulty": "moderate",
        "db_id": "formula_1",
        "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 937,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
        "prediction": null,
        "ground_truth": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 1011,
        "difficulty": "challenging",
        "db_id": "formula_1",
        "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "prediction": null,
        "ground_truth": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 921,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 1012,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
        "prediction": null,
        "ground_truth": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 862,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 873,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "prediction": null,
        "ground_truth": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 977,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "From race no. 50 to 100, how many finishers have been disqualified?",
        "prediction": null,
        "ground_truth": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 929,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
        "prediction": null,
        "ground_truth": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    },
    {
        "question_id": 1128,
        "difficulty": "simple",
        "db_id": "european_football_2",
        "question": "Which country's players have the heaviest average weights?",
        "prediction": null,
        "ground_truth": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1105,
        "difficulty": "moderate",
        "db_id": "european_football_2",
        "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
        "prediction": null,
        "ground_truth": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1043,
        "difficulty": "simple",
        "db_id": "european_football_2",
        "question": "What is the short name of the football team Queens Park Rangers?",
        "prediction": null,
        "ground_truth": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1140,
        "difficulty": "simple",
        "db_id": "european_football_2",
        "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
        "prediction": null,
        "ground_truth": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1125,
        "difficulty": "moderate",
        "db_id": "european_football_2",
        "question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1038,
        "difficulty": "moderate",
        "db_id": "european_football_2",
        "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
        "prediction": null,
        "ground_truth": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1083,
        "difficulty": "simple",
        "db_id": "european_football_2",
        "question": "Which player has the strongest overall strength?",
        "prediction": null,
        "ground_truth": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1136,
        "difficulty": "moderate",
        "db_id": "european_football_2",
        "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1123,
        "difficulty": "simple",
        "db_id": "european_football_2",
        "question": "What is the name of players with the highest potential?",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/european_football_2/european_football_2.sqlite",
        "schema": "CREATE TABLE \"Player_Attributes\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player attribute record\n    `player_fifa_api_id` INTEGER,  -- Identifier linking to the player's FIFA API data\n    `player_api_id` INTEGER,  -- Identifier linking to the player's API data\n    `date` TEXT,  -- Date when the player attributes were recorded\n    `overall_rating` INTEGER,  -- Overall skill rating of the player\n    `potential` INTEGER,  -- Potential skill rating the player can achieve\n    `preferred_foot` TEXT,  -- Player's preferred foot for playing\n    `attacking_work_rate` TEXT,  -- Player's work rate in attacking situations\n    `defensive_work_rate` TEXT,  -- Player's work rate in defensive situations\n    `crossing` INTEGER,  -- Player's ability to deliver accurate crosses\n    `finishing` INTEGER,  -- Player's ability to finish scoring opportunities\n    `heading_accuracy` INTEGER,  -- Player's accuracy in heading the ball\n    `short_passing` INTEGER,  -- Player's ability to make accurate short passes\n    `volleys` INTEGER,  -- Player's ability to strike the ball before it hits the ground\n    `dribbling` INTEGER,  -- Player's skill in dribbling the ball\n    `curve` INTEGER,  -- Player's ability to curve the ball\n    `free_kick_accuracy` INTEGER,  -- Player's accuracy in taking free kicks\n    `long_passing` INTEGER,  -- Player's ability to make accurate long passes\n    `ball_control` INTEGER,  -- Player's skill in controlling the ball\n    `acceleration` INTEGER,  -- Player's speed in reaching top speed\n    `sprint_speed` INTEGER,  -- Player's top speed\n    `agility` INTEGER,  -- Player's ability to move quickly and easily\n    `reactions` INTEGER,  -- Player's response time to events on the field\n    `balance` INTEGER,  -- Player's ability to maintain balance\n    `shot_power` INTEGER,  -- Power behind the player's shots\n    `jumping` INTEGER,  -- Player's ability to jump\n    `stamina` INTEGER,  -- Player's endurance during a match\n    `strength` INTEGER,  -- Player's physical strength\n    `long_shots` INTEGER,  -- Player's ability to score from long distances\n    `aggression` INTEGER,  -- Player's aggression level during play\n    `interceptions` INTEGER,  -- Player's ability to intercept passes\n    `positioning` INTEGER,  -- Player's ability to position themselves effectively\n    `vision` INTEGER,  -- Player's ability to see and execute opportunities\n    `penalties` INTEGER,  -- Player's skill in taking penalty kicks\n    `marking` INTEGER,  -- Player's ability to mark opponents\n    `standing_tackle` INTEGER,  -- Player's skill in making standing tackles\n    `sliding_tackle` INTEGER,  -- Player's skill in making sliding tackles\n    `gk_diving` INTEGER,  -- Goalkeeper's diving ability\n    `gk_handling` INTEGER,  -- Goalkeeper's ability to handle the ball\n    `gk_kicking` INTEGER,  -- Goalkeeper's kicking ability\n    `gk_positioning` INTEGER,  -- Goalkeeper's positioning ability\n    `gk_reflexes` INTEGER,  -- Goalkeeper's reflexes\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n)\nCREATE TABLE `Player` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each player record, automatically incremented\n    `player_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the API database\n    `player_name` TEXT,  -- Full name of the player\n    `player_fifa_api_id` INTEGER UNIQUE,  -- Unique identifier for the player in the FIFA API database\n    `birthday` TEXT,  -- Date of birth of the player in 'YYYY-MM-DD HH:MM:SS' format\n    `height` INTEGER,  -- Height of the player in centimeters\n    `weight` INTEGER  -- Weight of the player in pounds\n)\nCREATE TABLE `League` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the league, automatically incremented\n    `country_id` INTEGER,  -- Identifier for the country associated with the league, referencing the `country` table\n    `name` TEXT UNIQUE,  -- Name of the league, must be unique across all entries\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n)\nCREATE TABLE `Country` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the country, automatically incremented\n    `name` TEXT UNIQUE,                      -- Name of the country, must be unique\n)\nCREATE TABLE \"Team\" (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team entry\n    `team_api_id` INTEGER UNIQUE,  -- Unique identifier for the team in the API\n    `team_fifa_api_id` INTEGER,  -- Unique identifier for the team in the FIFA database\n    `team_long_name` TEXT,  -- Full name of the team\n    `team_short_name` TEXT  -- Abbreviated name of the team\n)\nCREATE TABLE `Team_Attributes` (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for each team attribute entry\n    `team_fifa_api_id` INTEGER,  -- Identifier for the team in the FIFA database\n    `team_api_id` INTEGER,  -- Identifier for the team in the API database\n    `date` TEXT,  -- Date when the team attributes were recorded\n    `buildUpPlaySpeed` INTEGER,  -- Speed of the team's build-up play\n    `buildUpPlaySpeedClass` TEXT,  -- Classification of the build-up play speed (e.g., Balanced, Fast)\n    `buildUpPlayDribbling` INTEGER,  -- Dribbling skill level during build-up play\n    `buildUpPlayDribblingClass` TEXT,  -- Classification of the dribbling during build-up play (e.g., Little, Normal)\n    `buildUpPlayPassing` INTEGER,  -- Passing skill level during build-up play\n    `buildUpPlayPassingClass` TEXT,  -- Classification of the passing during build-up play (e.g., Mixed, Long)\n    `buildUpPlayPositioningClass` TEXT,  -- Positioning style during build-up play (e.g., Organised)\n    `chanceCreationPassing` INTEGER,  -- Passing skill level during chance creation\n    `chanceCreationPassingClass` TEXT,  -- Classification of the passing during chance creation (e.g., Normal, Risky)\n    `chanceCreationCrossing` INTEGER,  -- Crossing skill level during chance creation\n    `chanceCreationCrossingClass` TEXT,  -- Classification of the crossing during chance creation (e.g., Normal, Lots)\n    `chanceCreationShooting` INTEGER,  -- Shooting skill level during chance creation\n    `chanceCreationShootingClass` TEXT,  -- Classification of the shooting during chance creation (e.g., Normal, Lots)\n    `chanceCreationPositioningClass` TEXT,  -- Positioning style during chance creation (e.g., Organised, Free Form)\n    `defencePressure` INTEGER,  -- Level of pressure applied by the team's defense\n    `defencePressureClass` TEXT,  -- Classification of the defensive pressure (e.g., Medium, Deep)\n    `defenceAggression` INTEGER,  -- Level of aggression in the team's defense\n    `defenceAggressionClass` TEXT,  -- Classification of the defensive aggression (e.g., Press, Double)\n    `defenceTeamWidth` INTEGER,  -- Width of the team's defensive formation\n    `defenceTeamWidthClass` TEXT,  -- Classification of the defensive team width (e.g., Normal, Narrow)\n    `defenceDefenderLineClass` TEXT,  -- Style of the defensive line (e.g., Cover, Offside Trap)\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n)\nCREATE TABLE \"Match\"(\n    id INTEGER primary key autoincrement,  -- Unique identifier for each match\n    country_id INTEGER references Country,  -- Identifier for the country where the match is played\n    league_id INTEGER references League,  -- Identifier for the league in which the match is played\n    season TEXT,  -- Season during which the match takes place\n    stage INTEGER,  -- Stage of the competition or league\n    date TEXT,  -- Date and time when the match is played\n    match_api_id INTEGER unique,  -- Unique identifier for the match in the API\n    home_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the home team\n    away_team_api_id INTEGER references Team (team_api_id),  -- Identifier for the away team\n    home_team_goal INTEGER,  -- Number of goals scored by the home team\n    away_team_goal INTEGER,  -- Number of goals scored by the away team\n    home_player_X1 INTEGER,  -- X-coordinate of the first home player on the field\n    home_player_X2 INTEGER,  -- X-coordinate of the second home player on the field\n    home_player_X3 INTEGER,  -- X-coordinate of the third home player on the field\n    home_player_X4 INTEGER,  -- X-coordinate of the fourth home player on the field\n    home_player_X5 INTEGER,  -- X-coordinate of the fifth home player on the field\n    home_player_X6 INTEGER,  -- X-coordinate of the sixth home player on the field\n    home_player_X7 INTEGER,  -- X-coordinate of the seventh home player on the field\n    home_player_X8 INTEGER,  -- X-coordinate of the eighth home player on the field\n    home_player_X9 INTEGER,  -- X-coordinate of the ninth home player on the field\n    home_player_X10 INTEGER,  -- X-coordinate of the tenth home player on the field\n    home_player_X11 INTEGER,  -- X-coordinate of the eleventh home player on the field\n    away_player_X1 INTEGER,  -- X-coordinate of the first away player on the field\n    away_player_X2 INTEGER,  -- X-coordinate of the second away player on the field\n    away_player_X3 INTEGER,  -- X-coordinate of the third away player on the field\n    away_player_X4 INTEGER,  -- X-coordinate of the fourth away player on the field\n    away_player_X5 INTEGER,  -- X-coordinate of the fifth away player on the field\n    away_player_X6 INTEGER,  -- X-coordinate of the sixth away player on the field\n    away_player_X7 INTEGER,  -- X-coordinate of the seventh away player on the field\n    away_player_X8 INTEGER,  -- X-coordinate of the eighth away player on the field\n    away_player_X9 INTEGER,  -- X-coordinate of the ninth away player on the field\n    away_player_X10 INTEGER,  -- X-coordinate of the tenth away player on the field\n    away_player_X11 INTEGER,  -- X-coordinate of the eleventh away player on the field\n    home_player_Y1 INTEGER,  -- Y-coordinate of the first home player on the field\n    home_player_Y2 INTEGER,  -- Y-coordinate of the second home player on the field\n    home_player_Y3 INTEGER,  -- Y-coordinate of the third home player on the field\n    home_player_Y4 INTEGER,  -- Y-coordinate of the fourth home player on the field\n    home_player_Y5 INTEGER,  -- Y-coordinate of the fifth home player on the field\n    home_player_Y6 INTEGER,  -- Y-coordinate of the sixth home player on the field\n    home_player_Y7 INTEGER,  -- Y-coordinate of the seventh home player on the field\n    home_player_Y8 INTEGER,  -- Y-coordinate of the eighth home player on the field\n    home_player_Y9 INTEGER,  -- Y-coordinate of the ninth home player on the field\n    home_player_Y10 INTEGER,  -- Y-coordinate of the tenth home player on the field\n    home_player_Y11 INTEGER,  -- Y-coordinate of the eleventh home player on the field\n    away_player_Y1 INTEGER,  -- Y-coordinate of the first away player on the field\n    away_player_Y2 INTEGER,  -- Y-coordinate of the second away player on the field\n    away_player_Y3 INTEGER,  -- Y-coordinate of the third away player on the field\n    away_player_Y4 INTEGER,  -- Y-coordinate of the fourth away player on the field\n    away_player_Y5 INTEGER,  -- Y-coordinate of the fifth away player on the field\n    away_player_Y6 INTEGER,  -- Y-coordinate of the sixth away player on the field\n    away_player_Y7 INTEGER,  -- Y-coordinate of the seventh away player on the field\n    away_player_Y8 INTEGER,  -- Y-coordinate of the eighth away player on the field\n    away_player_Y9 INTEGER,  -- Y-coordinate of the ninth away player on the field\n    away_player_Y10 INTEGER,  -- Y-coordinate of the tenth away player on the field\n    away_player_Y11 INTEGER,  -- Y-coordinate of the eleventh away player on the field\n    home_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first home player\n    home_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second home player\n    home_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third home player\n    home_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth home player\n    home_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth home player\n    home_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth home player\n    home_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh home player\n    home_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth home player\n    home_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth home player\n    home_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth home player\n    home_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh home player\n    away_player_1 INTEGER references Player (player_api_id),  -- Identifier for the first away player\n    away_player_2 INTEGER references Player (player_api_id),  -- Identifier for the second away player\n    away_player_3 INTEGER references Player (player_api_id),  -- Identifier for the third away player\n    away_player_4 INTEGER references Player (player_api_id),  -- Identifier for the fourth away player\n    away_player_5 INTEGER references Player (player_api_id),  -- Identifier for the fifth away player\n    away_player_6 INTEGER references Player (player_api_id),  -- Identifier for the sixth away player\n    away_player_7 INTEGER references Player (player_api_id),  -- Identifier for the seventh away player\n    away_player_8 INTEGER references Player (player_api_id),  -- Identifier for the eighth away player\n    away_player_9 INTEGER references Player (player_api_id),  -- Identifier for the ninth away player\n    away_player_10 INTEGER references Player (player_api_id),  -- Identifier for the tenth away player\n    away_player_11 INTEGER references Player (player_api_id),  -- Identifier for the eleventh away player\n    goal TEXT,  -- Details about goals scored in the match\n    shoton TEXT,  -- Details about shots on target during the match\n    shotoff TEXT,  -- Details about shots off target during the match\n    foulcommit TEXT,  -- Details about fouls committed during the match\n    card TEXT,  -- Details about cards issued during the match\n    \"cross\" TEXT,  -- Details about crosses made during the match\n    corner TEXT,  -- Details about corner kicks during the match\n    possession TEXT,  -- Details about ball possession during the match\n    B365H REAL,  -- Bet365 odds for home team win\n    B365D REAL,  -- Bet365 odds for draw\n    B365A REAL,  -- Bet365 odds for away team win\n    BWH REAL,  -- Bet&Win odds for home team win\n    BWD REAL,  -- Bet&Win odds for draw\n    BWA REAL,  -- Bet&Win odds for away team win\n    IWH REAL,  -- Interwetten odds for home team win\n    IWD REAL,  -- Interwetten odds for draw\n    IWA REAL,  -- Interwetten odds for away team win\n    LBH REAL,  -- Ladbrokes odds for home team win\n    LBD REAL,  -- Ladbrokes odds for draw\n    LBA REAL,  -- Ladbrokes odds for away team win\n    PSH REAL,  -- Pinnacle odds for home team win\n    PSD REAL,  -- Pinnacle odds for draw\n    PSA REAL,  -- Pinnacle odds for away team win\n    WHH REAL,  -- William Hill odds for home team win\n    WHD REAL,  -- William Hill odds for draw\n    WHA REAL,  -- William Hill odds for away team win\n    SJH REAL,  -- Stan James odds for home team win\n    SJD REAL,  -- Stan James odds for draw\n    SJA REAL,  -- Stan James odds for away team win\n    VCH REAL,  -- VC Bet odds for home team win\n    VCD REAL,  -- VC Bet odds for draw\n    VCA REAL,  -- VC Bet odds for away team win\n    GBH REAL,  -- Gamebookers odds for home team win\n    GBD REAL,  -- Gamebookers odds for draw\n    GBA REAL,  -- Gamebookers odds for away team win\n    BSH REAL,  -- Blue Square odds for home team win\n    BSD REAL,  -- Blue Square odds for draw\n    BSA REAL  -- Blue Square odds for away\n)"
    },
    {
        "question_id": 1181,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
        "prediction": null,
        "ground_truth": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1184,
        "difficulty": "simple",
        "db_id": "thrombosis_prediction",
        "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
        "prediction": null,
        "ground_truth": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1287,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1280,
        "difficulty": "simple",
        "db_id": "thrombosis_prediction",
        "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1240,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
        "prediction": null,
        "ground_truth": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1162,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1304,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1205,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "Was the patient with the number 57266's uric acid within a normal range?",
        "prediction": null,
        "ground_truth": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1296,
        "difficulty": "moderate",
        "db_id": "thrombosis_prediction",
        "question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
        "prediction": null,
        "ground_truth": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/thrombosis_prediction/thrombosis_prediction.sqlite",
        "schema": "CREATE TABLE Examination(\n    ID INTEGER null,  -- Unique identifier for the examination, referencing the patient ID\n    `Examination Date` DATE null,  -- Date when the examination was conducted\n    `aCL IgG` REAL null,  -- Level of anti-cardiolipin IgG antibodies in the blood\n    `aCL IgM` REAL null,  -- Level of anti-cardiolipin IgM antibodies in the blood\n    ANA INTEGER null,  -- Titer level of antinuclear antibodies\n    `ANA Pattern` TEXT null,  -- Pattern observed in the antinuclear antibody test\n    `aCL IgA` INTEGER null,  -- Level of anti-cardiolipin IgA antibodies in the blood\n    Diagnosis TEXT null,  -- Medical diagnosis based on the examination results\n    KCT TEXT null,  -- Result of the Kaolin Clotting Time test\n    RVVT TEXT null,  -- Result of the Russell Viper Venom Test\n    LAC TEXT null,  -- Presence of lupus anticoagulant\n    Symptoms TEXT null,  -- Symptoms observed in the patient\n    Thrombosis INTEGER null,  -- Number of thrombosis events experienced by the patient\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade  -- Foreign key constraint linking to the Patient table\n)\nCREATE TABLE Patient(\n    ID INTEGER default 0 not null primary key,  -- Unique identifier for the patient\n    SEX TEXT null,  -- Gender of the patient\n    Birthday DATE null,  -- Date of birth of the patient\n    Description DATE null,  -- Date associated with a specific description or event for the patient\n    `First Date` DATE null,  -- Date of the first recorded event or visit for the patient\n    Admission TEXT null,  -- Admission status of the patient, indicated by '+' or '-'\n    Diagnosis TEXT null  -- Medical diagnosis or condition of the patient\n)\nCREATE TABLE Laboratory(\n    ID INTEGER default 0 not null,  -- Unique identifier for the patient, referencing the Patient table\n    Date DATE default '0000-00-00' not null,  -- Date of the laboratory test\n    GOT INTEGER null,  -- Glutamic Oxaloacetic Transaminase level, an enzyme found in the liver and heart\n    GPT INTEGER null,  -- Glutamic Pyruvic Transaminase level, an enzyme found in the liver\n    LDH INTEGER null,  -- Lactate Dehydrogenase level, an enzyme involved in energy production\n    ALP INTEGER null,  -- Alkaline Phosphatase level, an enzyme related to the liver and bones\n    TP REAL null,  -- Total Protein level in the blood\n    ALB REAL null,  -- Albumin level, a protein made by the liver\n    UA REAL null,  -- Uric Acid level, a waste product found in the blood\n    UN INTEGER null,  -- Urea Nitrogen level, a measure of kidney function\n    CRE REAL null,  -- Creatinine level, a waste product from muscle metabolism\n    `T-BIL` REAL null,  -- Total Bilirubin level, a substance produced by the breakdown of red blood cells\n    `T-CHO` INTEGER null,  -- Total Cholesterol level in the blood\n    TG INTEGER null,  -- Triglycerides level, a type of fat found in the blood\n    CPK INTEGER null,  -- Creatine Phosphokinase level, an enzyme found in the heart, brain, and skeletal muscle\n    GLU INTEGER null,  -- Glucose level, a measure of blood sugar\n    WBC REAL null,  -- White Blood Cell count, a measure of immune system health\n    RBC REAL null,  -- Red Blood Cell count, a measure of oxygen-carrying cells in the blood\n    HGB REAL null,  -- Hemoglobin level, a protein in red blood cells that carries oxygen\n    HCT REAL null,  -- Hematocrit level, the proportion of blood volume occupied by red blood cells\n    PLT INTEGER null,  -- Platelet count, a measure of blood clotting ability\n    PT REAL null,  -- Prothrombin Time, a measure of blood clotting time\n    APTT INTEGER null,  -- Activated Partial Thromboplastin Time, a measure of blood clotting time\n    FG REAL null,  -- Fibrinogen level, a protein involved in blood clotting\n    PIC INTEGER null,  -- Plasmin Inhibitor Complex level, related to blood clotting\n    TAT INTEGER null,  -- Thrombin-Antithrombin Complex level, related to blood clotting\n    TAT2 INTEGER null,  -- Secondary Thrombin-Antithrombin Complex level, related to blood clotting\n    `U-PRO` TEXT null,  -- Urine Protein level, a measure of protein in the urine\n    IGG INTEGER null,  -- Immunoglobulin G level, a type of antibody\n    IGA INTEGER null,  -- Immunoglobulin A level, a type of antibody\n    IGM INTEGER null,  -- Immunoglobulin M level, a type of antibody\n    CRP TEXT null,  -- C-Reactive Protein level, a marker of inflammation\n    RA TEXT null,  -- Rheumatoid Arthritis factor, a marker for rheumatoid arthritis\n    RF TEXT null,  -- Rheumatoid Factor, an antibody found in rheumatoid arthritis\n    C3 INTEGER null,  -- Complement Component 3 level, part of the immune system\n    C4 INTEGER null,  -- Complement Component 4 level, part of the immune system\n    RNP TEXT null,  -- Ribonucleoprotein level, related to autoimmune diseases\n    SM TEXT null,  -- Smith Antigen level, related to autoimmune diseases\n    SC170 TEXT null,  -- Scl-70 Antigen level, related to scleroderma\n    SSA TEXT null,  -- Sj\u00f6gren's Syndrome Antigen A level, related to autoimmune diseases\n    SSB TEXT null,  -- Sj\u00f6gren's Syndrome Antigen B level, related to autoimmune diseases\n    CENTROMEA TEXT null,  -- Centromere Antibody level, related to autoimmune diseases\n    DNA TEXT null,  -- Anti-DNA Antibody level, related to autoimmune diseases\n    `DNA-II` INTEGER null,  -- Secondary Anti-DNA Antibody level, related to autoimmune diseases\n    primary key (ID, Date),\n    foreign key (ID) references Patient (ID) on update cascade on delete cascade\n)"
    },
    {
        "question_id": 1403,
        "difficulty": "moderate",
        "db_id": "student_club",
        "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
        "prediction": null,
        "ground_truth": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1379,
        "difficulty": "simple",
        "db_id": "student_club",
        "question": "How many meeting events were held in 2020?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1322,
        "difficulty": "moderate",
        "db_id": "student_club",
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "prediction": null,
        "ground_truth": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1426,
        "difficulty": "moderate",
        "db_id": "student_club",
        "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
        "prediction": null,
        "ground_truth": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1333,
        "difficulty": "simple",
        "db_id": "student_club",
        "question": "What city and state did the President of the Student_Club grow up?",
        "prediction": null,
        "ground_truth": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1366,
        "difficulty": "simple",
        "db_id": "student_club",
        "question": "List all the members who attended the event \"October Meeting\".",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1441,
        "difficulty": "moderate",
        "db_id": "student_club",
        "question": "How many members have education major in the College of Education & Human Services?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1359,
        "difficulty": "challenging",
        "db_id": "student_club",
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "prediction": null,
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1430,
        "difficulty": "moderate",
        "db_id": "student_club",
        "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
        "prediction": null,
        "ground_truth": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/student_club/student_club.sqlite",
        "schema": "CREATE TABLE event(\n    event_id TEXT constraint event_pk primary key,  -- Unique identifier for the event\n    event_name TEXT,  -- Name or title of the event\n    event_date TEXT,  -- Date and time when the event is scheduled to occur\n    type TEXT,  -- Category or type of the event (e.g., Meeting, Election, Game, Guest Speaker, Social)\n    notes TEXT,  -- Additional information or remarks about the event\n    location TEXT,  -- Venue or place where the event will take place\n    status TEXT  -- Current status of the event (e.g., Open, Closed, Planning)\n)\nCREATE TABLE major(\n    major_id TEXT constraint major_pk primary key,  -- Unique identifier for the major\n    major_name TEXT,  -- Name of the major\n    department TEXT,  -- Department offering the major\n    college TEXT  -- College under which the major is offered\n)\nCREATE TABLE zip_code(\n    zip_code INTEGER CONSTRAINT zip_code_pk PRIMARY KEY,  -- Unique identifier for the postal code area\n    type TEXT,  -- Classification of the postal code (e.g., Standard, PO Box, Unique)\n    city TEXT,  -- Name of the city associated with the postal code\n    county TEXT,  -- Name of the county associated with the postal code, if applicable\n    state TEXT,  -- Full name of the state where the postal code is located\n    short_state TEXT  -- Abbreviation of the state name where the postal code is located\n)\nCREATE TABLE \"attendance\"(\n    link_to_event TEXT,  -- Unique identifier linking to a specific event\n    link_to_member TEXT,  -- Unique identifier linking to a specific member\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"budget\"(\n    budget_id     TEXT primary key,  -- Unique identifier for the budget entry\n    category      TEXT,              -- Category of the budget, such as 'Food' or 'Advertisement'\n    spent         REAL,              -- Amount of money already spent from the budget\n    remaining     REAL,              -- Amount of money remaining in the budget\n    amount        INTEGER,           -- Total allocated amount for the budget\n    event_status  TEXT,              -- Current status of the event, such as 'Open', 'Closed', or 'Planning'\n    link_to_event TEXT,              -- Reference to the associated event, linking to the event table\n    foreign key (link_to_event) references event(event_id)  -- Foreign key linking to the event table's event_id\n)\nCREATE TABLE \"expense\"(\n    expense_id TEXT primary key,  -- Unique identifier for the expense record\n    expense_description TEXT,     -- Description of the expense item(s)\n    expense_date TEXT,            -- Date when the expense was incurred\n    cost REAL,                    -- Monetary cost of the expense\n    approved TEXT,                -- Approval status of the expense (e.g., 'true' or 'false')\n    link_to_member TEXT,          -- Reference to the member associated with the expense\n    link_to_budget TEXT,          -- Reference to the budget associated with the expense\n    foreign key (link_to_budget) references budget(budget_id),  -- Foreign key linking to the budget table\n    foreign key (link_to_member) references member(member_id)   -- Foreign key linking to the member table\n)\nCREATE TABLE \"income\"(\n    income_id TEXT constraint income_pk primary key,  -- Unique identifier for each income record\n    date_received TEXT,  -- Date when the income was received\n    amount INTEGER,  -- Amount of money received\n    source TEXT,  -- Origin or reason for the income, such as 'Dues' or 'Fundraising'\n    notes TEXT,  -- Additional information or comments about the income\n    link_to_member TEXT,  -- Reference to the member associated with the income, linking to the member table\n    foreign key (link_to_member) references member(member_id)\n)\nCREATE TABLE \"member\"(\n    member_id TEXT constraint member_pk primary key,  -- Unique identifier for the member\n    first_name TEXT,  -- First name of the member\n    last_name TEXT,  -- Last name of the member\n    email TEXT,  -- Email address of the member\n    position TEXT,  -- Position or role of the member within the organization\n    t_shirt_size TEXT,  -- T-shirt size of the member\n    phone TEXT,  -- Contact phone number of the member\n    zip INTEGER,  -- Zip code of the member's address\n    link_to_major TEXT,  -- Reference to the member's major, linked to the major table\n    foreign key (link_to_major) references major(major_id),  -- Foreign key constraint linking to the major table\n    foreign key (zip) references zip_code(zip_code)  -- Foreign key constraint linking to the zip_code table\n)"
    },
    {
        "question_id": 1530,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "Which are the top five best selling products? Please state the full name of them.",
        "prediction": null,
        "ground_truth": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1523,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "Which country was the card owner of No.667467 in?",
        "prediction": null,
        "ground_truth": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1512,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "Which customer paid the most in 2012/8/25?",
        "prediction": null,
        "ground_truth": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1515,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "What segment did the customer have at 2012/8/23 21:20:00?",
        "prediction": null,
        "ground_truth": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1506,
        "difficulty": "moderate",
        "db_id": "debit_card_specializing",
        "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1489,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "How much did the KAM customers consume in total in May 2013?",
        "prediction": null,
        "ground_truth": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1483,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "How much did customer 6 consume in total between August and November 2013?",
        "prediction": null,
        "ground_truth": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1505,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 1510,
        "difficulty": "simple",
        "db_id": "debit_card_specializing",
        "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
        "prediction": null,
        "ground_truth": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/debit_card_specializing/debit_card_specializing.sqlite",
        "schema": "CREATE TABLE customers(\n    CustomerID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each customer\n    Segment TEXT NULL,  -- Category or group to which the customer belongs (e.g., SME, LAM, KAM)\n    Currency TEXT NULL  -- Currency code used by the customer (e.g., EUR)\n)\nCREATE TABLE gasstations(\n    GasStationID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each gas station\n    ChainID INTEGER NULL,  -- Identifier for the chain to which the gas station belongs\n    Country TEXT NULL,  -- Country code where the gas station is located\n    Segment TEXT NULL  -- Market segment classification of the gas station\n)\nCREATE TABLE products(\n    ProductID INTEGER UNIQUE NOT NULL PRIMARY KEY,  -- Unique identifier for each product\n    Description TEXT NULL                          -- Textual description of the product\n)\nCREATE TABLE \"transactions_1k\"(\n    TransactionID INTEGER primary key autoincrement,  -- Unique identifier for each transaction\n    Date DATE,                                        -- Date when the transaction occurred\n    Time TEXT,                                        -- Time when the transaction occurred\n    CustomerID INTEGER,                               -- Unique identifier for the customer involved in the transaction\n    CardID INTEGER,                                   -- Unique identifier for the card used in the transaction\n    GasStationID INTEGER,                             -- Unique identifier for the gas station where the transaction took place\n    ProductID INTEGER,                                -- Unique identifier for the product purchased in the transaction\n    Amount INTEGER,                                   -- Quantity of the product purchased\n    Price REAL                                        -- Total price of the transaction\n)\nCREATE TABLE \"yearmonth\"(\n    CustomerID INTEGER not null references customers on update cascade on delete cascade references customers,  -- Unique identifier for the customer, linked to the customers table\n    Date TEXT not null,  -- Year and month of the consumption record, formatted as YYYYMM\n    Consumption REAL,  -- Amount of consumption recorded for the customer in the specified month\n    primary key (Date, CustomerID)  -- Composite primary key ensuring each record is unique for a given customer and date\n)"
    },
    {
        "question_id": 915,
        "difficulty": "simple",
        "db_id": "formula_1",
        "question": "Which country is the oldest driver from?",
        "prediction": null,
        "ground_truth": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/bird/dev_databases/formula_1/formula_1.sqlite",
        "schema": "CREATE TABLE circuits(\n    circuitId INTEGER primary key autoincrement,  -- Unique identifier for each circuit, automatically incremented\n    circuitRef TEXT default '' not null,          -- Reference code or abbreviation for the circuit\n    name TEXT default '' not null,                -- Full name of the circuit\n    location TEXT,                                -- City or locality where the circuit is located\n    country TEXT,                                 -- Country where the circuit is situated\n    lat REAL,                                     -- Latitude coordinate of the circuit's location\n    lng REAL,                                     -- Longitude coordinate of the circuit's location\n    alt INTEGER,                                  -- Altitude of the circuit above sea level, in meters\n    url TEXT default '' not null unique           -- Unique URL linking to more information about the circuit\n)\nCREATE TABLE constructors(\n    constructorId INTEGER primary key autoincrement,  -- Unique identifier for each constructor, automatically incremented\n    constructorRef TEXT default '' not null,          -- Reference code or abbreviation for the constructor, cannot be null\n    name TEXT default '' not null unique,             -- Full name of the constructor, must be unique and cannot be null\n    nationality TEXT,                                 -- Nationality of the constructor, indicating the country of origin\n    url TEXT default '' not null                      -- URL to the constructor's Wikipedia page or official site, cannot be null\n)\nCREATE TABLE drivers(\n    driverId INTEGER primary key autoincrement,  -- Unique identifier for each driver, automatically incremented\n    driverRef TEXT default '' not null,          -- Reference code or nickname for the driver, cannot be null\n    number INTEGER,                              -- Racing number assigned to the driver, may be null if not assigned\n    code TEXT,                                   -- Abbreviation or code representing the driver, often used in race results\n    forename TEXT default '' not null,           -- First name of the driver, cannot be null\n    surname TEXT default '' not null,            -- Last name of the driver, cannot be null\n    dob DATE,                                    -- Date of birth of the driver\n    nationality TEXT,                            -- Nationality of the driver\n    url TEXT default '' not null unique          -- Unique URL linking to the driver's detailed profile or biography, cannot be null\n)\nCREATE TABLE seasons(\n    year INTEGER default 0 not null primary key,  -- Year of the Formula One season, serving as a unique identifier for each season\n    url TEXT default '' not null unique,          -- URL linking to the Wikipedia page for the specific Formula One season\n)\nCREATE TABLE races(\n    raceId INTEGER primary key autoincrement,  -- Unique identifier for each race\n    year INTEGER default 0 not null,           -- Year in which the race took place\n    round INTEGER default 0 not null,          -- The round number of the race within the season\n    circuitId INTEGER default 0 not null,      -- Identifier for the circuit where the race is held\n    name TEXT default '' not null,             -- Official name of the race\n    date DATE default '0000-00-00' not null,   -- Date on which the race occurred\n    time TEXT,                                 -- Scheduled start time of the race\n    url TEXT unique,                           -- Unique URL linking to more information about the race\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n)\nCREATE TABLE constructorResults(\n    constructorResultsId INTEGER primary key autoincrement,  -- Unique identifier for each constructor result entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL,  -- Points awarded to the constructor for the race\n    status TEXT,  -- Status of the constructor's result in the race (e.g., finished, disqualified)\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE constructorStandings(\n    constructorStandingsId INTEGER primary key autoincrement,  -- Unique identifier for the constructor standings entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the standings, referencing the races table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    points REAL default 0 not null,  -- Total points accumulated by the constructor in the race\n    position INTEGER,  -- Numerical position of the constructor in the race standings\n    positionText TEXT,  -- Textual representation of the constructor's position in the race standings\n    wins INTEGER default 0 not null,  -- Number of wins achieved by the constructor in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE driverStandings(\n    driverStandingsId INTEGER primary key autoincrement,  -- Unique identifier for each driver standing entry\n    raceId INTEGER default 0 not null,  -- Identifier for the race associated with the driver standing\n    driverId INTEGER default 0 not null,  -- Identifier for the driver associated with the standing\n    points REAL default 0 not null,  -- Total points earned by the driver in the race\n    position INTEGER,  -- Finishing position of the driver in the race\n    positionText TEXT,  -- Textual representation of the driver's finishing position\n    wins INTEGER default 0 not null,  -- Number of wins the driver has in the race\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n)\nCREATE TABLE lapTimes(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    lap INTEGER not null,          -- The lap number within the race\n    position INTEGER,              -- The position of the driver at the end of the lap\n    time TEXT,                     -- The lap time in a formatted string (e.g., '1:49.088')\n    milliseconds INTEGER,          -- The lap time in milliseconds for precise measurement\n    primary key (raceId, driverId, lap),  -- Composite primary key ensuring uniqueness of each lap entry for a driver in a race\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE pitStops(\n    raceId INTEGER not null,       -- Unique identifier for the race, referencing the `races` table\n    driverId INTEGER not null,     -- Unique identifier for the driver, referencing the `drivers` table\n    stop INTEGER not null,         -- Sequence number of the pit stop for the driver in the race\n    lap INTEGER not null,          -- Lap number during which the pit stop occurred\n    time TEXT not null,            -- Time of day when the pit stop occurred, formatted as a string\n    duration TEXT,                 -- Duration of the pit stop, formatted as a string\n    milliseconds INTEGER,          -- Duration of the pit stop in milliseconds\n    primary key (raceId, driverId, stop),  -- Composite primary key ensuring uniqueness of each pit stop entry\n    foreign key (raceId) references races(raceId),  -- Foreign key constraint linking to the `races` table\n    foreign key (driverId) references drivers(driverId)  -- Foreign key constraint linking to the `drivers` table\n)\nCREATE TABLE qualifying(\n    qualifyId INTEGER primary key autoincrement,  -- Unique identifier for the qualifying session\n    raceId INTEGER default 0 not null,  -- Identifier for the race event, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor team, referencing the constructors table\n    number INTEGER default 0 not null,  -- Car number used by the driver during the qualifying session\n    position INTEGER,  -- Final position achieved by the driver in the qualifying session\n    q1 TEXT,  -- Lap time recorded by the driver in the first qualifying session (Q1)\n    q2 TEXT,  -- Lap time recorded by the driver in the second qualifying session (Q2)\n    q3 TEXT,  -- Lap time recorded by the driver in the third qualifying session (Q3)\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n)\nCREATE TABLE status(\n    statusId INTEGER primary key autoincrement,  -- Unique identifier for each status entry\n    status TEXT default '' not null              -- Description or name of the status\n)\nCREATE TABLE results(\n    resultId INTEGER primary key autoincrement,  -- Unique identifier for the race result\n    raceId INTEGER default 0 not null,  -- Identifier for the race, referencing the races table\n    driverId INTEGER default 0 not null,  -- Identifier for the driver, referencing the drivers table\n    constructorId INTEGER default 0 not null,  -- Identifier for the constructor, referencing the constructors table\n    number INTEGER,  -- Car number used by the driver in the race\n    grid INTEGER default 0 not null,  -- Starting position of the driver on the grid\n    position INTEGER,  -- Final position of the driver in the race\n    positionText TEXT default '' not null,  -- Text representation of the final position (e.g., '1', '2', 'R' for retired)\n    positionOrder INTEGER default 0 not null,  -- Order of the driver's finish in the race\n    points REAL default 0 not null,  -- Points awarded to the driver for the race\n    laps INTEGER default 0 not null,  -- Number of laps completed by the driver\n    time TEXT,  -- Total race time for the driver\n    milliseconds INTEGER,  -- Total race time in milliseconds\n    fastestLap INTEGER,  -- Lap number in which the driver achieved their fastest lap\n    rank INTEGER default 0,  -- Rank of the driver's fastest lap time compared to others\n    fastestLapTime TEXT,  -- Time of the driver's fastest lap\n    fastestLapSpeed TEXT,  -- Speed achieved during the driver's fastest lap\n    statusId INTEGER default 0 not null,  -- Identifier for the race status, referencing the status table\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n)"
    }
]