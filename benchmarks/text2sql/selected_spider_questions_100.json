[
    {
        "question_id": 24,
        "difficulty": null,
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "prediction": null,
        "ground_truth": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/concert_singer/concert_singer.sqlite",
        "schema": "CREATE TABLE \"stadium\" (\n    \"Stadium_ID\" int,  -- Unique identifier for the stadium\n    \"Location\" text,   -- Geographical location of the stadium\n    \"Name\" text,       -- Name of the stadium\n    \"Capacity\" int,    -- Maximum number of spectators the stadium can accommodate\n    \"Highest\" int,     -- Highest recorded attendance at the stadium\n    \"Lowest\" int,      -- Lowest recorded attendance at the stadium\n    \"Average\" int,     -- Average attendance at the stadium\n    PRIMARY KEY (\"Stadium_ID\")\n)\nCREATE TABLE \"singer\" (\n    \"Singer_ID\" int,          -- Unique identifier for the singer\n    \"Name\" text,              -- Full name of the singer\n    \"Country\" text,           -- Country of origin of the singer\n    \"Song_Name\" text,         -- Name of a song performed by the singer\n    \"Song_release_year\" text, -- Year the song was released\n    \"Age\" int,                -- Age of the singer\n    \"Is_male\" bool,           -- Gender of the singer, where true indicates male\n    PRIMARY KEY (\"Singer_ID\")\n)\nCREATE TABLE \"concert\" (\n    \"concert_ID\" int,       -- Unique identifier for the concert\n    \"concert_Name\" text,    -- Name of the concert\n    \"Theme\" text,           -- Theme or main concept of the concert\n    \"Stadium_ID\" text,      -- Identifier of the stadium where the concert is held, referencing \"Stadium_ID\" in the stadium table\n    \"Year\" text,            -- Year the concert took place\n    PRIMARY KEY (\"concert_ID\"),\n    FOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\nCREATE TABLE \"singer_in_concert\" (\n    \"concert_ID\" int,       -- Identifier of the concert, referencing \"concert_ID\" in the concert table\n    \"Singer_ID\" text,       -- Identifier of the singer, referencing \"Singer_ID\" in the singer table\n    PRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\n    FOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)"
    },
    {
        "question_id": 17,
        "difficulty": null,
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "prediction": null,
        "ground_truth": "select avg(capacity) ,  max(capacity) from stadium",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/concert_singer/concert_singer.sqlite",
        "schema": "CREATE TABLE \"stadium\" (\n    \"Stadium_ID\" int,  -- Unique identifier for the stadium\n    \"Location\" text,   -- Geographical location of the stadium\n    \"Name\" text,       -- Name of the stadium\n    \"Capacity\" int,    -- Maximum number of spectators the stadium can accommodate\n    \"Highest\" int,     -- Highest recorded attendance at the stadium\n    \"Lowest\" int,      -- Lowest recorded attendance at the stadium\n    \"Average\" int,     -- Average attendance at the stadium\n    PRIMARY KEY (\"Stadium_ID\")\n)\nCREATE TABLE \"singer\" (\n    \"Singer_ID\" int,          -- Unique identifier for the singer\n    \"Name\" text,              -- Full name of the singer\n    \"Country\" text,           -- Country of origin of the singer\n    \"Song_Name\" text,         -- Name of a song performed by the singer\n    \"Song_release_year\" text, -- Year the song was released\n    \"Age\" int,                -- Age of the singer\n    \"Is_male\" bool,           -- Gender of the singer, where true indicates male\n    PRIMARY KEY (\"Singer_ID\")\n)\nCREATE TABLE \"concert\" (\n    \"concert_ID\" int,       -- Unique identifier for the concert\n    \"concert_Name\" text,    -- Name of the concert\n    \"Theme\" text,           -- Theme or main concept of the concert\n    \"Stadium_ID\" text,      -- Identifier of the stadium where the concert is held, referencing \"Stadium_ID\" in the stadium table\n    \"Year\" text,            -- Year the concert took place\n    PRIMARY KEY (\"concert_ID\"),\n    FOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\nCREATE TABLE \"singer_in_concert\" (\n    \"concert_ID\" int,       -- Identifier of the concert, referencing \"concert_ID\" in the concert table\n    \"Singer_ID\" text,       -- Identifier of the singer, referencing \"Singer_ID\" in the singer table\n    PRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\n    FOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)"
    },
    {
        "question_id": 16,
        "difficulty": null,
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "prediction": null,
        "ground_truth": "select max(capacity), average from stadium",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/concert_singer/concert_singer.sqlite",
        "schema": "CREATE TABLE \"stadium\" (\n    \"Stadium_ID\" int,  -- Unique identifier for the stadium\n    \"Location\" text,   -- Geographical location of the stadium\n    \"Name\" text,       -- Name of the stadium\n    \"Capacity\" int,    -- Maximum number of spectators the stadium can accommodate\n    \"Highest\" int,     -- Highest recorded attendance at the stadium\n    \"Lowest\" int,      -- Lowest recorded attendance at the stadium\n    \"Average\" int,     -- Average attendance at the stadium\n    PRIMARY KEY (\"Stadium_ID\")\n)\nCREATE TABLE \"singer\" (\n    \"Singer_ID\" int,          -- Unique identifier for the singer\n    \"Name\" text,              -- Full name of the singer\n    \"Country\" text,           -- Country of origin of the singer\n    \"Song_Name\" text,         -- Name of a song performed by the singer\n    \"Song_release_year\" text, -- Year the song was released\n    \"Age\" int,                -- Age of the singer\n    \"Is_male\" bool,           -- Gender of the singer, where true indicates male\n    PRIMARY KEY (\"Singer_ID\")\n)\nCREATE TABLE \"concert\" (\n    \"concert_ID\" int,       -- Unique identifier for the concert\n    \"concert_Name\" text,    -- Name of the concert\n    \"Theme\" text,           -- Theme or main concept of the concert\n    \"Stadium_ID\" text,      -- Identifier of the stadium where the concert is held, referencing \"Stadium_ID\" in the stadium table\n    \"Year\" text,            -- Year the concert took place\n    PRIMARY KEY (\"concert_ID\"),\n    FOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\nCREATE TABLE \"singer_in_concert\" (\n    \"concert_ID\" int,       -- Identifier of the concert, referencing \"concert_ID\" in the concert table\n    \"Singer_ID\" text,       -- Identifier of the singer, referencing \"Singer_ID\" in the singer table\n    PRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\n    FOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)"
    },
    {
        "question_id": 6,
        "difficulty": null,
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "prediction": null,
        "ground_truth": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/concert_singer/concert_singer.sqlite",
        "schema": "CREATE TABLE \"stadium\" (\n    \"Stadium_ID\" int,  -- Unique identifier for the stadium\n    \"Location\" text,   -- Geographical location of the stadium\n    \"Name\" text,       -- Name of the stadium\n    \"Capacity\" int,    -- Maximum number of spectators the stadium can accommodate\n    \"Highest\" int,     -- Highest recorded attendance at the stadium\n    \"Lowest\" int,      -- Lowest recorded attendance at the stadium\n    \"Average\" int,     -- Average attendance at the stadium\n    PRIMARY KEY (\"Stadium_ID\")\n)\nCREATE TABLE \"singer\" (\n    \"Singer_ID\" int,          -- Unique identifier for the singer\n    \"Name\" text,              -- Full name of the singer\n    \"Country\" text,           -- Country of origin of the singer\n    \"Song_Name\" text,         -- Name of a song performed by the singer\n    \"Song_release_year\" text, -- Year the song was released\n    \"Age\" int,                -- Age of the singer\n    \"Is_male\" bool,           -- Gender of the singer, where true indicates male\n    PRIMARY KEY (\"Singer_ID\")\n)\nCREATE TABLE \"concert\" (\n    \"concert_ID\" int,       -- Unique identifier for the concert\n    \"concert_Name\" text,    -- Name of the concert\n    \"Theme\" text,           -- Theme or main concept of the concert\n    \"Stadium_ID\" text,      -- Identifier of the stadium where the concert is held, referencing \"Stadium_ID\" in the stadium table\n    \"Year\" text,            -- Year the concert took place\n    PRIMARY KEY (\"concert_ID\"),\n    FOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\nCREATE TABLE \"singer_in_concert\" (\n    \"concert_ID\" int,       -- Identifier of the concert, referencing \"concert_ID\" in the concert table\n    \"Singer_ID\" text,       -- Identifier of the singer, referencing \"Singer_ID\" in the singer table\n    PRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\n    FOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)"
    },
    {
        "question_id": 33,
        "difficulty": null,
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "prediction": null,
        "ground_truth": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/concert_singer/concert_singer.sqlite",
        "schema": "CREATE TABLE \"stadium\" (\n    \"Stadium_ID\" int,  -- Unique identifier for the stadium\n    \"Location\" text,   -- Geographical location of the stadium\n    \"Name\" text,       -- Name of the stadium\n    \"Capacity\" int,    -- Maximum number of spectators the stadium can accommodate\n    \"Highest\" int,     -- Highest recorded attendance at the stadium\n    \"Lowest\" int,      -- Lowest recorded attendance at the stadium\n    \"Average\" int,     -- Average attendance at the stadium\n    PRIMARY KEY (\"Stadium_ID\")\n)\nCREATE TABLE \"singer\" (\n    \"Singer_ID\" int,          -- Unique identifier for the singer\n    \"Name\" text,              -- Full name of the singer\n    \"Country\" text,           -- Country of origin of the singer\n    \"Song_Name\" text,         -- Name of a song performed by the singer\n    \"Song_release_year\" text, -- Year the song was released\n    \"Age\" int,                -- Age of the singer\n    \"Is_male\" bool,           -- Gender of the singer, where true indicates male\n    PRIMARY KEY (\"Singer_ID\")\n)\nCREATE TABLE \"concert\" (\n    \"concert_ID\" int,       -- Unique identifier for the concert\n    \"concert_Name\" text,    -- Name of the concert\n    \"Theme\" text,           -- Theme or main concept of the concert\n    \"Stadium_ID\" text,      -- Identifier of the stadium where the concert is held, referencing \"Stadium_ID\" in the stadium table\n    \"Year\" text,            -- Year the concert took place\n    PRIMARY KEY (\"concert_ID\"),\n    FOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\nCREATE TABLE \"singer_in_concert\" (\n    \"concert_ID\" int,       -- Identifier of the concert, referencing \"concert_ID\" in the concert table\n    \"Singer_ID\" text,       -- Identifier of the singer, referencing \"Singer_ID\" in the singer table\n    PRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\n    FOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)"
    },
    {
        "question_id": 50,
        "difficulty": null,
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "prediction": null,
        "ground_truth": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/pets_1/pets_1.sqlite",
        "schema": "CREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,  -- Unique identifier for the student\n       LName\t\tVARCHAR(12),          -- Last name of the student\n       Fname\t\tVARCHAR(12),          -- First name of the student\n       Age\t\tINTEGER,              -- Age of the student\n       Sex\t\tVARCHAR(1),           -- Gender of the student, typically 'M' or 'F'\n       Major\t\tINTEGER,              -- Identifier for the student's major field of study\n       Advisor\tINTEGER,              -- Identifier for the student's academic advisor\n       city_code\tVARCHAR(3)            -- Code representing the city of the student's residence\n)\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,              -- Identifier for the student who owns the pet\n       PetID\t\tINTEGER,              -- Identifier for the pet owned by the student\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),  -- Foreign key linking to the pet's unique identifier\n       FOREIGN KEY(StuID) REFERENCES Student(StuID) -- Foreign key linking to the student's unique identifier\n)\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,  -- Unique identifier for the pet\n       PetType\t\tVARCHAR(20),          -- Type or species of the pet\n       pet_age INTEGER,              -- Age of the pet\n       weight REAL                   -- Weight of the pet in appropriate units (e.g., kilograms)\n)"
    },
    {
        "question_id": 77,
        "difficulty": null,
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "prediction": null,
        "ground_truth": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/pets_1/pets_1.sqlite",
        "schema": "CREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,  -- Unique identifier for the student\n       LName\t\tVARCHAR(12),          -- Last name of the student\n       Fname\t\tVARCHAR(12),          -- First name of the student\n       Age\t\tINTEGER,              -- Age of the student\n       Sex\t\tVARCHAR(1),           -- Gender of the student, typically 'M' or 'F'\n       Major\t\tINTEGER,              -- Identifier for the student's major field of study\n       Advisor\tINTEGER,              -- Identifier for the student's academic advisor\n       city_code\tVARCHAR(3)            -- Code representing the city of the student's residence\n)\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,              -- Identifier for the student who owns the pet\n       PetID\t\tINTEGER,              -- Identifier for the pet owned by the student\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),  -- Foreign key linking to the pet's unique identifier\n       FOREIGN KEY(StuID) REFERENCES Student(StuID) -- Foreign key linking to the student's unique identifier\n)\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,  -- Unique identifier for the pet\n       PetType\t\tVARCHAR(20),          -- Type or species of the pet\n       pet_age INTEGER,              -- Age of the pet\n       weight REAL                   -- Weight of the pet in appropriate units (e.g., kilograms)\n)"
    },
    {
        "question_id": 56,
        "difficulty": null,
        "db_id": "pets_1",
        "question": "How many different types of pet are there?",
        "prediction": null,
        "ground_truth": "SELECT count(DISTINCT pettype) FROM pets",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/pets_1/pets_1.sqlite",
        "schema": "CREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,  -- Unique identifier for the student\n       LName\t\tVARCHAR(12),          -- Last name of the student\n       Fname\t\tVARCHAR(12),          -- First name of the student\n       Age\t\tINTEGER,              -- Age of the student\n       Sex\t\tVARCHAR(1),           -- Gender of the student, typically 'M' or 'F'\n       Major\t\tINTEGER,              -- Identifier for the student's major field of study\n       Advisor\tINTEGER,              -- Identifier for the student's academic advisor\n       city_code\tVARCHAR(3)            -- Code representing the city of the student's residence\n)\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,              -- Identifier for the student who owns the pet\n       PetID\t\tINTEGER,              -- Identifier for the pet owned by the student\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),  -- Foreign key linking to the pet's unique identifier\n       FOREIGN KEY(StuID) REFERENCES Student(StuID) -- Foreign key linking to the student's unique identifier\n)\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,  -- Unique identifier for the pet\n       PetType\t\tVARCHAR(20),          -- Type or species of the pet\n       pet_age INTEGER,              -- Age of the pet\n       weight REAL                   -- Weight of the pet in appropriate units (e.g., kilograms)\n)"
    },
    {
        "question_id": 59,
        "difficulty": null,
        "db_id": "pets_1",
        "question": "Find the first name of students who have both cat and dog pets .",
        "prediction": null,
        "ground_truth": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/pets_1/pets_1.sqlite",
        "schema": "CREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,  -- Unique identifier for the student\n       LName\t\tVARCHAR(12),          -- Last name of the student\n       Fname\t\tVARCHAR(12),          -- First name of the student\n       Age\t\tINTEGER,              -- Age of the student\n       Sex\t\tVARCHAR(1),           -- Gender of the student, typically 'M' or 'F'\n       Major\t\tINTEGER,              -- Identifier for the student's major field of study\n       Advisor\tINTEGER,              -- Identifier for the student's academic advisor\n       city_code\tVARCHAR(3)            -- Code representing the city of the student's residence\n)\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,              -- Identifier for the student who owns the pet\n       PetID\t\tINTEGER,              -- Identifier for the pet owned by the student\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),  -- Foreign key linking to the pet's unique identifier\n       FOREIGN KEY(StuID) REFERENCES Student(StuID) -- Foreign key linking to the student's unique identifier\n)\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,  -- Unique identifier for the pet\n       PetType\t\tVARCHAR(20),          -- Type or species of the pet\n       pet_age INTEGER,              -- Age of the pet\n       weight REAL                   -- Weight of the pet in appropriate units (e.g., kilograms)\n)"
    },
    {
        "question_id": 68,
        "difficulty": null,
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "prediction": null,
        "ground_truth": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/pets_1/pets_1.sqlite",
        "schema": "CREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,  -- Unique identifier for the student\n       LName\t\tVARCHAR(12),          -- Last name of the student\n       Fname\t\tVARCHAR(12),          -- First name of the student\n       Age\t\tINTEGER,              -- Age of the student\n       Sex\t\tVARCHAR(1),           -- Gender of the student, typically 'M' or 'F'\n       Major\t\tINTEGER,              -- Identifier for the student's major field of study\n       Advisor\tINTEGER,              -- Identifier for the student's academic advisor\n       city_code\tVARCHAR(3)            -- Code representing the city of the student's residence\n)\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,              -- Identifier for the student who owns the pet\n       PetID\t\tINTEGER,              -- Identifier for the pet owned by the student\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),  -- Foreign key linking to the pet's unique identifier\n       FOREIGN KEY(StuID) REFERENCES Student(StuID) -- Foreign key linking to the student's unique identifier\n)\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,  -- Unique identifier for the pet\n       PetType\t\tVARCHAR(20),          -- Type or species of the pet\n       pet_age INTEGER,              -- Age of the pet\n       weight REAL                   -- Weight of the pet in appropriate units (e.g., kilograms)\n)"
    },
    {
        "question_id": 133,
        "difficulty": null,
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "prediction": null,
        "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/car_1/car_1.sqlite",
        "schema": "CREATE TABLE \"continents\" (\n\t\"ContId\" INTEGER PRIMARY KEY,  -- Unique identifier for each continent\n\t\"Continent\" TEXT  -- Name of the continent\n)\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY,  -- Unique identifier for each country\n\t\"CountryName\" TEXT,  -- Name of the country\n\t\"Continent\" INTEGER,  -- Identifier for the continent the country belongs to\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\nCREATE TABLE \"car_makers\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car maker\n\t\"Maker\" TEXT,  -- Short name or abbreviation of the car maker\n\t\"FullName\" TEXT,  -- Full name of the car maker\n\t\"Country\" TEXT,  -- Identifier for the country where the car maker is based\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\nCREATE TABLE \"model_list\" (\n\t\"ModelId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car model\n\t\"Maker\" INTEGER,  -- Identifier for the car maker of the model\n\t\"Model\" TEXT UNIQUE,  -- Name of the car model, must be unique\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n)\nCREATE TABLE \"car_names\" (\n\t\"MakeId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car make\n\t\"Model\" TEXT,  -- Name of the car model\n\t\"Make\" TEXT,  -- Name of the car make\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car data entry\n\t\"MPG\" TEXT,  -- Miles per gallon fuel efficiency of the car\n\t\"Cylinders\" INTEGER,  -- Number of cylinders in the car's engine\n\t\"Edispl\" REAL,  -- Engine displacement in liters\n\t\"Horsepower\" TEXT,  -- Horsepower of the car's engine\n\t\"Weight\" INTEGER,  -- Weight of the car in pounds\n\t\"Accelerate\" REAL,  -- Acceleration time from 0 to 60 mph in seconds\n\t\"Year\" INTEGER,  -- Manufacturing year of the car\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)"
    },
    {
        "question_id": 99,
        "difficulty": null,
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/car_1/car_1.sqlite",
        "schema": "CREATE TABLE \"continents\" (\n\t\"ContId\" INTEGER PRIMARY KEY,  -- Unique identifier for each continent\n\t\"Continent\" TEXT  -- Name of the continent\n)\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY,  -- Unique identifier for each country\n\t\"CountryName\" TEXT,  -- Name of the country\n\t\"Continent\" INTEGER,  -- Identifier for the continent the country belongs to\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\nCREATE TABLE \"car_makers\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car maker\n\t\"Maker\" TEXT,  -- Short name or abbreviation of the car maker\n\t\"FullName\" TEXT,  -- Full name of the car maker\n\t\"Country\" TEXT,  -- Identifier for the country where the car maker is based\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\nCREATE TABLE \"model_list\" (\n\t\"ModelId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car model\n\t\"Maker\" INTEGER,  -- Identifier for the car maker of the model\n\t\"Model\" TEXT UNIQUE,  -- Name of the car model, must be unique\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n)\nCREATE TABLE \"car_names\" (\n\t\"MakeId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car make\n\t\"Model\" TEXT,  -- Name of the car model\n\t\"Make\" TEXT,  -- Name of the car make\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car data entry\n\t\"MPG\" TEXT,  -- Miles per gallon fuel efficiency of the car\n\t\"Cylinders\" INTEGER,  -- Number of cylinders in the car's engine\n\t\"Edispl\" REAL,  -- Engine displacement in liters\n\t\"Horsepower\" TEXT,  -- Horsepower of the car's engine\n\t\"Weight\" INTEGER,  -- Weight of the car in pounds\n\t\"Accelerate\" REAL,  -- Acceleration time from 0 to 60 mph in seconds\n\t\"Year\" INTEGER,  -- Manufacturing year of the car\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)"
    },
    {
        "question_id": 135,
        "difficulty": null,
        "db_id": "car_1",
        "question": "What is the average horsepower of the cars before 1980?",
        "prediction": null,
        "ground_truth": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/car_1/car_1.sqlite",
        "schema": "CREATE TABLE \"continents\" (\n\t\"ContId\" INTEGER PRIMARY KEY,  -- Unique identifier for each continent\n\t\"Continent\" TEXT  -- Name of the continent\n)\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY,  -- Unique identifier for each country\n\t\"CountryName\" TEXT,  -- Name of the country\n\t\"Continent\" INTEGER,  -- Identifier for the continent the country belongs to\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\nCREATE TABLE \"car_makers\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car maker\n\t\"Maker\" TEXT,  -- Short name or abbreviation of the car maker\n\t\"FullName\" TEXT,  -- Full name of the car maker\n\t\"Country\" TEXT,  -- Identifier for the country where the car maker is based\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\nCREATE TABLE \"model_list\" (\n\t\"ModelId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car model\n\t\"Maker\" INTEGER,  -- Identifier for the car maker of the model\n\t\"Model\" TEXT UNIQUE,  -- Name of the car model, must be unique\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n)\nCREATE TABLE \"car_names\" (\n\t\"MakeId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car make\n\t\"Model\" TEXT,  -- Name of the car model\n\t\"Make\" TEXT,  -- Name of the car make\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car data entry\n\t\"MPG\" TEXT,  -- Miles per gallon fuel efficiency of the car\n\t\"Cylinders\" INTEGER,  -- Number of cylinders in the car's engine\n\t\"Edispl\" REAL,  -- Engine displacement in liters\n\t\"Horsepower\" TEXT,  -- Horsepower of the car's engine\n\t\"Weight\" INTEGER,  -- Weight of the car in pounds\n\t\"Accelerate\" REAL,  -- Acceleration time from 0 to 60 mph in seconds\n\t\"Year\" INTEGER,  -- Manufacturing year of the car\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)"
    },
    {
        "question_id": 111,
        "difficulty": null,
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "prediction": null,
        "ground_truth": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/car_1/car_1.sqlite",
        "schema": "CREATE TABLE \"continents\" (\n\t\"ContId\" INTEGER PRIMARY KEY,  -- Unique identifier for each continent\n\t\"Continent\" TEXT  -- Name of the continent\n)\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY,  -- Unique identifier for each country\n\t\"CountryName\" TEXT,  -- Name of the country\n\t\"Continent\" INTEGER,  -- Identifier for the continent the country belongs to\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\nCREATE TABLE \"car_makers\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car maker\n\t\"Maker\" TEXT,  -- Short name or abbreviation of the car maker\n\t\"FullName\" TEXT,  -- Full name of the car maker\n\t\"Country\" TEXT,  -- Identifier for the country where the car maker is based\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\nCREATE TABLE \"model_list\" (\n\t\"ModelId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car model\n\t\"Maker\" INTEGER,  -- Identifier for the car maker of the model\n\t\"Model\" TEXT UNIQUE,  -- Name of the car model, must be unique\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n)\nCREATE TABLE \"car_names\" (\n\t\"MakeId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car make\n\t\"Model\" TEXT,  -- Name of the car model\n\t\"Make\" TEXT,  -- Name of the car make\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car data entry\n\t\"MPG\" TEXT,  -- Miles per gallon fuel efficiency of the car\n\t\"Cylinders\" INTEGER,  -- Number of cylinders in the car's engine\n\t\"Edispl\" REAL,  -- Engine displacement in liters\n\t\"Horsepower\" TEXT,  -- Horsepower of the car's engine\n\t\"Weight\" INTEGER,  -- Weight of the car in pounds\n\t\"Accelerate\" REAL,  -- Acceleration time from 0 to 60 mph in seconds\n\t\"Year\" INTEGER,  -- Manufacturing year of the car\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)"
    },
    {
        "question_id": 174,
        "difficulty": null,
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "prediction": null,
        "ground_truth": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/car_1/car_1.sqlite",
        "schema": "CREATE TABLE \"continents\" (\n\t\"ContId\" INTEGER PRIMARY KEY,  -- Unique identifier for each continent\n\t\"Continent\" TEXT  -- Name of the continent\n)\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY,  -- Unique identifier for each country\n\t\"CountryName\" TEXT,  -- Name of the country\n\t\"Continent\" INTEGER,  -- Identifier for the continent the country belongs to\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\nCREATE TABLE \"car_makers\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car maker\n\t\"Maker\" TEXT,  -- Short name or abbreviation of the car maker\n\t\"FullName\" TEXT,  -- Full name of the car maker\n\t\"Country\" TEXT,  -- Identifier for the country where the car maker is based\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\nCREATE TABLE \"model_list\" (\n\t\"ModelId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car model\n\t\"Maker\" INTEGER,  -- Identifier for the car maker of the model\n\t\"Model\" TEXT UNIQUE,  -- Name of the car model, must be unique\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n)\nCREATE TABLE \"car_names\" (\n\t\"MakeId\" INTEGER PRIMARY KEY,  -- Unique identifier for each car make\n\t\"Model\" TEXT,  -- Name of the car model\n\t\"Make\" TEXT,  -- Name of the car make\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY,  -- Unique identifier for each car data entry\n\t\"MPG\" TEXT,  -- Miles per gallon fuel efficiency of the car\n\t\"Cylinders\" INTEGER,  -- Number of cylinders in the car's engine\n\t\"Edispl\" REAL,  -- Engine displacement in liters\n\t\"Horsepower\" TEXT,  -- Horsepower of the car's engine\n\t\"Weight\" INTEGER,  -- Weight of the car in pounds\n\t\"Accelerate\" REAL,  -- Acceleration time from 0 to 60 mph in seconds\n\t\"Year\" INTEGER,  -- Manufacturing year of the car\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)"
    },
    {
        "question_id": 196,
        "difficulty": null,
        "db_id": "flight_2",
        "question": "Return the number of airlines in the USA.",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/flight_2/flight_2.sqlite",
        "schema": "CREATE TABLE 'airlines' (\n    \"uid INTEGER PRIMARY KEY\",  -- Unique identifier for each airline\n    \"Airline TEXT\",  -- Name of the airline\n    \"Abbreviation TEXT\",  -- Abbreviated name or code for the airline\n    \"Country TEXT\",  -- Country where the airline is based\n) \nCREATE TABLE 'airports' (\n    \"City TEXT\",  -- City where the airport is located\n    \"AirportCode TEXT PRIMARY KEY\",  -- Unique code identifying the airport\n    \"AirportName TEXT\",  -- Full name of the airport\n    \"Country TEXT\",  -- Country where the airport is located\n    \"CountryAbbrev TEXT\",  -- Abbreviated name or code for the country\n) \nCREATE TABLE 'flights' (\n    \"Airline INTEGER\",  -- Identifier for the airline operating the flight, referencing \"airlines(uid)\"\n    \"FlightNo INTEGER\",  -- Unique number assigned to the flight\n    \"SourceAirport TEXT\",  -- Code of the airport where the flight originates, referencing \"airports(AirportCode)\"\n    \"DestAirport TEXT\",  -- Code of the airport where the flight is destined, referencing \"airports(AirportCode)\"\n    \"PRIMARY KEY(Airline, FlightNo)\",  -- Composite primary key ensuring uniqueness of each flight for an airline\n    \"FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)\",  -- Ensures the source airport exists in the \"airports\" table\n    \"FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\",  -- Ensures the destination airport exists in the \"airports\" table\n)"
    },
    {
        "question_id": 205,
        "difficulty": null,
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/flight_2/flight_2.sqlite",
        "schema": "CREATE TABLE 'airlines' (\n    \"uid INTEGER PRIMARY KEY\",  -- Unique identifier for each airline\n    \"Airline TEXT\",  -- Name of the airline\n    \"Abbreviation TEXT\",  -- Abbreviated name or code for the airline\n    \"Country TEXT\",  -- Country where the airline is based\n) \nCREATE TABLE 'airports' (\n    \"City TEXT\",  -- City where the airport is located\n    \"AirportCode TEXT PRIMARY KEY\",  -- Unique code identifying the airport\n    \"AirportName TEXT\",  -- Full name of the airport\n    \"Country TEXT\",  -- Country where the airport is located\n    \"CountryAbbrev TEXT\",  -- Abbreviated name or code for the country\n) \nCREATE TABLE 'flights' (\n    \"Airline INTEGER\",  -- Identifier for the airline operating the flight, referencing \"airlines(uid)\"\n    \"FlightNo INTEGER\",  -- Unique number assigned to the flight\n    \"SourceAirport TEXT\",  -- Code of the airport where the flight originates, referencing \"airports(AirportCode)\"\n    \"DestAirport TEXT\",  -- Code of the airport where the flight is destined, referencing \"airports(AirportCode)\"\n    \"PRIMARY KEY(Airline, FlightNo)\",  -- Composite primary key ensuring uniqueness of each flight for an airline\n    \"FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)\",  -- Ensures the source airport exists in the \"airports\" table\n    \"FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\",  -- Ensures the destination airport exists in the \"airports\" table\n)"
    },
    {
        "question_id": 210,
        "difficulty": null,
        "db_id": "flight_2",
        "question": "Return the number of flights arriving in Aberdeen.",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/flight_2/flight_2.sqlite",
        "schema": "CREATE TABLE 'airlines' (\n    \"uid INTEGER PRIMARY KEY\",  -- Unique identifier for each airline\n    \"Airline TEXT\",  -- Name of the airline\n    \"Abbreviation TEXT\",  -- Abbreviated name or code for the airline\n    \"Country TEXT\",  -- Country where the airline is based\n) \nCREATE TABLE 'airports' (\n    \"City TEXT\",  -- City where the airport is located\n    \"AirportCode TEXT PRIMARY KEY\",  -- Unique code identifying the airport\n    \"AirportName TEXT\",  -- Full name of the airport\n    \"Country TEXT\",  -- Country where the airport is located\n    \"CountryAbbrev TEXT\",  -- Abbreviated name or code for the country\n) \nCREATE TABLE 'flights' (\n    \"Airline INTEGER\",  -- Identifier for the airline operating the flight, referencing \"airlines(uid)\"\n    \"FlightNo INTEGER\",  -- Unique number assigned to the flight\n    \"SourceAirport TEXT\",  -- Code of the airport where the flight originates, referencing \"airports(AirportCode)\"\n    \"DestAirport TEXT\",  -- Code of the airport where the flight is destined, referencing \"airports(AirportCode)\"\n    \"PRIMARY KEY(Airline, FlightNo)\",  -- Composite primary key ensuring uniqueness of each flight for an airline\n    \"FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)\",  -- Ensures the source airport exists in the \"airports\" table\n    \"FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\",  -- Ensures the destination airport exists in the \"airports\" table\n)"
    },
    {
        "question_id": 207,
        "difficulty": null,
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/flight_2/flight_2.sqlite",
        "schema": "CREATE TABLE 'airlines' (\n    \"uid INTEGER PRIMARY KEY\",  -- Unique identifier for each airline\n    \"Airline TEXT\",  -- Name of the airline\n    \"Abbreviation TEXT\",  -- Abbreviated name or code for the airline\n    \"Country TEXT\",  -- Country where the airline is based\n) \nCREATE TABLE 'airports' (\n    \"City TEXT\",  -- City where the airport is located\n    \"AirportCode TEXT PRIMARY KEY\",  -- Unique code identifying the airport\n    \"AirportName TEXT\",  -- Full name of the airport\n    \"Country TEXT\",  -- Country where the airport is located\n    \"CountryAbbrev TEXT\",  -- Abbreviated name or code for the country\n) \nCREATE TABLE 'flights' (\n    \"Airline INTEGER\",  -- Identifier for the airline operating the flight, referencing \"airlines(uid)\"\n    \"FlightNo INTEGER\",  -- Unique number assigned to the flight\n    \"SourceAirport TEXT\",  -- Code of the airport where the flight originates, referencing \"airports(AirportCode)\"\n    \"DestAirport TEXT\",  -- Code of the airport where the flight is destined, referencing \"airports(AirportCode)\"\n    \"PRIMARY KEY(Airline, FlightNo)\",  -- Composite primary key ensuring uniqueness of each flight for an airline\n    \"FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)\",  -- Ensures the source airport exists in the \"airports\" table\n    \"FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\",  -- Ensures the destination airport exists in the \"airports\" table\n)"
    },
    {
        "question_id": 200,
        "difficulty": null,
        "db_id": "flight_2",
        "question": "Return the name of the airport with code 'AKO'.",
        "prediction": null,
        "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/flight_2/flight_2.sqlite",
        "schema": "CREATE TABLE 'airlines' (\n    \"uid INTEGER PRIMARY KEY\",  -- Unique identifier for each airline\n    \"Airline TEXT\",  -- Name of the airline\n    \"Abbreviation TEXT\",  -- Abbreviated name or code for the airline\n    \"Country TEXT\",  -- Country where the airline is based\n) \nCREATE TABLE 'airports' (\n    \"City TEXT\",  -- City where the airport is located\n    \"AirportCode TEXT PRIMARY KEY\",  -- Unique code identifying the airport\n    \"AirportName TEXT\",  -- Full name of the airport\n    \"Country TEXT\",  -- Country where the airport is located\n    \"CountryAbbrev TEXT\",  -- Abbreviated name or code for the country\n) \nCREATE TABLE 'flights' (\n    \"Airline INTEGER\",  -- Identifier for the airline operating the flight, referencing \"airlines(uid)\"\n    \"FlightNo INTEGER\",  -- Unique number assigned to the flight\n    \"SourceAirport TEXT\",  -- Code of the airport where the flight originates, referencing \"airports(AirportCode)\"\n    \"DestAirport TEXT\",  -- Code of the airport where the flight is destined, referencing \"airports(AirportCode)\"\n    \"PRIMARY KEY(Airline, FlightNo)\",  -- Composite primary key ensuring uniqueness of each flight for an airline\n    \"FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)\",  -- Ensures the source airport exists in the \"airports\" table\n    \"FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\",  -- Ensures the destination airport exists in the \"airports\" table\n)"
    },
    {
        "question_id": 294,
        "difficulty": null,
        "db_id": "employee_hire_evaluation",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "prediction": null,
        "ground_truth": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "schema": "CREATE TABLE \"employee\" (\n    \"Employee_ID\" int,  -- Unique identifier for the employee\n    \"Name\" text,  -- Full name of the employee\n    \"Age\" int,  -- Age of the employee\n    \"City\" text,  -- City where the employee resides\nPRIMARY KEY (\"Employee_ID\")\n) \nCREATE TABLE \"shop\" (\n    \"Shop_ID\" int,  -- Unique identifier for the shop\n    \"Name\" text,  -- Name of the shop\n    \"Location\" text,  -- Physical location or address of the shop\n    \"District\" text,  -- District where the shop is located\n    \"Number_products\" int,  -- Total number of products available in the shop\n    \"Manager_name\" text,  -- Name of the shop manager\n    PRIMARY KEY (\"Shop_ID\")\n) \nCREATE TABLE \"hiring\" (\n    \"Shop_ID\" int,  -- Identifier for the shop where the employee is hired\n    \"Employee_ID\" int,  -- Identifier for the hired employee\n    \"Start_from\" text,  -- Date when the employee started working at the shop\n    \"Is_full_time\" bool,  -- Indicates whether the employee is working full-time (true) or part-time (false)\n    PRIMARY KEY (\"Employee_ID\"),\n    FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n) \nCREATE TABLE \"evaluation\" (\n    \"Employee_ID\" text,  -- Identifier for the evaluated employee\n    \"Year_awarded\" text,  -- Year when the evaluation or bonus was awarded\n    \"Bonus\" real,  -- Bonus amount awarded to the employee\n    PRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)"
    },
    {
        "question_id": 262,
        "difficulty": null,
        "db_id": "employee_hire_evaluation",
        "question": "List the names of employees and sort in ascending order of age.",
        "prediction": null,
        "ground_truth": "SELECT name FROM employee ORDER BY age",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "schema": "CREATE TABLE \"employee\" (\n    \"Employee_ID\" int,  -- Unique identifier for the employee\n    \"Name\" text,  -- Full name of the employee\n    \"Age\" int,  -- Age of the employee\n    \"City\" text,  -- City where the employee resides\nPRIMARY KEY (\"Employee_ID\")\n) \nCREATE TABLE \"shop\" (\n    \"Shop_ID\" int,  -- Unique identifier for the shop\n    \"Name\" text,  -- Name of the shop\n    \"Location\" text,  -- Physical location or address of the shop\n    \"District\" text,  -- District where the shop is located\n    \"Number_products\" int,  -- Total number of products available in the shop\n    \"Manager_name\" text,  -- Name of the shop manager\n    PRIMARY KEY (\"Shop_ID\")\n) \nCREATE TABLE \"hiring\" (\n    \"Shop_ID\" int,  -- Identifier for the shop where the employee is hired\n    \"Employee_ID\" int,  -- Identifier for the hired employee\n    \"Start_from\" text,  -- Date when the employee started working at the shop\n    \"Is_full_time\" bool,  -- Indicates whether the employee is working full-time (true) or part-time (false)\n    PRIMARY KEY (\"Employee_ID\"),\n    FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n) \nCREATE TABLE \"evaluation\" (\n    \"Employee_ID\" text,  -- Identifier for the evaluated employee\n    \"Year_awarded\" text,  -- Year when the evaluation or bonus was awarded\n    \"Bonus\" real,  -- Bonus amount awarded to the employee\n    PRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)"
    },
    {
        "question_id": 279,
        "difficulty": null,
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "prediction": null,
        "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "schema": "CREATE TABLE \"employee\" (\n    \"Employee_ID\" int,  -- Unique identifier for the employee\n    \"Name\" text,  -- Full name of the employee\n    \"Age\" int,  -- Age of the employee\n    \"City\" text,  -- City where the employee resides\nPRIMARY KEY (\"Employee_ID\")\n) \nCREATE TABLE \"shop\" (\n    \"Shop_ID\" int,  -- Unique identifier for the shop\n    \"Name\" text,  -- Name of the shop\n    \"Location\" text,  -- Physical location or address of the shop\n    \"District\" text,  -- District where the shop is located\n    \"Number_products\" int,  -- Total number of products available in the shop\n    \"Manager_name\" text,  -- Name of the shop manager\n    PRIMARY KEY (\"Shop_ID\")\n) \nCREATE TABLE \"hiring\" (\n    \"Shop_ID\" int,  -- Identifier for the shop where the employee is hired\n    \"Employee_ID\" int,  -- Identifier for the hired employee\n    \"Start_from\" text,  -- Date when the employee started working at the shop\n    \"Is_full_time\" bool,  -- Indicates whether the employee is working full-time (true) or part-time (false)\n    PRIMARY KEY (\"Employee_ID\"),\n    FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n) \nCREATE TABLE \"evaluation\" (\n    \"Employee_ID\" text,  -- Identifier for the evaluated employee\n    \"Year_awarded\" text,  -- Year when the evaluation or bonus was awarded\n    \"Bonus\" real,  -- Bonus amount awarded to the employee\n    PRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)"
    },
    {
        "question_id": 287,
        "difficulty": null,
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "prediction": null,
        "ground_truth": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "schema": "CREATE TABLE \"employee\" (\n    \"Employee_ID\" int,  -- Unique identifier for the employee\n    \"Name\" text,  -- Full name of the employee\n    \"Age\" int,  -- Age of the employee\n    \"City\" text,  -- City where the employee resides\nPRIMARY KEY (\"Employee_ID\")\n) \nCREATE TABLE \"shop\" (\n    \"Shop_ID\" int,  -- Unique identifier for the shop\n    \"Name\" text,  -- Name of the shop\n    \"Location\" text,  -- Physical location or address of the shop\n    \"District\" text,  -- District where the shop is located\n    \"Number_products\" int,  -- Total number of products available in the shop\n    \"Manager_name\" text,  -- Name of the shop manager\n    PRIMARY KEY (\"Shop_ID\")\n) \nCREATE TABLE \"hiring\" (\n    \"Shop_ID\" int,  -- Identifier for the shop where the employee is hired\n    \"Employee_ID\" int,  -- Identifier for the hired employee\n    \"Start_from\" text,  -- Date when the employee started working at the shop\n    \"Is_full_time\" bool,  -- Indicates whether the employee is working full-time (true) or part-time (false)\n    PRIMARY KEY (\"Employee_ID\"),\n    FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n) \nCREATE TABLE \"evaluation\" (\n    \"Employee_ID\" text,  -- Identifier for the evaluated employee\n    \"Year_awarded\" text,  -- Year when the evaluation or bonus was awarded\n    \"Bonus\" real,  -- Bonus amount awarded to the employee\n    PRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)"
    },
    {
        "question_id": 284,
        "difficulty": null,
        "db_id": "employee_hire_evaluation",
        "question": "Which shop has the most employees? Give me the shop name.",
        "prediction": null,
        "ground_truth": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "schema": "CREATE TABLE \"employee\" (\n    \"Employee_ID\" int,  -- Unique identifier for the employee\n    \"Name\" text,  -- Full name of the employee\n    \"Age\" int,  -- Age of the employee\n    \"City\" text,  -- City where the employee resides\nPRIMARY KEY (\"Employee_ID\")\n) \nCREATE TABLE \"shop\" (\n    \"Shop_ID\" int,  -- Unique identifier for the shop\n    \"Name\" text,  -- Name of the shop\n    \"Location\" text,  -- Physical location or address of the shop\n    \"District\" text,  -- District where the shop is located\n    \"Number_products\" int,  -- Total number of products available in the shop\n    \"Manager_name\" text,  -- Name of the shop manager\n    PRIMARY KEY (\"Shop_ID\")\n) \nCREATE TABLE \"hiring\" (\n    \"Shop_ID\" int,  -- Identifier for the shop where the employee is hired\n    \"Employee_ID\" int,  -- Identifier for the hired employee\n    \"Start_from\" text,  -- Date when the employee started working at the shop\n    \"Is_full_time\" bool,  -- Indicates whether the employee is working full-time (true) or part-time (false)\n    PRIMARY KEY (\"Employee_ID\"),\n    FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n) \nCREATE TABLE \"evaluation\" (\n    \"Employee_ID\" text,  -- Identifier for the evaluated employee\n    \"Year_awarded\" text,  -- Year when the evaluation or bonus was awarded\n    \"Bonus\" real,  -- Bonus amount awarded to the employee\n    PRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\n    FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)"
    },
    {
        "question_id": 311,
        "difficulty": null,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the id and type code for the template used by the most documents?",
        "prediction": null,
        "ground_truth": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "schema": "CREATE TABLE Ref_Template_Types (\n    Template_Type_Code CHAR(15) NOT NULL,  -- Unique code identifying the type of template\n    Template_Type_Description VARCHAR(255) NOT NULL,  -- Description of the template type\n    PRIMARY KEY (Template_Type_Code)\n)\nCREATE TABLE Templates (\n    Template_ID INTEGER NOT NULL,  -- Unique identifier for the template\n    Version_Number INTEGER NOT NULL,  -- Version number of the template\n    Template_Type_Code CHAR(15) NOT NULL,  -- Code linking to the type of template\n    Date_Effective_From DATETIME,  -- Start date from which the template is effective\n    Date_Effective_To DATETIME,  -- End date until which the template is effective\n    Template_Details VARCHAR(255) NOT NULL,  -- Detailed information about the template\n    PRIMARY KEY (Template_ID),\n    FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\nCREATE TABLE Documents (\n    Document_ID INTEGER NOT NULL,  -- Unique identifier for the document\n    Template_ID INTEGER,  -- Identifier linking the document to a template\n    Document_Name VARCHAR(255),  -- Name of the document\n    Document_Description VARCHAR(255),  -- Description of the document\n    Other_Details VARCHAR(255),  -- Additional details about the document\n    PRIMARY KEY (Document_ID),\n    FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\nCREATE TABLE Paragraphs (\n    Paragraph_ID INTEGER NOT NULL,  -- Unique identifier for the paragraph\n    Document_ID INTEGER NOT NULL,  -- Identifier linking the paragraph to a document\n    Paragraph_Text VARCHAR(255),  -- Text content of the paragraph\n    Other_Details VARCHAR(255),  -- Additional details about the paragraph\n    PRIMARY KEY (Paragraph_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)"
    },
    {
        "question_id": 365,
        "difficulty": null,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "prediction": null,
        "ground_truth": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "schema": "CREATE TABLE Ref_Template_Types (\n    Template_Type_Code CHAR(15) NOT NULL,  -- Unique code identifying the type of template\n    Template_Type_Description VARCHAR(255) NOT NULL,  -- Description of the template type\n    PRIMARY KEY (Template_Type_Code)\n)\nCREATE TABLE Templates (\n    Template_ID INTEGER NOT NULL,  -- Unique identifier for the template\n    Version_Number INTEGER NOT NULL,  -- Version number of the template\n    Template_Type_Code CHAR(15) NOT NULL,  -- Code linking to the type of template\n    Date_Effective_From DATETIME,  -- Start date from which the template is effective\n    Date_Effective_To DATETIME,  -- End date until which the template is effective\n    Template_Details VARCHAR(255) NOT NULL,  -- Detailed information about the template\n    PRIMARY KEY (Template_ID),\n    FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\nCREATE TABLE Documents (\n    Document_ID INTEGER NOT NULL,  -- Unique identifier for the document\n    Template_ID INTEGER,  -- Identifier linking the document to a template\n    Document_Name VARCHAR(255),  -- Name of the document\n    Document_Description VARCHAR(255),  -- Description of the document\n    Other_Details VARCHAR(255),  -- Additional details about the document\n    PRIMARY KEY (Document_ID),\n    FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\nCREATE TABLE Paragraphs (\n    Paragraph_ID INTEGER NOT NULL,  -- Unique identifier for the paragraph\n    Document_ID INTEGER NOT NULL,  -- Identifier linking the paragraph to a document\n    Paragraph_Text VARCHAR(255),  -- Text content of the paragraph\n    Other_Details VARCHAR(255),  -- Additional details about the paragraph\n    PRIMARY KEY (Paragraph_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)"
    },
    {
        "question_id": 360,
        "difficulty": null,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "schema": "CREATE TABLE Ref_Template_Types (\n    Template_Type_Code CHAR(15) NOT NULL,  -- Unique code identifying the type of template\n    Template_Type_Description VARCHAR(255) NOT NULL,  -- Description of the template type\n    PRIMARY KEY (Template_Type_Code)\n)\nCREATE TABLE Templates (\n    Template_ID INTEGER NOT NULL,  -- Unique identifier for the template\n    Version_Number INTEGER NOT NULL,  -- Version number of the template\n    Template_Type_Code CHAR(15) NOT NULL,  -- Code linking to the type of template\n    Date_Effective_From DATETIME,  -- Start date from which the template is effective\n    Date_Effective_To DATETIME,  -- End date until which the template is effective\n    Template_Details VARCHAR(255) NOT NULL,  -- Detailed information about the template\n    PRIMARY KEY (Template_ID),\n    FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\nCREATE TABLE Documents (\n    Document_ID INTEGER NOT NULL,  -- Unique identifier for the document\n    Template_ID INTEGER,  -- Identifier linking the document to a template\n    Document_Name VARCHAR(255),  -- Name of the document\n    Document_Description VARCHAR(255),  -- Description of the document\n    Other_Details VARCHAR(255),  -- Additional details about the document\n    PRIMARY KEY (Document_ID),\n    FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\nCREATE TABLE Paragraphs (\n    Paragraph_ID INTEGER NOT NULL,  -- Unique identifier for the paragraph\n    Document_ID INTEGER NOT NULL,  -- Identifier linking the paragraph to a document\n    Paragraph_Text VARCHAR(255),  -- Text content of the paragraph\n    Other_Details VARCHAR(255),  -- Additional details about the paragraph\n    PRIMARY KEY (Paragraph_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)"
    },
    {
        "question_id": 341,
        "difficulty": null,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type.",
        "prediction": null,
        "ground_truth": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "schema": "CREATE TABLE Ref_Template_Types (\n    Template_Type_Code CHAR(15) NOT NULL,  -- Unique code identifying the type of template\n    Template_Type_Description VARCHAR(255) NOT NULL,  -- Description of the template type\n    PRIMARY KEY (Template_Type_Code)\n)\nCREATE TABLE Templates (\n    Template_ID INTEGER NOT NULL,  -- Unique identifier for the template\n    Version_Number INTEGER NOT NULL,  -- Version number of the template\n    Template_Type_Code CHAR(15) NOT NULL,  -- Code linking to the type of template\n    Date_Effective_From DATETIME,  -- Start date from which the template is effective\n    Date_Effective_To DATETIME,  -- End date until which the template is effective\n    Template_Details VARCHAR(255) NOT NULL,  -- Detailed information about the template\n    PRIMARY KEY (Template_ID),\n    FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\nCREATE TABLE Documents (\n    Document_ID INTEGER NOT NULL,  -- Unique identifier for the document\n    Template_ID INTEGER,  -- Identifier linking the document to a template\n    Document_Name VARCHAR(255),  -- Name of the document\n    Document_Description VARCHAR(255),  -- Description of the document\n    Other_Details VARCHAR(255),  -- Additional details about the document\n    PRIMARY KEY (Document_ID),\n    FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\nCREATE TABLE Paragraphs (\n    Paragraph_ID INTEGER NOT NULL,  -- Unique identifier for the paragraph\n    Document_ID INTEGER NOT NULL,  -- Identifier linking the paragraph to a document\n    Paragraph_Text VARCHAR(255),  -- Text content of the paragraph\n    Other_Details VARCHAR(255),  -- Additional details about the paragraph\n    PRIMARY KEY (Paragraph_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)"
    },
    {
        "question_id": 376,
        "difficulty": null,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "prediction": null,
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "schema": "CREATE TABLE Ref_Template_Types (\n    Template_Type_Code CHAR(15) NOT NULL,  -- Unique code identifying the type of template\n    Template_Type_Description VARCHAR(255) NOT NULL,  -- Description of the template type\n    PRIMARY KEY (Template_Type_Code)\n)\nCREATE TABLE Templates (\n    Template_ID INTEGER NOT NULL,  -- Unique identifier for the template\n    Version_Number INTEGER NOT NULL,  -- Version number of the template\n    Template_Type_Code CHAR(15) NOT NULL,  -- Code linking to the type of template\n    Date_Effective_From DATETIME,  -- Start date from which the template is effective\n    Date_Effective_To DATETIME,  -- End date until which the template is effective\n    Template_Details VARCHAR(255) NOT NULL,  -- Detailed information about the template\n    PRIMARY KEY (Template_ID),\n    FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\nCREATE TABLE Documents (\n    Document_ID INTEGER NOT NULL,  -- Unique identifier for the document\n    Template_ID INTEGER,  -- Identifier linking the document to a template\n    Document_Name VARCHAR(255),  -- Name of the document\n    Document_Description VARCHAR(255),  -- Description of the document\n    Other_Details VARCHAR(255),  -- Additional details about the document\n    PRIMARY KEY (Document_ID),\n    FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\nCREATE TABLE Paragraphs (\n    Paragraph_ID INTEGER NOT NULL,  -- Unique identifier for the paragraph\n    Document_ID INTEGER NOT NULL,  -- Identifier linking the paragraph to a document\n    Paragraph_Text VARCHAR(255),  -- Text content of the paragraph\n    Other_Details VARCHAR(255),  -- Additional details about the paragraph\n    PRIMARY KEY (Paragraph_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)"
    },
    {
        "question_id": 392,
        "difficulty": null,
        "db_id": "course_teach",
        "question": "Where is the youngest teacher from?",
        "prediction": null,
        "ground_truth": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/course_teach/course_teach.sqlite",
        "schema": "CREATE TABLE \"course\" (\n    \"Course_ID\" int,  -- Unique identifier for the course\n    \"Staring_Date\" text,  -- Start date of the course\n    \"Course\" text,  -- Name or title of the course\n    PRIMARY KEY (\"Course_ID\")\n) \nCREATE TABLE \"teacher\" (\n    \"Teacher_ID\" int,  -- Unique identifier for the teacher\n    \"Name\" text,  -- Full name of the teacher\n    \"Age\" text,  -- Age of the teacher\n    \"Hometown\" text,  -- Hometown or place of origin of the teacher\n    PRIMARY KEY (\"Teacher_ID\")\n) \nCREATE TABLE \"course_arrange\" (\n    \"Course_ID\" int,  -- Identifier for the course, linked to the `course` table\n    \"Teacher_ID\" int,  -- Identifier for the teacher, linked to the `teacher` table\n    \"Grade\" int,  -- Grade or level associated with the course arrangement\n    PRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\n    FOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\n    FOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)"
    },
    {
        "question_id": 389,
        "difficulty": null,
        "db_id": "course_teach",
        "question": "Show the name of teachers aged either 32 or 33?",
        "prediction": null,
        "ground_truth": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/course_teach/course_teach.sqlite",
        "schema": "CREATE TABLE \"course\" (\n    \"Course_ID\" int,  -- Unique identifier for the course\n    \"Staring_Date\" text,  -- Start date of the course\n    \"Course\" text,  -- Name or title of the course\n    PRIMARY KEY (\"Course_ID\")\n) \nCREATE TABLE \"teacher\" (\n    \"Teacher_ID\" int,  -- Unique identifier for the teacher\n    \"Name\" text,  -- Full name of the teacher\n    \"Age\" text,  -- Age of the teacher\n    \"Hometown\" text,  -- Hometown or place of origin of the teacher\n    PRIMARY KEY (\"Teacher_ID\")\n) \nCREATE TABLE \"course_arrange\" (\n    \"Course_ID\" int,  -- Identifier for the course, linked to the `course` table\n    \"Teacher_ID\" int,  -- Identifier for the teacher, linked to the `teacher` table\n    \"Grade\" int,  -- Grade or level associated with the course arrangement\n    PRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\n    FOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\n    FOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)"
    },
    {
        "question_id": 398,
        "difficulty": null,
        "db_id": "course_teach",
        "question": "What are the towns from which at least two teachers come from?",
        "prediction": null,
        "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/course_teach/course_teach.sqlite",
        "schema": "CREATE TABLE \"course\" (\n    \"Course_ID\" int,  -- Unique identifier for the course\n    \"Staring_Date\" text,  -- Start date of the course\n    \"Course\" text,  -- Name or title of the course\n    PRIMARY KEY (\"Course_ID\")\n) \nCREATE TABLE \"teacher\" (\n    \"Teacher_ID\" int,  -- Unique identifier for the teacher\n    \"Name\" text,  -- Full name of the teacher\n    \"Age\" text,  -- Age of the teacher\n    \"Hometown\" text,  -- Hometown or place of origin of the teacher\n    PRIMARY KEY (\"Teacher_ID\")\n) \nCREATE TABLE \"course_arrange\" (\n    \"Course_ID\" int,  -- Identifier for the course, linked to the `course` table\n    \"Teacher_ID\" int,  -- Identifier for the teacher, linked to the `teacher` table\n    \"Grade\" int,  -- Grade or level associated with the course arrangement\n    PRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\n    FOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\n    FOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)"
    },
    {
        "question_id": 393,
        "difficulty": null,
        "db_id": "course_teach",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "prediction": null,
        "ground_truth": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/course_teach/course_teach.sqlite",
        "schema": "CREATE TABLE \"course\" (\n    \"Course_ID\" int,  -- Unique identifier for the course\n    \"Staring_Date\" text,  -- Start date of the course\n    \"Course\" text,  -- Name or title of the course\n    PRIMARY KEY (\"Course_ID\")\n) \nCREATE TABLE \"teacher\" (\n    \"Teacher_ID\" int,  -- Unique identifier for the teacher\n    \"Name\" text,  -- Full name of the teacher\n    \"Age\" text,  -- Age of the teacher\n    \"Hometown\" text,  -- Hometown or place of origin of the teacher\n    PRIMARY KEY (\"Teacher_ID\")\n) \nCREATE TABLE \"course_arrange\" (\n    \"Course_ID\" int,  -- Identifier for the course, linked to the `course` table\n    \"Teacher_ID\" int,  -- Identifier for the teacher, linked to the `teacher` table\n    \"Grade\" int,  -- Grade or level associated with the course arrangement\n    PRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\n    FOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\n    FOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)"
    },
    {
        "question_id": 386,
        "difficulty": null,
        "db_id": "course_teach",
        "question": "What is the age and hometown of every teacher?",
        "prediction": null,
        "ground_truth": "SELECT Age ,  Hometown FROM teacher",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/course_teach/course_teach.sqlite",
        "schema": "CREATE TABLE \"course\" (\n    \"Course_ID\" int,  -- Unique identifier for the course\n    \"Staring_Date\" text,  -- Start date of the course\n    \"Course\" text,  -- Name or title of the course\n    PRIMARY KEY (\"Course_ID\")\n) \nCREATE TABLE \"teacher\" (\n    \"Teacher_ID\" int,  -- Unique identifier for the teacher\n    \"Name\" text,  -- Full name of the teacher\n    \"Age\" text,  -- Age of the teacher\n    \"Hometown\" text,  -- Hometown or place of origin of the teacher\n    PRIMARY KEY (\"Teacher_ID\")\n) \nCREATE TABLE \"course_arrange\" (\n    \"Course_ID\" int,  -- Identifier for the course, linked to the `course` table\n    \"Teacher_ID\" int,  -- Identifier for the teacher, linked to the `teacher` table\n    \"Grade\" int,  -- Grade or level associated with the course arrangement\n    PRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\n    FOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\n    FOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)"
    },
    {
        "question_id": 416,
        "difficulty": null,
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "prediction": null,
        "ground_truth": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/museum_visit/museum_visit.sqlite",
        "schema": "CREATE TABLE \"museum\" (\n    \"Museum_ID\" int,  -- Unique identifier for the museum\n    \"Name\" text,  -- Name of the museum\n    \"Num_of_Staff\" int,  -- Number of staff members working at the museum\n    \"Open_Year\" text,  -- Year the museum was opened\n    PRIMARY KEY (\"Museum_ID\")\n) \nCREATE TABLE \"visitor\" (\n    \"ID\" int,  -- Unique identifier for the visitor\n    \"Name\" text,  -- Name of the visitor\n    \"Level_of_membership\" int,  -- Membership level of the visitor\n    \"Age\" int,  -- Age of the visitor\n    PRIMARY KEY (\"ID\")\n) \nCREATE TABLE \"visit\" (\n    \"Museum_ID\" int,  -- Identifier for the museum being visited\n    \"visitor_ID\" text,  -- Identifier for the visitor\n    \"Num_of_Ticket\" int,  -- Number of tickets purchased by the visitor\n    \"Total_spent\" real,  -- Total amount spent by the visitor during the visit\n    PRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\n    FOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\n    FOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)"
    },
    {
        "question_id": 415,
        "difficulty": null,
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?",
        "prediction": null,
        "ground_truth": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/museum_visit/museum_visit.sqlite",
        "schema": "CREATE TABLE \"museum\" (\n    \"Museum_ID\" int,  -- Unique identifier for the museum\n    \"Name\" text,  -- Name of the museum\n    \"Num_of_Staff\" int,  -- Number of staff members working at the museum\n    \"Open_Year\" text,  -- Year the museum was opened\n    PRIMARY KEY (\"Museum_ID\")\n) \nCREATE TABLE \"visitor\" (\n    \"ID\" int,  -- Unique identifier for the visitor\n    \"Name\" text,  -- Name of the visitor\n    \"Level_of_membership\" int,  -- Membership level of the visitor\n    \"Age\" int,  -- Age of the visitor\n    PRIMARY KEY (\"ID\")\n) \nCREATE TABLE \"visit\" (\n    \"Museum_ID\" int,  -- Identifier for the museum being visited\n    \"visitor_ID\" text,  -- Identifier for the visitor\n    \"Num_of_Ticket\" int,  -- Number of tickets purchased by the visitor\n    \"Total_spent\" real,  -- Total amount spent by the visitor during the visit\n    PRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\n    FOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\n    FOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)"
    },
    {
        "question_id": 413,
        "difficulty": null,
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "prediction": null,
        "ground_truth": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/museum_visit/museum_visit.sqlite",
        "schema": "CREATE TABLE \"museum\" (\n    \"Museum_ID\" int,  -- Unique identifier for the museum\n    \"Name\" text,  -- Name of the museum\n    \"Num_of_Staff\" int,  -- Number of staff members working at the museum\n    \"Open_Year\" text,  -- Year the museum was opened\n    PRIMARY KEY (\"Museum_ID\")\n) \nCREATE TABLE \"visitor\" (\n    \"ID\" int,  -- Unique identifier for the visitor\n    \"Name\" text,  -- Name of the visitor\n    \"Level_of_membership\" int,  -- Membership level of the visitor\n    \"Age\" int,  -- Age of the visitor\n    PRIMARY KEY (\"ID\")\n) \nCREATE TABLE \"visit\" (\n    \"Museum_ID\" int,  -- Identifier for the museum being visited\n    \"visitor_ID\" text,  -- Identifier for the visitor\n    \"Num_of_Ticket\" int,  -- Number of tickets purchased by the visitor\n    \"Total_spent\" real,  -- Total amount spent by the visitor during the visit\n    PRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\n    FOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\n    FOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)"
    },
    {
        "question_id": 428,
        "difficulty": null,
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/museum_visit/museum_visit.sqlite",
        "schema": "CREATE TABLE \"museum\" (\n    \"Museum_ID\" int,  -- Unique identifier for the museum\n    \"Name\" text,  -- Name of the museum\n    \"Num_of_Staff\" int,  -- Number of staff members working at the museum\n    \"Open_Year\" text,  -- Year the museum was opened\n    PRIMARY KEY (\"Museum_ID\")\n) \nCREATE TABLE \"visitor\" (\n    \"ID\" int,  -- Unique identifier for the visitor\n    \"Name\" text,  -- Name of the visitor\n    \"Level_of_membership\" int,  -- Membership level of the visitor\n    \"Age\" int,  -- Age of the visitor\n    PRIMARY KEY (\"ID\")\n) \nCREATE TABLE \"visit\" (\n    \"Museum_ID\" int,  -- Identifier for the museum being visited\n    \"visitor_ID\" text,  -- Identifier for the visitor\n    \"Num_of_Ticket\" int,  -- Number of tickets purchased by the visitor\n    \"Total_spent\" real,  -- Total amount spent by the visitor during the visit\n    PRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\n    FOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\n    FOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)"
    },
    {
        "question_id": 424,
        "difficulty": null,
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "prediction": null,
        "ground_truth": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/museum_visit/museum_visit.sqlite",
        "schema": "CREATE TABLE \"museum\" (\n    \"Museum_ID\" int,  -- Unique identifier for the museum\n    \"Name\" text,  -- Name of the museum\n    \"Num_of_Staff\" int,  -- Number of staff members working at the museum\n    \"Open_Year\" text,  -- Year the museum was opened\n    PRIMARY KEY (\"Museum_ID\")\n) \nCREATE TABLE \"visitor\" (\n    \"ID\" int,  -- Unique identifier for the visitor\n    \"Name\" text,  -- Name of the visitor\n    \"Level_of_membership\" int,  -- Membership level of the visitor\n    \"Age\" int,  -- Age of the visitor\n    PRIMARY KEY (\"ID\")\n) \nCREATE TABLE \"visit\" (\n    \"Museum_ID\" int,  -- Identifier for the museum being visited\n    \"visitor_ID\" text,  -- Identifier for the visitor\n    \"Num_of_Ticket\" int,  -- Number of tickets purchased by the visitor\n    \"Total_spent\" real,  -- Total amount spent by the visitor during the visit\n    PRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\n    FOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\n    FOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)"
    },
    {
        "question_id": 446,
        "difficulty": null,
        "db_id": "wta_1",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "prediction": null,
        "ground_truth": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/wta_1/wta_1.sqlite",
        "schema": " CREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,  -- Unique identifier for each player\n    \"first_name\" TEXT,  -- First name of the player\n    \"last_name\" TEXT,  -- Last name of the player\n    \"hand\" TEXT,  -- Dominant playing hand of the player (e.g., left or right)\n    \"birth_date\" DATE,  -- Birth date of the player\n    \"country_code\" TEXT,  -- Country code representing the player's nationality\n) \nCREATE TABLE matches(\n    \"best_of\" INT,  -- Maximum number of sets in the match\n    \"draw_size\" INT,  -- Number of players in the tournament draw\n    \"loser_age\" FLOAT,  -- Age of the player who lost the match\n    \"loser_entry\" TEXT,  -- Method of entry for the losing player (e.g., wildcard, qualifier)\n    \"loser_hand\" TEXT,  -- Dominant playing hand of the losing player\n    \"loser_ht\" INT,  -- Height of the losing player in centimeters\n    \"loser_id\" INT,  -- Unique identifier for the losing player\n    \"loser_ioc\" TEXT,  -- International Olympic Committee country code for the losing player\n    \"loser_name\" TEXT,  -- Full name of the losing player\n    \"loser_rank\" INT,  -- World ranking of the losing player at the time of the match\n    \"loser_rank_points\" INT,  -- Ranking points of the losing player at the time of the match\n    \"loser_seed\" INT,  -- Seed number of the losing player in the tournament\n    \"match_num\" INT,  -- Unique identifier for the match within the tournament\n    \"minutes\" INT,  -- Duration of the match in minutes\n    \"round\" TEXT,  -- Round of the tournament in which the match was played\n    \"score\" TEXT,  -- Final score of the match\n    \"surface\" TEXT,  -- Type of court surface the match was played on (e.g., clay, grass, hard)\n    \"tourney_date\" DATE,  -- Start date of the tournament\n    \"tourney_id\" TEXT,  -- Unique identifier for the tournament\n    \"tourney_level\" TEXT,  -- Level of the tournament (e.g., Grand Slam, ATP 1000)\n    \"tourney_name\" TEXT,  -- Name of the tournament\n    \"winner_age\" FLOAT,  -- Age of the player who won the match\n    \"winner_entry\" TEXT,  -- Method of entry for the winning player (e.g., wildcard, qualifier)\n    \"winner_hand\" TEXT,  -- Dominant playing hand of the winning player\n    \"winner_ht\" INT,  -- Height of the winning player in centimeters\n    \"winner_id\" INT,  -- Unique identifier for the winning player\n    \"winner_ioc\" TEXT,  -- International Olympic Committee country code for the winning player\n    \"winner_name\" TEXT,  -- Full name of the winning player\n    \"winner_rank\" INT,  -- World ranking of the winning player at the time of the match\n    \"winner_rank_points\" INT,  -- Ranking points of the winning player at the time of the match\n    \"winner_seed\" INT,  -- Seed number of the winning player in the tournament\n    \"year\" INT,  -- Year the match took place\n    FOREIGN KEY(loser_id) REFERENCES players(player_id),\n    FOREIGN KEY(winner_id) REFERENCES players(player_id)\n) CREATE TABLE rankings(\n    \"ranking_date\" DATE,  -- Date when the ranking was recorded\n    \"ranking\" INT,  -- World ranking of the player on the given date\n    \"player_id\" INT,  -- Unique identifier for the player\n    \"ranking_points\" INT,  -- Total ranking points of the player on the given date\n    \"tours\" INT,  -- Number of tours or tournaments the player participated in\n    FOREIGN KEY(player_id) REFERENCES players(player_id)\n)"
    },
    {
        "question_id": 431,
        "difficulty": null,
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM matches",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/wta_1/wta_1.sqlite",
        "schema": " CREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,  -- Unique identifier for each player\n    \"first_name\" TEXT,  -- First name of the player\n    \"last_name\" TEXT,  -- Last name of the player\n    \"hand\" TEXT,  -- Dominant playing hand of the player (e.g., left or right)\n    \"birth_date\" DATE,  -- Birth date of the player\n    \"country_code\" TEXT,  -- Country code representing the player's nationality\n) \nCREATE TABLE matches(\n    \"best_of\" INT,  -- Maximum number of sets in the match\n    \"draw_size\" INT,  -- Number of players in the tournament draw\n    \"loser_age\" FLOAT,  -- Age of the player who lost the match\n    \"loser_entry\" TEXT,  -- Method of entry for the losing player (e.g., wildcard, qualifier)\n    \"loser_hand\" TEXT,  -- Dominant playing hand of the losing player\n    \"loser_ht\" INT,  -- Height of the losing player in centimeters\n    \"loser_id\" INT,  -- Unique identifier for the losing player\n    \"loser_ioc\" TEXT,  -- International Olympic Committee country code for the losing player\n    \"loser_name\" TEXT,  -- Full name of the losing player\n    \"loser_rank\" INT,  -- World ranking of the losing player at the time of the match\n    \"loser_rank_points\" INT,  -- Ranking points of the losing player at the time of the match\n    \"loser_seed\" INT,  -- Seed number of the losing player in the tournament\n    \"match_num\" INT,  -- Unique identifier for the match within the tournament\n    \"minutes\" INT,  -- Duration of the match in minutes\n    \"round\" TEXT,  -- Round of the tournament in which the match was played\n    \"score\" TEXT,  -- Final score of the match\n    \"surface\" TEXT,  -- Type of court surface the match was played on (e.g., clay, grass, hard)\n    \"tourney_date\" DATE,  -- Start date of the tournament\n    \"tourney_id\" TEXT,  -- Unique identifier for the tournament\n    \"tourney_level\" TEXT,  -- Level of the tournament (e.g., Grand Slam, ATP 1000)\n    \"tourney_name\" TEXT,  -- Name of the tournament\n    \"winner_age\" FLOAT,  -- Age of the player who won the match\n    \"winner_entry\" TEXT,  -- Method of entry for the winning player (e.g., wildcard, qualifier)\n    \"winner_hand\" TEXT,  -- Dominant playing hand of the winning player\n    \"winner_ht\" INT,  -- Height of the winning player in centimeters\n    \"winner_id\" INT,  -- Unique identifier for the winning player\n    \"winner_ioc\" TEXT,  -- International Olympic Committee country code for the winning player\n    \"winner_name\" TEXT,  -- Full name of the winning player\n    \"winner_rank\" INT,  -- World ranking of the winning player at the time of the match\n    \"winner_rank_points\" INT,  -- Ranking points of the winning player at the time of the match\n    \"winner_seed\" INT,  -- Seed number of the winning player in the tournament\n    \"year\" INT,  -- Year the match took place\n    FOREIGN KEY(loser_id) REFERENCES players(player_id),\n    FOREIGN KEY(winner_id) REFERENCES players(player_id)\n) CREATE TABLE rankings(\n    \"ranking_date\" DATE,  -- Date when the ranking was recorded\n    \"ranking\" INT,  -- World ranking of the player on the given date\n    \"player_id\" INT,  -- Unique identifier for the player\n    \"ranking_points\" INT,  -- Total ranking points of the player on the given date\n    \"tours\" INT,  -- Number of tours or tournaments the player participated in\n    FOREIGN KEY(player_id) REFERENCES players(player_id)\n)"
    },
    {
        "question_id": 484,
        "difficulty": null,
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/wta_1/wta_1.sqlite",
        "schema": " CREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,  -- Unique identifier for each player\n    \"first_name\" TEXT,  -- First name of the player\n    \"last_name\" TEXT,  -- Last name of the player\n    \"hand\" TEXT,  -- Dominant playing hand of the player (e.g., left or right)\n    \"birth_date\" DATE,  -- Birth date of the player\n    \"country_code\" TEXT,  -- Country code representing the player's nationality\n) \nCREATE TABLE matches(\n    \"best_of\" INT,  -- Maximum number of sets in the match\n    \"draw_size\" INT,  -- Number of players in the tournament draw\n    \"loser_age\" FLOAT,  -- Age of the player who lost the match\n    \"loser_entry\" TEXT,  -- Method of entry for the losing player (e.g., wildcard, qualifier)\n    \"loser_hand\" TEXT,  -- Dominant playing hand of the losing player\n    \"loser_ht\" INT,  -- Height of the losing player in centimeters\n    \"loser_id\" INT,  -- Unique identifier for the losing player\n    \"loser_ioc\" TEXT,  -- International Olympic Committee country code for the losing player\n    \"loser_name\" TEXT,  -- Full name of the losing player\n    \"loser_rank\" INT,  -- World ranking of the losing player at the time of the match\n    \"loser_rank_points\" INT,  -- Ranking points of the losing player at the time of the match\n    \"loser_seed\" INT,  -- Seed number of the losing player in the tournament\n    \"match_num\" INT,  -- Unique identifier for the match within the tournament\n    \"minutes\" INT,  -- Duration of the match in minutes\n    \"round\" TEXT,  -- Round of the tournament in which the match was played\n    \"score\" TEXT,  -- Final score of the match\n    \"surface\" TEXT,  -- Type of court surface the match was played on (e.g., clay, grass, hard)\n    \"tourney_date\" DATE,  -- Start date of the tournament\n    \"tourney_id\" TEXT,  -- Unique identifier for the tournament\n    \"tourney_level\" TEXT,  -- Level of the tournament (e.g., Grand Slam, ATP 1000)\n    \"tourney_name\" TEXT,  -- Name of the tournament\n    \"winner_age\" FLOAT,  -- Age of the player who won the match\n    \"winner_entry\" TEXT,  -- Method of entry for the winning player (e.g., wildcard, qualifier)\n    \"winner_hand\" TEXT,  -- Dominant playing hand of the winning player\n    \"winner_ht\" INT,  -- Height of the winning player in centimeters\n    \"winner_id\" INT,  -- Unique identifier for the winning player\n    \"winner_ioc\" TEXT,  -- International Olympic Committee country code for the winning player\n    \"winner_name\" TEXT,  -- Full name of the winning player\n    \"winner_rank\" INT,  -- World ranking of the winning player at the time of the match\n    \"winner_rank_points\" INT,  -- Ranking points of the winning player at the time of the match\n    \"winner_seed\" INT,  -- Seed number of the winning player in the tournament\n    \"year\" INT,  -- Year the match took place\n    FOREIGN KEY(loser_id) REFERENCES players(player_id),\n    FOREIGN KEY(winner_id) REFERENCES players(player_id)\n) CREATE TABLE rankings(\n    \"ranking_date\" DATE,  -- Date when the ranking was recorded\n    \"ranking\" INT,  -- World ranking of the player on the given date\n    \"player_id\" INT,  -- Unique identifier for the player\n    \"ranking_points\" INT,  -- Total ranking points of the player on the given date\n    \"tours\" INT,  -- Number of tours or tournaments the player participated in\n    FOREIGN KEY(player_id) REFERENCES players(player_id)\n)"
    },
    {
        "question_id": 479,
        "difficulty": null,
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "prediction": null,
        "ground_truth": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/wta_1/wta_1.sqlite",
        "schema": " CREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,  -- Unique identifier for each player\n    \"first_name\" TEXT,  -- First name of the player\n    \"last_name\" TEXT,  -- Last name of the player\n    \"hand\" TEXT,  -- Dominant playing hand of the player (e.g., left or right)\n    \"birth_date\" DATE,  -- Birth date of the player\n    \"country_code\" TEXT,  -- Country code representing the player's nationality\n) \nCREATE TABLE matches(\n    \"best_of\" INT,  -- Maximum number of sets in the match\n    \"draw_size\" INT,  -- Number of players in the tournament draw\n    \"loser_age\" FLOAT,  -- Age of the player who lost the match\n    \"loser_entry\" TEXT,  -- Method of entry for the losing player (e.g., wildcard, qualifier)\n    \"loser_hand\" TEXT,  -- Dominant playing hand of the losing player\n    \"loser_ht\" INT,  -- Height of the losing player in centimeters\n    \"loser_id\" INT,  -- Unique identifier for the losing player\n    \"loser_ioc\" TEXT,  -- International Olympic Committee country code for the losing player\n    \"loser_name\" TEXT,  -- Full name of the losing player\n    \"loser_rank\" INT,  -- World ranking of the losing player at the time of the match\n    \"loser_rank_points\" INT,  -- Ranking points of the losing player at the time of the match\n    \"loser_seed\" INT,  -- Seed number of the losing player in the tournament\n    \"match_num\" INT,  -- Unique identifier for the match within the tournament\n    \"minutes\" INT,  -- Duration of the match in minutes\n    \"round\" TEXT,  -- Round of the tournament in which the match was played\n    \"score\" TEXT,  -- Final score of the match\n    \"surface\" TEXT,  -- Type of court surface the match was played on (e.g., clay, grass, hard)\n    \"tourney_date\" DATE,  -- Start date of the tournament\n    \"tourney_id\" TEXT,  -- Unique identifier for the tournament\n    \"tourney_level\" TEXT,  -- Level of the tournament (e.g., Grand Slam, ATP 1000)\n    \"tourney_name\" TEXT,  -- Name of the tournament\n    \"winner_age\" FLOAT,  -- Age of the player who won the match\n    \"winner_entry\" TEXT,  -- Method of entry for the winning player (e.g., wildcard, qualifier)\n    \"winner_hand\" TEXT,  -- Dominant playing hand of the winning player\n    \"winner_ht\" INT,  -- Height of the winning player in centimeters\n    \"winner_id\" INT,  -- Unique identifier for the winning player\n    \"winner_ioc\" TEXT,  -- International Olympic Committee country code for the winning player\n    \"winner_name\" TEXT,  -- Full name of the winning player\n    \"winner_rank\" INT,  -- World ranking of the winning player at the time of the match\n    \"winner_rank_points\" INT,  -- Ranking points of the winning player at the time of the match\n    \"winner_seed\" INT,  -- Seed number of the winning player in the tournament\n    \"year\" INT,  -- Year the match took place\n    FOREIGN KEY(loser_id) REFERENCES players(player_id),\n    FOREIGN KEY(winner_id) REFERENCES players(player_id)\n) CREATE TABLE rankings(\n    \"ranking_date\" DATE,  -- Date when the ranking was recorded\n    \"ranking\" INT,  -- World ranking of the player on the given date\n    \"player_id\" INT,  -- Unique identifier for the player\n    \"ranking_points\" INT,  -- Total ranking points of the player on the given date\n    \"tours\" INT,  -- Number of tours or tournaments the player participated in\n    FOREIGN KEY(player_id) REFERENCES players(player_id)\n)"
    },
    {
        "question_id": 451,
        "difficulty": null,
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "prediction": null,
        "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/wta_1/wta_1.sqlite",
        "schema": " CREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,  -- Unique identifier for each player\n    \"first_name\" TEXT,  -- First name of the player\n    \"last_name\" TEXT,  -- Last name of the player\n    \"hand\" TEXT,  -- Dominant playing hand of the player (e.g., left or right)\n    \"birth_date\" DATE,  -- Birth date of the player\n    \"country_code\" TEXT,  -- Country code representing the player's nationality\n) \nCREATE TABLE matches(\n    \"best_of\" INT,  -- Maximum number of sets in the match\n    \"draw_size\" INT,  -- Number of players in the tournament draw\n    \"loser_age\" FLOAT,  -- Age of the player who lost the match\n    \"loser_entry\" TEXT,  -- Method of entry for the losing player (e.g., wildcard, qualifier)\n    \"loser_hand\" TEXT,  -- Dominant playing hand of the losing player\n    \"loser_ht\" INT,  -- Height of the losing player in centimeters\n    \"loser_id\" INT,  -- Unique identifier for the losing player\n    \"loser_ioc\" TEXT,  -- International Olympic Committee country code for the losing player\n    \"loser_name\" TEXT,  -- Full name of the losing player\n    \"loser_rank\" INT,  -- World ranking of the losing player at the time of the match\n    \"loser_rank_points\" INT,  -- Ranking points of the losing player at the time of the match\n    \"loser_seed\" INT,  -- Seed number of the losing player in the tournament\n    \"match_num\" INT,  -- Unique identifier for the match within the tournament\n    \"minutes\" INT,  -- Duration of the match in minutes\n    \"round\" TEXT,  -- Round of the tournament in which the match was played\n    \"score\" TEXT,  -- Final score of the match\n    \"surface\" TEXT,  -- Type of court surface the match was played on (e.g., clay, grass, hard)\n    \"tourney_date\" DATE,  -- Start date of the tournament\n    \"tourney_id\" TEXT,  -- Unique identifier for the tournament\n    \"tourney_level\" TEXT,  -- Level of the tournament (e.g., Grand Slam, ATP 1000)\n    \"tourney_name\" TEXT,  -- Name of the tournament\n    \"winner_age\" FLOAT,  -- Age of the player who won the match\n    \"winner_entry\" TEXT,  -- Method of entry for the winning player (e.g., wildcard, qualifier)\n    \"winner_hand\" TEXT,  -- Dominant playing hand of the winning player\n    \"winner_ht\" INT,  -- Height of the winning player in centimeters\n    \"winner_id\" INT,  -- Unique identifier for the winning player\n    \"winner_ioc\" TEXT,  -- International Olympic Committee country code for the winning player\n    \"winner_name\" TEXT,  -- Full name of the winning player\n    \"winner_rank\" INT,  -- World ranking of the winning player at the time of the match\n    \"winner_rank_points\" INT,  -- Ranking points of the winning player at the time of the match\n    \"winner_seed\" INT,  -- Seed number of the winning player in the tournament\n    \"year\" INT,  -- Year the match took place\n    FOREIGN KEY(loser_id) REFERENCES players(player_id),\n    FOREIGN KEY(winner_id) REFERENCES players(player_id)\n) CREATE TABLE rankings(\n    \"ranking_date\" DATE,  -- Date when the ranking was recorded\n    \"ranking\" INT,  -- World ranking of the player on the given date\n    \"player_id\" INT,  -- Unique identifier for the player\n    \"ranking_points\" INT,  -- Total ranking points of the player on the given date\n    \"tours\" INT,  -- Number of tours or tournaments the player participated in\n    FOREIGN KEY(player_id) REFERENCES players(player_id)\n)"
    },
    {
        "question_id": 506,
        "difficulty": null,
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "prediction": null,
        "ground_truth": "SELECT note FROM death WHERE note LIKE '%East%'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/battle_death/battle_death.sqlite",
        "schema": "CREATE TABLE \"battle\" (\n    \"id\" int,  -- Unique identifier for the battle\n    \"name\" text,  -- Name of the battle\n    \"date\" text,  -- Date when the battle took place\n    \"bulgarian_commander\" text,  -- Name of the Bulgarian commander in the battle\n    \"latin_commander\" text,  -- Name of the Latin commander in the battle\n    \"result\" text,  -- Outcome of the battle\n    primary key(\"id\")\n) \nCREATE TABLE \"ship\" (\n    \"lost_in_battle\" int,  -- Identifier of the battle in which the ship was lost\n    \"id\" int,  -- Unique identifier for the ship\n    \"name\" text,  -- Name of the ship\n    \"tonnage\" text,  -- Weight or carrying capacity of the ship\n    \"ship_type\" text,  -- Type or classification of the ship\n    \"location\" text,  -- Location where the ship was last recorded or found\n    \"disposition_of_ship\" text,  -- Current status or condition of the ship\n    primary key(\"id\"),\n    foreign key (`lost_in_battle`) references `battle`(\"id\") \n) \nCREATE TABLE \"death\" (\n    \"caused_by_ship_id\" int,  -- Identifier of the ship that caused the death\n    \"id\" int,  -- Unique identifier for the death record\n    \"note\" text,  -- Additional notes or details about the death\n    \"killed\" int,  -- Number of people killed in the incident\n    \"injured\" int,  -- Number of people injured in the incident\n    primary key(\"id\"),\n    foreign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)"
    },
    {
        "question_id": 499,
        "difficulty": null,
        "db_id": "battle_death",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "prediction": null,
        "ground_truth": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/battle_death/battle_death.sqlite",
        "schema": "CREATE TABLE \"battle\" (\n    \"id\" int,  -- Unique identifier for the battle\n    \"name\" text,  -- Name of the battle\n    \"date\" text,  -- Date when the battle took place\n    \"bulgarian_commander\" text,  -- Name of the Bulgarian commander in the battle\n    \"latin_commander\" text,  -- Name of the Latin commander in the battle\n    \"result\" text,  -- Outcome of the battle\n    primary key(\"id\")\n) \nCREATE TABLE \"ship\" (\n    \"lost_in_battle\" int,  -- Identifier of the battle in which the ship was lost\n    \"id\" int,  -- Unique identifier for the ship\n    \"name\" text,  -- Name of the ship\n    \"tonnage\" text,  -- Weight or carrying capacity of the ship\n    \"ship_type\" text,  -- Type or classification of the ship\n    \"location\" text,  -- Location where the ship was last recorded or found\n    \"disposition_of_ship\" text,  -- Current status or condition of the ship\n    primary key(\"id\"),\n    foreign key (`lost_in_battle`) references `battle`(\"id\") \n) \nCREATE TABLE \"death\" (\n    \"caused_by_ship_id\" int,  -- Identifier of the ship that caused the death\n    \"id\" int,  -- Unique identifier for the death record\n    \"note\" text,  -- Additional notes or details about the death\n    \"killed\" int,  -- Number of people killed in the incident\n    \"injured\" int,  -- Number of people injured in the incident\n    primary key(\"id\"),\n    foreign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)"
    },
    {
        "question_id": 497,
        "difficulty": null,
        "db_id": "battle_death",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "prediction": null,
        "ground_truth": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/battle_death/battle_death.sqlite",
        "schema": "CREATE TABLE \"battle\" (\n    \"id\" int,  -- Unique identifier for the battle\n    \"name\" text,  -- Name of the battle\n    \"date\" text,  -- Date when the battle took place\n    \"bulgarian_commander\" text,  -- Name of the Bulgarian commander in the battle\n    \"latin_commander\" text,  -- Name of the Latin commander in the battle\n    \"result\" text,  -- Outcome of the battle\n    primary key(\"id\")\n) \nCREATE TABLE \"ship\" (\n    \"lost_in_battle\" int,  -- Identifier of the battle in which the ship was lost\n    \"id\" int,  -- Unique identifier for the ship\n    \"name\" text,  -- Name of the ship\n    \"tonnage\" text,  -- Weight or carrying capacity of the ship\n    \"ship_type\" text,  -- Type or classification of the ship\n    \"location\" text,  -- Location where the ship was last recorded or found\n    \"disposition_of_ship\" text,  -- Current status or condition of the ship\n    primary key(\"id\"),\n    foreign key (`lost_in_battle`) references `battle`(\"id\") \n) \nCREATE TABLE \"death\" (\n    \"caused_by_ship_id\" int,  -- Identifier of the ship that caused the death\n    \"id\" int,  -- Unique identifier for the death record\n    \"note\" text,  -- Additional notes or details about the death\n    \"killed\" int,  -- Number of people killed in the incident\n    \"injured\" int,  -- Number of people injured in the incident\n    primary key(\"id\"),\n    foreign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)"
    },
    {
        "question_id": 492,
        "difficulty": null,
        "db_id": "battle_death",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "prediction": null,
        "ground_truth": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/battle_death/battle_death.sqlite",
        "schema": "CREATE TABLE \"battle\" (\n    \"id\" int,  -- Unique identifier for the battle\n    \"name\" text,  -- Name of the battle\n    \"date\" text,  -- Date when the battle took place\n    \"bulgarian_commander\" text,  -- Name of the Bulgarian commander in the battle\n    \"latin_commander\" text,  -- Name of the Latin commander in the battle\n    \"result\" text,  -- Outcome of the battle\n    primary key(\"id\")\n) \nCREATE TABLE \"ship\" (\n    \"lost_in_battle\" int,  -- Identifier of the battle in which the ship was lost\n    \"id\" int,  -- Unique identifier for the ship\n    \"name\" text,  -- Name of the ship\n    \"tonnage\" text,  -- Weight or carrying capacity of the ship\n    \"ship_type\" text,  -- Type or classification of the ship\n    \"location\" text,  -- Location where the ship was last recorded or found\n    \"disposition_of_ship\" text,  -- Current status or condition of the ship\n    primary key(\"id\"),\n    foreign key (`lost_in_battle`) references `battle`(\"id\") \n) \nCREATE TABLE \"death\" (\n    \"caused_by_ship_id\" int,  -- Identifier of the ship that caused the death\n    \"id\" int,  -- Unique identifier for the death record\n    \"note\" text,  -- Additional notes or details about the death\n    \"killed\" int,  -- Number of people killed in the incident\n    \"injured\" int,  -- Number of people injured in the incident\n    primary key(\"id\"),\n    foreign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)"
    },
    {
        "question_id": 494,
        "difficulty": null,
        "db_id": "battle_death",
        "question": "What is maximum and minimum death toll caused each time?",
        "prediction": null,
        "ground_truth": "SELECT max(killed) ,  min(killed) FROM death",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/battle_death/battle_death.sqlite",
        "schema": "CREATE TABLE \"battle\" (\n    \"id\" int,  -- Unique identifier for the battle\n    \"name\" text,  -- Name of the battle\n    \"date\" text,  -- Date when the battle took place\n    \"bulgarian_commander\" text,  -- Name of the Bulgarian commander in the battle\n    \"latin_commander\" text,  -- Name of the Latin commander in the battle\n    \"result\" text,  -- Outcome of the battle\n    primary key(\"id\")\n) \nCREATE TABLE \"ship\" (\n    \"lost_in_battle\" int,  -- Identifier of the battle in which the ship was lost\n    \"id\" int,  -- Unique identifier for the ship\n    \"name\" text,  -- Name of the ship\n    \"tonnage\" text,  -- Weight or carrying capacity of the ship\n    \"ship_type\" text,  -- Type or classification of the ship\n    \"location\" text,  -- Location where the ship was last recorded or found\n    \"disposition_of_ship\" text,  -- Current status or condition of the ship\n    primary key(\"id\"),\n    foreign key (`lost_in_battle`) references `battle`(\"id\") \n) \nCREATE TABLE \"death\" (\n    \"caused_by_ship_id\" int,  -- Identifier of the ship that caused the death\n    \"id\" int,  -- Unique identifier for the death record\n    \"note\" text,  -- Additional notes or details about the death\n    \"killed\" int,  -- Number of people killed in the incident\n    \"injured\" int,  -- Number of people injured in the incident\n    primary key(\"id\"),\n    foreign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)"
    },
    {
        "question_id": 584,
        "difficulty": null,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "prediction": null,
        "ground_truth": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "schema": " CREATE TABLE `Addresses` (\n    `address_id` INTEGER PRIMARY KEY,  -- Unique identifier for the address\n    `line_1` VARCHAR(255),  -- First line of the address, typically the street address\n    `line_2` VARCHAR(255),  -- Second line of the address, often used for apartment or suite numbers\n    `line_3` VARCHAR(255),  -- Third line of the address, for additional address information\n    `city` VARCHAR(255),  -- City where the address is located\n    `zip_postcode` VARCHAR(20),  -- Postal code or ZIP code for the address\n    `state_province_county` VARCHAR(255),  -- State, province, or county of the address\n    `country` VARCHAR(255),  -- Country where the address is located\n    `other_address_details` VARCHAR(255),  -- Additional details about the address\n) \nCREATE TABLE `Courses` (\n    `course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the course\n    `course_name` VARCHAR(255),  -- Name of the course\n    `course_description` VARCHAR(255),  -- Description of the course content\n    `other_details` VARCHAR(255),  -- Additional details about the course\n) \nCREATE TABLE `Departments` (\n    `department_id` INTEGER PRIMARY KEY,  -- Unique identifier for the department\n    `department_name` VARCHAR(255),  -- Name of the department\n    `department_description` VARCHAR(255),  -- Description of the department's focus or mission\n    `other_details` VARCHAR(255),  -- Additional details about the department\n) \nCREATE TABLE `Degree_Programs` (\n    `degree_program_id` INTEGER PRIMARY KEY,  -- Unique identifier for the degree program\n    `department_id` INTEGER NOT NULL,  -- Identifier for the department offering the degree program\n    `degree_summary_name` VARCHAR(255),  -- Summary name of the degree program\n    `degree_summary_description` VARCHAR(255),  -- Summary description of the degree program\n    `other_details` VARCHAR(255),  -- Additional details about the degree program\n    FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n) \nCREATE TABLE `Sections` (\n    `section_id` INTEGER PRIMARY KEY,  -- Unique identifier for the section\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course associated with the section\n    `section_name` VARCHAR(255),  -- Name of the section\n    `section_description` VARCHAR(255),  -- Description of the section\n    `other_details` VARCHAR(255),  -- Additional details about the section\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n) \nCREATE TABLE `Semesters` (\n    `semester_id` INTEGER PRIMARY KEY,  -- Unique identifier for the semester\n    `semester_name` VARCHAR(255),  -- Name of the semester\n    `semester_description` VARCHAR(255),  -- Description of the semester\n    `other_details` VARCHAR(255),  -- Additional details about the semester\n) \nCREATE TABLE `Students` (\n    `student_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student\n    `current_address_id` INTEGER NOT NULL,  -- Identifier for the student's current address\n    `permanent_address_id` INTEGER NOT NULL,  -- Identifier for the student's permanent address\n    `first_name` VARCHAR(80),  -- First name of the student\n    `middle_name` VARCHAR(40),  -- Middle name of the student\n    `last_name` VARCHAR(40),  -- Last name of the student\n    `cell_mobile_number` VARCHAR(40),  -- Mobile phone number of the student\n    `email_address` VARCHAR(40),  -- Email address of the student\n    `ssn` VARCHAR(40),  -- Social Security Number of the student\n    `date_first_registered` DATETIME,  -- Date when the student first registered\n    `date_left` DATETIME,  -- Date when the student left the institution\n    `other_student_details` VARCHAR(255),  -- Additional details about the student\n    FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\n    FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n) \nCREATE TABLE `Student_Enrolment` (\n    `student_enrolment_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student enrolment\n    `degree_program_id` INTEGER NOT NULL,  -- Identifier for the degree program the student is enrolled in\n    `semester_id` INTEGER NOT NULL,  -- Identifier for the semester of enrolment\n    `student_id` INTEGER NOT NULL,  -- Identifier for the student\n    `other_details` VARCHAR(255),  -- Additional details about the enrolment\n    FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\n    FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\n    FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n) \nCREATE TABLE `Student_Enrolment_Courses` (\n    `student_course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student's course enrolment\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course the student is enrolled in\n    `student_enrolment_id` INTEGER NOT NULL,  -- Identifier for the student's enrolment record\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\n    FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n) \nCREATE TABLE `Transcripts` (\n    `transcript_id` INTEGER PRIMARY KEY,  -- Unique identifier for the transcript\n    `transcript_date` DATETIME,  -- Date when the transcript was issued\n    `other_details` VARCHAR(255),  -- Additional details about the transcript\n) \nCREATE TABLE `Transcript_Contents` (\n    `student_course_id` INTEGER NOT NULL,  -- Identifier for the student's course enrolment included in the transcript\n    `transcript_id` INTEGER NOT NULL,  -- Identifier for the transcript containing the course enrolment\n    FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\n    FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)"
    },
    {
        "question_id": 525,
        "difficulty": null,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and id of courses having at most 2 sections?",
        "prediction": null,
        "ground_truth": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "schema": " CREATE TABLE `Addresses` (\n    `address_id` INTEGER PRIMARY KEY,  -- Unique identifier for the address\n    `line_1` VARCHAR(255),  -- First line of the address, typically the street address\n    `line_2` VARCHAR(255),  -- Second line of the address, often used for apartment or suite numbers\n    `line_3` VARCHAR(255),  -- Third line of the address, for additional address information\n    `city` VARCHAR(255),  -- City where the address is located\n    `zip_postcode` VARCHAR(20),  -- Postal code or ZIP code for the address\n    `state_province_county` VARCHAR(255),  -- State, province, or county of the address\n    `country` VARCHAR(255),  -- Country where the address is located\n    `other_address_details` VARCHAR(255),  -- Additional details about the address\n) \nCREATE TABLE `Courses` (\n    `course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the course\n    `course_name` VARCHAR(255),  -- Name of the course\n    `course_description` VARCHAR(255),  -- Description of the course content\n    `other_details` VARCHAR(255),  -- Additional details about the course\n) \nCREATE TABLE `Departments` (\n    `department_id` INTEGER PRIMARY KEY,  -- Unique identifier for the department\n    `department_name` VARCHAR(255),  -- Name of the department\n    `department_description` VARCHAR(255),  -- Description of the department's focus or mission\n    `other_details` VARCHAR(255),  -- Additional details about the department\n) \nCREATE TABLE `Degree_Programs` (\n    `degree_program_id` INTEGER PRIMARY KEY,  -- Unique identifier for the degree program\n    `department_id` INTEGER NOT NULL,  -- Identifier for the department offering the degree program\n    `degree_summary_name` VARCHAR(255),  -- Summary name of the degree program\n    `degree_summary_description` VARCHAR(255),  -- Summary description of the degree program\n    `other_details` VARCHAR(255),  -- Additional details about the degree program\n    FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n) \nCREATE TABLE `Sections` (\n    `section_id` INTEGER PRIMARY KEY,  -- Unique identifier for the section\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course associated with the section\n    `section_name` VARCHAR(255),  -- Name of the section\n    `section_description` VARCHAR(255),  -- Description of the section\n    `other_details` VARCHAR(255),  -- Additional details about the section\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n) \nCREATE TABLE `Semesters` (\n    `semester_id` INTEGER PRIMARY KEY,  -- Unique identifier for the semester\n    `semester_name` VARCHAR(255),  -- Name of the semester\n    `semester_description` VARCHAR(255),  -- Description of the semester\n    `other_details` VARCHAR(255),  -- Additional details about the semester\n) \nCREATE TABLE `Students` (\n    `student_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student\n    `current_address_id` INTEGER NOT NULL,  -- Identifier for the student's current address\n    `permanent_address_id` INTEGER NOT NULL,  -- Identifier for the student's permanent address\n    `first_name` VARCHAR(80),  -- First name of the student\n    `middle_name` VARCHAR(40),  -- Middle name of the student\n    `last_name` VARCHAR(40),  -- Last name of the student\n    `cell_mobile_number` VARCHAR(40),  -- Mobile phone number of the student\n    `email_address` VARCHAR(40),  -- Email address of the student\n    `ssn` VARCHAR(40),  -- Social Security Number of the student\n    `date_first_registered` DATETIME,  -- Date when the student first registered\n    `date_left` DATETIME,  -- Date when the student left the institution\n    `other_student_details` VARCHAR(255),  -- Additional details about the student\n    FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\n    FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n) \nCREATE TABLE `Student_Enrolment` (\n    `student_enrolment_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student enrolment\n    `degree_program_id` INTEGER NOT NULL,  -- Identifier for the degree program the student is enrolled in\n    `semester_id` INTEGER NOT NULL,  -- Identifier for the semester of enrolment\n    `student_id` INTEGER NOT NULL,  -- Identifier for the student\n    `other_details` VARCHAR(255),  -- Additional details about the enrolment\n    FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\n    FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\n    FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n) \nCREATE TABLE `Student_Enrolment_Courses` (\n    `student_course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student's course enrolment\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course the student is enrolled in\n    `student_enrolment_id` INTEGER NOT NULL,  -- Identifier for the student's enrolment record\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\n    FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n) \nCREATE TABLE `Transcripts` (\n    `transcript_id` INTEGER PRIMARY KEY,  -- Unique identifier for the transcript\n    `transcript_date` DATETIME,  -- Date when the transcript was issued\n    `other_details` VARCHAR(255),  -- Additional details about the transcript\n) \nCREATE TABLE `Transcript_Contents` (\n    `student_course_id` INTEGER NOT NULL,  -- Identifier for the student's course enrolment included in the transcript\n    `transcript_id` INTEGER NOT NULL,  -- Identifier for the transcript containing the course enrolment\n    FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\n    FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)"
    },
    {
        "question_id": 522,
        "difficulty": null,
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "schema": " CREATE TABLE `Addresses` (\n    `address_id` INTEGER PRIMARY KEY,  -- Unique identifier for the address\n    `line_1` VARCHAR(255),  -- First line of the address, typically the street address\n    `line_2` VARCHAR(255),  -- Second line of the address, often used for apartment or suite numbers\n    `line_3` VARCHAR(255),  -- Third line of the address, for additional address information\n    `city` VARCHAR(255),  -- City where the address is located\n    `zip_postcode` VARCHAR(20),  -- Postal code or ZIP code for the address\n    `state_province_county` VARCHAR(255),  -- State, province, or county of the address\n    `country` VARCHAR(255),  -- Country where the address is located\n    `other_address_details` VARCHAR(255),  -- Additional details about the address\n) \nCREATE TABLE `Courses` (\n    `course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the course\n    `course_name` VARCHAR(255),  -- Name of the course\n    `course_description` VARCHAR(255),  -- Description of the course content\n    `other_details` VARCHAR(255),  -- Additional details about the course\n) \nCREATE TABLE `Departments` (\n    `department_id` INTEGER PRIMARY KEY,  -- Unique identifier for the department\n    `department_name` VARCHAR(255),  -- Name of the department\n    `department_description` VARCHAR(255),  -- Description of the department's focus or mission\n    `other_details` VARCHAR(255),  -- Additional details about the department\n) \nCREATE TABLE `Degree_Programs` (\n    `degree_program_id` INTEGER PRIMARY KEY,  -- Unique identifier for the degree program\n    `department_id` INTEGER NOT NULL,  -- Identifier for the department offering the degree program\n    `degree_summary_name` VARCHAR(255),  -- Summary name of the degree program\n    `degree_summary_description` VARCHAR(255),  -- Summary description of the degree program\n    `other_details` VARCHAR(255),  -- Additional details about the degree program\n    FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n) \nCREATE TABLE `Sections` (\n    `section_id` INTEGER PRIMARY KEY,  -- Unique identifier for the section\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course associated with the section\n    `section_name` VARCHAR(255),  -- Name of the section\n    `section_description` VARCHAR(255),  -- Description of the section\n    `other_details` VARCHAR(255),  -- Additional details about the section\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n) \nCREATE TABLE `Semesters` (\n    `semester_id` INTEGER PRIMARY KEY,  -- Unique identifier for the semester\n    `semester_name` VARCHAR(255),  -- Name of the semester\n    `semester_description` VARCHAR(255),  -- Description of the semester\n    `other_details` VARCHAR(255),  -- Additional details about the semester\n) \nCREATE TABLE `Students` (\n    `student_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student\n    `current_address_id` INTEGER NOT NULL,  -- Identifier for the student's current address\n    `permanent_address_id` INTEGER NOT NULL,  -- Identifier for the student's permanent address\n    `first_name` VARCHAR(80),  -- First name of the student\n    `middle_name` VARCHAR(40),  -- Middle name of the student\n    `last_name` VARCHAR(40),  -- Last name of the student\n    `cell_mobile_number` VARCHAR(40),  -- Mobile phone number of the student\n    `email_address` VARCHAR(40),  -- Email address of the student\n    `ssn` VARCHAR(40),  -- Social Security Number of the student\n    `date_first_registered` DATETIME,  -- Date when the student first registered\n    `date_left` DATETIME,  -- Date when the student left the institution\n    `other_student_details` VARCHAR(255),  -- Additional details about the student\n    FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\n    FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n) \nCREATE TABLE `Student_Enrolment` (\n    `student_enrolment_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student enrolment\n    `degree_program_id` INTEGER NOT NULL,  -- Identifier for the degree program the student is enrolled in\n    `semester_id` INTEGER NOT NULL,  -- Identifier for the semester of enrolment\n    `student_id` INTEGER NOT NULL,  -- Identifier for the student\n    `other_details` VARCHAR(255),  -- Additional details about the enrolment\n    FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\n    FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\n    FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n) \nCREATE TABLE `Student_Enrolment_Courses` (\n    `student_course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student's course enrolment\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course the student is enrolled in\n    `student_enrolment_id` INTEGER NOT NULL,  -- Identifier for the student's enrolment record\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\n    FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n) \nCREATE TABLE `Transcripts` (\n    `transcript_id` INTEGER PRIMARY KEY,  -- Unique identifier for the transcript\n    `transcript_date` DATETIME,  -- Date when the transcript was issued\n    `other_details` VARCHAR(255),  -- Additional details about the transcript\n) \nCREATE TABLE `Transcript_Contents` (\n    `student_course_id` INTEGER NOT NULL,  -- Identifier for the student's course enrolment included in the transcript\n    `transcript_id` INTEGER NOT NULL,  -- Identifier for the transcript containing the course enrolment\n    FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\n    FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)"
    },
    {
        "question_id": 543,
        "difficulty": null,
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "prediction": null,
        "ground_truth": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "schema": " CREATE TABLE `Addresses` (\n    `address_id` INTEGER PRIMARY KEY,  -- Unique identifier for the address\n    `line_1` VARCHAR(255),  -- First line of the address, typically the street address\n    `line_2` VARCHAR(255),  -- Second line of the address, often used for apartment or suite numbers\n    `line_3` VARCHAR(255),  -- Third line of the address, for additional address information\n    `city` VARCHAR(255),  -- City where the address is located\n    `zip_postcode` VARCHAR(20),  -- Postal code or ZIP code for the address\n    `state_province_county` VARCHAR(255),  -- State, province, or county of the address\n    `country` VARCHAR(255),  -- Country where the address is located\n    `other_address_details` VARCHAR(255),  -- Additional details about the address\n) \nCREATE TABLE `Courses` (\n    `course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the course\n    `course_name` VARCHAR(255),  -- Name of the course\n    `course_description` VARCHAR(255),  -- Description of the course content\n    `other_details` VARCHAR(255),  -- Additional details about the course\n) \nCREATE TABLE `Departments` (\n    `department_id` INTEGER PRIMARY KEY,  -- Unique identifier for the department\n    `department_name` VARCHAR(255),  -- Name of the department\n    `department_description` VARCHAR(255),  -- Description of the department's focus or mission\n    `other_details` VARCHAR(255),  -- Additional details about the department\n) \nCREATE TABLE `Degree_Programs` (\n    `degree_program_id` INTEGER PRIMARY KEY,  -- Unique identifier for the degree program\n    `department_id` INTEGER NOT NULL,  -- Identifier for the department offering the degree program\n    `degree_summary_name` VARCHAR(255),  -- Summary name of the degree program\n    `degree_summary_description` VARCHAR(255),  -- Summary description of the degree program\n    `other_details` VARCHAR(255),  -- Additional details about the degree program\n    FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n) \nCREATE TABLE `Sections` (\n    `section_id` INTEGER PRIMARY KEY,  -- Unique identifier for the section\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course associated with the section\n    `section_name` VARCHAR(255),  -- Name of the section\n    `section_description` VARCHAR(255),  -- Description of the section\n    `other_details` VARCHAR(255),  -- Additional details about the section\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n) \nCREATE TABLE `Semesters` (\n    `semester_id` INTEGER PRIMARY KEY,  -- Unique identifier for the semester\n    `semester_name` VARCHAR(255),  -- Name of the semester\n    `semester_description` VARCHAR(255),  -- Description of the semester\n    `other_details` VARCHAR(255),  -- Additional details about the semester\n) \nCREATE TABLE `Students` (\n    `student_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student\n    `current_address_id` INTEGER NOT NULL,  -- Identifier for the student's current address\n    `permanent_address_id` INTEGER NOT NULL,  -- Identifier for the student's permanent address\n    `first_name` VARCHAR(80),  -- First name of the student\n    `middle_name` VARCHAR(40),  -- Middle name of the student\n    `last_name` VARCHAR(40),  -- Last name of the student\n    `cell_mobile_number` VARCHAR(40),  -- Mobile phone number of the student\n    `email_address` VARCHAR(40),  -- Email address of the student\n    `ssn` VARCHAR(40),  -- Social Security Number of the student\n    `date_first_registered` DATETIME,  -- Date when the student first registered\n    `date_left` DATETIME,  -- Date when the student left the institution\n    `other_student_details` VARCHAR(255),  -- Additional details about the student\n    FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\n    FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n) \nCREATE TABLE `Student_Enrolment` (\n    `student_enrolment_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student enrolment\n    `degree_program_id` INTEGER NOT NULL,  -- Identifier for the degree program the student is enrolled in\n    `semester_id` INTEGER NOT NULL,  -- Identifier for the semester of enrolment\n    `student_id` INTEGER NOT NULL,  -- Identifier for the student\n    `other_details` VARCHAR(255),  -- Additional details about the enrolment\n    FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\n    FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\n    FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n) \nCREATE TABLE `Student_Enrolment_Courses` (\n    `student_course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student's course enrolment\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course the student is enrolled in\n    `student_enrolment_id` INTEGER NOT NULL,  -- Identifier for the student's enrolment record\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\n    FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n) \nCREATE TABLE `Transcripts` (\n    `transcript_id` INTEGER PRIMARY KEY,  -- Unique identifier for the transcript\n    `transcript_date` DATETIME,  -- Date when the transcript was issued\n    `other_details` VARCHAR(255),  -- Additional details about the transcript\n) \nCREATE TABLE `Transcript_Contents` (\n    `student_course_id` INTEGER NOT NULL,  -- Identifier for the student's course enrolment included in the transcript\n    `transcript_id` INTEGER NOT NULL,  -- Identifier for the transcript containing the course enrolment\n    FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\n    FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)"
    },
    {
        "question_id": 542,
        "difficulty": null,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "prediction": null,
        "ground_truth": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "schema": " CREATE TABLE `Addresses` (\n    `address_id` INTEGER PRIMARY KEY,  -- Unique identifier for the address\n    `line_1` VARCHAR(255),  -- First line of the address, typically the street address\n    `line_2` VARCHAR(255),  -- Second line of the address, often used for apartment or suite numbers\n    `line_3` VARCHAR(255),  -- Third line of the address, for additional address information\n    `city` VARCHAR(255),  -- City where the address is located\n    `zip_postcode` VARCHAR(20),  -- Postal code or ZIP code for the address\n    `state_province_county` VARCHAR(255),  -- State, province, or county of the address\n    `country` VARCHAR(255),  -- Country where the address is located\n    `other_address_details` VARCHAR(255),  -- Additional details about the address\n) \nCREATE TABLE `Courses` (\n    `course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the course\n    `course_name` VARCHAR(255),  -- Name of the course\n    `course_description` VARCHAR(255),  -- Description of the course content\n    `other_details` VARCHAR(255),  -- Additional details about the course\n) \nCREATE TABLE `Departments` (\n    `department_id` INTEGER PRIMARY KEY,  -- Unique identifier for the department\n    `department_name` VARCHAR(255),  -- Name of the department\n    `department_description` VARCHAR(255),  -- Description of the department's focus or mission\n    `other_details` VARCHAR(255),  -- Additional details about the department\n) \nCREATE TABLE `Degree_Programs` (\n    `degree_program_id` INTEGER PRIMARY KEY,  -- Unique identifier for the degree program\n    `department_id` INTEGER NOT NULL,  -- Identifier for the department offering the degree program\n    `degree_summary_name` VARCHAR(255),  -- Summary name of the degree program\n    `degree_summary_description` VARCHAR(255),  -- Summary description of the degree program\n    `other_details` VARCHAR(255),  -- Additional details about the degree program\n    FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n) \nCREATE TABLE `Sections` (\n    `section_id` INTEGER PRIMARY KEY,  -- Unique identifier for the section\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course associated with the section\n    `section_name` VARCHAR(255),  -- Name of the section\n    `section_description` VARCHAR(255),  -- Description of the section\n    `other_details` VARCHAR(255),  -- Additional details about the section\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n) \nCREATE TABLE `Semesters` (\n    `semester_id` INTEGER PRIMARY KEY,  -- Unique identifier for the semester\n    `semester_name` VARCHAR(255),  -- Name of the semester\n    `semester_description` VARCHAR(255),  -- Description of the semester\n    `other_details` VARCHAR(255),  -- Additional details about the semester\n) \nCREATE TABLE `Students` (\n    `student_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student\n    `current_address_id` INTEGER NOT NULL,  -- Identifier for the student's current address\n    `permanent_address_id` INTEGER NOT NULL,  -- Identifier for the student's permanent address\n    `first_name` VARCHAR(80),  -- First name of the student\n    `middle_name` VARCHAR(40),  -- Middle name of the student\n    `last_name` VARCHAR(40),  -- Last name of the student\n    `cell_mobile_number` VARCHAR(40),  -- Mobile phone number of the student\n    `email_address` VARCHAR(40),  -- Email address of the student\n    `ssn` VARCHAR(40),  -- Social Security Number of the student\n    `date_first_registered` DATETIME,  -- Date when the student first registered\n    `date_left` DATETIME,  -- Date when the student left the institution\n    `other_student_details` VARCHAR(255),  -- Additional details about the student\n    FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\n    FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n) \nCREATE TABLE `Student_Enrolment` (\n    `student_enrolment_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student enrolment\n    `degree_program_id` INTEGER NOT NULL,  -- Identifier for the degree program the student is enrolled in\n    `semester_id` INTEGER NOT NULL,  -- Identifier for the semester of enrolment\n    `student_id` INTEGER NOT NULL,  -- Identifier for the student\n    `other_details` VARCHAR(255),  -- Additional details about the enrolment\n    FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\n    FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\n    FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n) \nCREATE TABLE `Student_Enrolment_Courses` (\n    `student_course_id` INTEGER PRIMARY KEY,  -- Unique identifier for the student's course enrolment\n    `course_id` INTEGER NOT NULL,  -- Identifier for the course the student is enrolled in\n    `student_enrolment_id` INTEGER NOT NULL,  -- Identifier for the student's enrolment record\n    FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\n    FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n) \nCREATE TABLE `Transcripts` (\n    `transcript_id` INTEGER PRIMARY KEY,  -- Unique identifier for the transcript\n    `transcript_date` DATETIME,  -- Date when the transcript was issued\n    `other_details` VARCHAR(255),  -- Additional details about the transcript\n) \nCREATE TABLE `Transcript_Contents` (\n    `student_course_id` INTEGER NOT NULL,  -- Identifier for the student's course enrolment included in the transcript\n    `transcript_id` INTEGER NOT NULL,  -- Identifier for the transcript containing the course enrolment\n    FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\n    FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)"
    },
    {
        "question_id": 601,
        "difficulty": null,
        "db_id": "tvshow",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "prediction": null,
        "ground_truth": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/tvshow/tvshow.sqlite",
        "schema": "CREATE TABLE \"TV_Channel\" (\n    `id` text,  -- Unique identifier for the TV channel\n    `series_name` text,  -- Name of the TV series broadcasted on the channel\n    `Country` text,  -- Country where the TV channel is based or broadcasted\n    `Language` text,  -- Primary language of the TV channel's content\n    `Content` text,  -- Type or genre of content broadcasted by the channel\n    `Pixel_aspect_ratio_PAR` text,  -- Pixel aspect ratio used by the channel for broadcasting\n    `Hight_definition_TV` text,  -- Indicates whether the channel broadcasts in high definition\n    `Pay_per_view_PPV` text,  -- Indicates if the channel offers pay-per-view content\n    `Package_Option` text,  -- Subscription package options available for the channel\n    PRIMARY KEY (\"id\")\n) CREATE TABLE \"TV_series\" (\n    `id` real,  -- Unique identifier for the TV series episode\n    `Episode` text,  -- Title or name of the episode\n    `Air_Date` text,  -- Date when the episode was aired\n    `Rating` text,  -- Viewer rating of the episode\n    `Share` real,  -- Percentage of audience share for the episode\n    `18_49_Rating_Share` text,  -- Rating share among viewers aged 18-49\n    `Viewers_m` text,  -- Number of viewers in millions\n    `Weekly_Rank` real,  -- Rank of the episode in weekly viewership\n    `Channel` text,  -- Identifier of the channel that aired the episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n) CREATE TABLE \"Cartoon\" (\n    `id` real,  -- Unique identifier for the cartoon episode\n    `Title` text,  -- Title of the cartoon episode\n    `Directed_by` text,  -- Name of the director of the cartoon episode\n    `Written_by` text,  -- Name of the writer of the cartoon episode\n    `Original_air_date` text,  -- Date when the cartoon episode was originally aired\n    `Production_code` real,  -- Production code assigned to the cartoon episode\n    `Channel` text,  -- Identifier of the channel that aired the cartoon episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)"
    },
    {
        "question_id": 588,
        "difficulty": null,
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "prediction": null,
        "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/tvshow/tvshow.sqlite",
        "schema": "CREATE TABLE \"TV_Channel\" (\n    `id` text,  -- Unique identifier for the TV channel\n    `series_name` text,  -- Name of the TV series broadcasted on the channel\n    `Country` text,  -- Country where the TV channel is based or broadcasted\n    `Language` text,  -- Primary language of the TV channel's content\n    `Content` text,  -- Type or genre of content broadcasted by the channel\n    `Pixel_aspect_ratio_PAR` text,  -- Pixel aspect ratio used by the channel for broadcasting\n    `Hight_definition_TV` text,  -- Indicates whether the channel broadcasts in high definition\n    `Pay_per_view_PPV` text,  -- Indicates if the channel offers pay-per-view content\n    `Package_Option` text,  -- Subscription package options available for the channel\n    PRIMARY KEY (\"id\")\n) CREATE TABLE \"TV_series\" (\n    `id` real,  -- Unique identifier for the TV series episode\n    `Episode` text,  -- Title or name of the episode\n    `Air_Date` text,  -- Date when the episode was aired\n    `Rating` text,  -- Viewer rating of the episode\n    `Share` real,  -- Percentage of audience share for the episode\n    `18_49_Rating_Share` text,  -- Rating share among viewers aged 18-49\n    `Viewers_m` text,  -- Number of viewers in millions\n    `Weekly_Rank` real,  -- Rank of the episode in weekly viewership\n    `Channel` text,  -- Identifier of the channel that aired the episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n) CREATE TABLE \"Cartoon\" (\n    `id` real,  -- Unique identifier for the cartoon episode\n    `Title` text,  -- Title of the cartoon episode\n    `Directed_by` text,  -- Name of the director of the cartoon episode\n    `Written_by` text,  -- Name of the writer of the cartoon episode\n    `Original_air_date` text,  -- Date when the cartoon episode was originally aired\n    `Production_code` real,  -- Production code assigned to the cartoon episode\n    `Channel` text,  -- Identifier of the channel that aired the cartoon episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)"
    },
    {
        "question_id": 615,
        "difficulty": null,
        "db_id": "tvshow",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "prediction": null,
        "ground_truth": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/tvshow/tvshow.sqlite",
        "schema": "CREATE TABLE \"TV_Channel\" (\n    `id` text,  -- Unique identifier for the TV channel\n    `series_name` text,  -- Name of the TV series broadcasted on the channel\n    `Country` text,  -- Country where the TV channel is based or broadcasted\n    `Language` text,  -- Primary language of the TV channel's content\n    `Content` text,  -- Type or genre of content broadcasted by the channel\n    `Pixel_aspect_ratio_PAR` text,  -- Pixel aspect ratio used by the channel for broadcasting\n    `Hight_definition_TV` text,  -- Indicates whether the channel broadcasts in high definition\n    `Pay_per_view_PPV` text,  -- Indicates if the channel offers pay-per-view content\n    `Package_Option` text,  -- Subscription package options available for the channel\n    PRIMARY KEY (\"id\")\n) CREATE TABLE \"TV_series\" (\n    `id` real,  -- Unique identifier for the TV series episode\n    `Episode` text,  -- Title or name of the episode\n    `Air_Date` text,  -- Date when the episode was aired\n    `Rating` text,  -- Viewer rating of the episode\n    `Share` real,  -- Percentage of audience share for the episode\n    `18_49_Rating_Share` text,  -- Rating share among viewers aged 18-49\n    `Viewers_m` text,  -- Number of viewers in millions\n    `Weekly_Rank` real,  -- Rank of the episode in weekly viewership\n    `Channel` text,  -- Identifier of the channel that aired the episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n) CREATE TABLE \"Cartoon\" (\n    `id` real,  -- Unique identifier for the cartoon episode\n    `Title` text,  -- Title of the cartoon episode\n    `Directed_by` text,  -- Name of the director of the cartoon episode\n    `Written_by` text,  -- Name of the writer of the cartoon episode\n    `Original_air_date` text,  -- Date when the cartoon episode was originally aired\n    `Production_code` real,  -- Production code assigned to the cartoon episode\n    `Channel` text,  -- Identifier of the channel that aired the cartoon episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)"
    },
    {
        "question_id": 620,
        "difficulty": null,
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "prediction": null,
        "ground_truth": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/tvshow/tvshow.sqlite",
        "schema": "CREATE TABLE \"TV_Channel\" (\n    `id` text,  -- Unique identifier for the TV channel\n    `series_name` text,  -- Name of the TV series broadcasted on the channel\n    `Country` text,  -- Country where the TV channel is based or broadcasted\n    `Language` text,  -- Primary language of the TV channel's content\n    `Content` text,  -- Type or genre of content broadcasted by the channel\n    `Pixel_aspect_ratio_PAR` text,  -- Pixel aspect ratio used by the channel for broadcasting\n    `Hight_definition_TV` text,  -- Indicates whether the channel broadcasts in high definition\n    `Pay_per_view_PPV` text,  -- Indicates if the channel offers pay-per-view content\n    `Package_Option` text,  -- Subscription package options available for the channel\n    PRIMARY KEY (\"id\")\n) CREATE TABLE \"TV_series\" (\n    `id` real,  -- Unique identifier for the TV series episode\n    `Episode` text,  -- Title or name of the episode\n    `Air_Date` text,  -- Date when the episode was aired\n    `Rating` text,  -- Viewer rating of the episode\n    `Share` real,  -- Percentage of audience share for the episode\n    `18_49_Rating_Share` text,  -- Rating share among viewers aged 18-49\n    `Viewers_m` text,  -- Number of viewers in millions\n    `Weekly_Rank` real,  -- Rank of the episode in weekly viewership\n    `Channel` text,  -- Identifier of the channel that aired the episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n) CREATE TABLE \"Cartoon\" (\n    `id` real,  -- Unique identifier for the cartoon episode\n    `Title` text,  -- Title of the cartoon episode\n    `Directed_by` text,  -- Name of the director of the cartoon episode\n    `Written_by` text,  -- Name of the writer of the cartoon episode\n    `Original_air_date` text,  -- Date when the cartoon episode was originally aired\n    `Production_code` real,  -- Production code assigned to the cartoon episode\n    `Channel` text,  -- Identifier of the channel that aired the cartoon episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)"
    },
    {
        "question_id": 605,
        "difficulty": null,
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "prediction": null,
        "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/tvshow/tvshow.sqlite",
        "schema": "CREATE TABLE \"TV_Channel\" (\n    `id` text,  -- Unique identifier for the TV channel\n    `series_name` text,  -- Name of the TV series broadcasted on the channel\n    `Country` text,  -- Country where the TV channel is based or broadcasted\n    `Language` text,  -- Primary language of the TV channel's content\n    `Content` text,  -- Type or genre of content broadcasted by the channel\n    `Pixel_aspect_ratio_PAR` text,  -- Pixel aspect ratio used by the channel for broadcasting\n    `Hight_definition_TV` text,  -- Indicates whether the channel broadcasts in high definition\n    `Pay_per_view_PPV` text,  -- Indicates if the channel offers pay-per-view content\n    `Package_Option` text,  -- Subscription package options available for the channel\n    PRIMARY KEY (\"id\")\n) CREATE TABLE \"TV_series\" (\n    `id` real,  -- Unique identifier for the TV series episode\n    `Episode` text,  -- Title or name of the episode\n    `Air_Date` text,  -- Date when the episode was aired\n    `Rating` text,  -- Viewer rating of the episode\n    `Share` real,  -- Percentage of audience share for the episode\n    `18_49_Rating_Share` text,  -- Rating share among viewers aged 18-49\n    `Viewers_m` text,  -- Number of viewers in millions\n    `Weekly_Rank` real,  -- Rank of the episode in weekly viewership\n    `Channel` text,  -- Identifier of the channel that aired the episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n) CREATE TABLE \"Cartoon\" (\n    `id` real,  -- Unique identifier for the cartoon episode\n    `Title` text,  -- Title of the cartoon episode\n    `Directed_by` text,  -- Name of the director of the cartoon episode\n    `Written_by` text,  -- Name of the writer of the cartoon episode\n    `Original_air_date` text,  -- Date when the cartoon episode was originally aired\n    `Production_code` real,  -- Production code assigned to the cartoon episode\n    `Channel` text,  -- Identifier of the channel that aired the cartoon episode\n    PRIMARY KEY (\"id\"),\n    FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)"
    },
    {
        "question_id": 651,
        "difficulty": null,
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "prediction": null,
        "ground_truth": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/poker_player/poker_player.sqlite",
        "schema": "CREATE TABLE \"poker_player\" (\n    \"Poker_Player_ID\" int,  -- Unique identifier for the poker player\n    \"People_ID\" int,  -- Identifier linking to the person in the people table\n    \"Final_Table_Made\" real,  -- Number of times the player has reached the final table in tournaments\n    \"Best_Finish\" real,  -- Best finishing position achieved by the player in a tournament\n    \"Money_Rank\" real,  -- Player's rank based on tournament earnings\n    \"Earnings\" real,  -- Total earnings of the player from poker tournaments\n    PRIMARY KEY (\"Poker_Player_ID\"),  -- Ensures each poker player has a unique identifier\n    FOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")  -- Establishes a relationship with the people table\n) \nCREATE TABLE \"people\" (\n    \"People_ID\" int,  -- Unique identifier for the person\n    \"Nationality\" text,  -- Nationality of the person\n    \"Name\" text,  -- Full name of the person\n    \"Birth_Date\" text,  -- Birth date of the person\n    \"Height\" real,  -- Height of the person in meters\n    PRIMARY KEY (\"People_ID\")  -- Ensures each person has a unique identifier\n)"
    },
    {
        "question_id": 670,
        "difficulty": null,
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "prediction": null,
        "ground_truth": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/poker_player/poker_player.sqlite",
        "schema": "CREATE TABLE \"poker_player\" (\n    \"Poker_Player_ID\" int,  -- Unique identifier for the poker player\n    \"People_ID\" int,  -- Identifier linking to the person in the people table\n    \"Final_Table_Made\" real,  -- Number of times the player has reached the final table in tournaments\n    \"Best_Finish\" real,  -- Best finishing position achieved by the player in a tournament\n    \"Money_Rank\" real,  -- Player's rank based on tournament earnings\n    \"Earnings\" real,  -- Total earnings of the player from poker tournaments\n    PRIMARY KEY (\"Poker_Player_ID\"),  -- Ensures each poker player has a unique identifier\n    FOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")  -- Establishes a relationship with the people table\n) \nCREATE TABLE \"people\" (\n    \"People_ID\" int,  -- Unique identifier for the person\n    \"Nationality\" text,  -- Nationality of the person\n    \"Name\" text,  -- Full name of the person\n    \"Birth_Date\" text,  -- Birth date of the person\n    \"Height\" real,  -- Height of the person in meters\n    PRIMARY KEY (\"People_ID\")  -- Ensures each person has a unique identifier\n)"
    },
    {
        "question_id": 683,
        "difficulty": null,
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "prediction": null,
        "ground_truth": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/poker_player/poker_player.sqlite",
        "schema": "CREATE TABLE \"poker_player\" (\n    \"Poker_Player_ID\" int,  -- Unique identifier for the poker player\n    \"People_ID\" int,  -- Identifier linking to the person in the people table\n    \"Final_Table_Made\" real,  -- Number of times the player has reached the final table in tournaments\n    \"Best_Finish\" real,  -- Best finishing position achieved by the player in a tournament\n    \"Money_Rank\" real,  -- Player's rank based on tournament earnings\n    \"Earnings\" real,  -- Total earnings of the player from poker tournaments\n    PRIMARY KEY (\"Poker_Player_ID\"),  -- Ensures each poker player has a unique identifier\n    FOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")  -- Establishes a relationship with the people table\n) \nCREATE TABLE \"people\" (\n    \"People_ID\" int,  -- Unique identifier for the person\n    \"Nationality\" text,  -- Nationality of the person\n    \"Name\" text,  -- Full name of the person\n    \"Birth_Date\" text,  -- Birth date of the person\n    \"Height\" real,  -- Height of the person in meters\n    PRIMARY KEY (\"People_ID\")  -- Ensures each person has a unique identifier\n)"
    },
    {
        "question_id": 649,
        "difficulty": null,
        "db_id": "poker_player",
        "question": "List the earnings of poker players in descending order.",
        "prediction": null,
        "ground_truth": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/poker_player/poker_player.sqlite",
        "schema": "CREATE TABLE \"poker_player\" (\n    \"Poker_Player_ID\" int,  -- Unique identifier for the poker player\n    \"People_ID\" int,  -- Identifier linking to the person in the people table\n    \"Final_Table_Made\" real,  -- Number of times the player has reached the final table in tournaments\n    \"Best_Finish\" real,  -- Best finishing position achieved by the player in a tournament\n    \"Money_Rank\" real,  -- Player's rank based on tournament earnings\n    \"Earnings\" real,  -- Total earnings of the player from poker tournaments\n    PRIMARY KEY (\"Poker_Player_ID\"),  -- Ensures each poker player has a unique identifier\n    FOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")  -- Establishes a relationship with the people table\n) \nCREATE TABLE \"people\" (\n    \"People_ID\" int,  -- Unique identifier for the person\n    \"Nationality\" text,  -- Nationality of the person\n    \"Name\" text,  -- Full name of the person\n    \"Birth_Date\" text,  -- Birth date of the person\n    \"Height\" real,  -- Height of the person in meters\n    PRIMARY KEY (\"People_ID\")  -- Ensures each person has a unique identifier\n)"
    },
    {
        "question_id": 654,
        "difficulty": null,
        "db_id": "poker_player",
        "question": "Return the average earnings across all poker players.",
        "prediction": null,
        "ground_truth": "SELECT avg(Earnings) FROM poker_player",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/poker_player/poker_player.sqlite",
        "schema": "CREATE TABLE \"poker_player\" (\n    \"Poker_Player_ID\" int,  -- Unique identifier for the poker player\n    \"People_ID\" int,  -- Identifier linking to the person in the people table\n    \"Final_Table_Made\" real,  -- Number of times the player has reached the final table in tournaments\n    \"Best_Finish\" real,  -- Best finishing position achieved by the player in a tournament\n    \"Money_Rank\" real,  -- Player's rank based on tournament earnings\n    \"Earnings\" real,  -- Total earnings of the player from poker tournaments\n    PRIMARY KEY (\"Poker_Player_ID\"),  -- Ensures each poker player has a unique identifier\n    FOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")  -- Establishes a relationship with the people table\n) \nCREATE TABLE \"people\" (\n    \"People_ID\" int,  -- Unique identifier for the person\n    \"Nationality\" text,  -- Nationality of the person\n    \"Name\" text,  -- Full name of the person\n    \"Birth_Date\" text,  -- Birth date of the person\n    \"Height\" real,  -- Height of the person in meters\n    PRIMARY KEY (\"People_ID\")  -- Ensures each person has a unique identifier\n)"
    },
    {
        "question_id": 689,
        "difficulty": null,
        "db_id": "voter_1",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "prediction": null,
        "ground_truth": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/voter_1/voter_1.sqlite",
        "schema": "CREATE TABLE `AREA_CODE_STATE` (\n    `area_code` integer NOT NULL,  -- Unique identifier for the area code\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state associated with the area code\n    PRIMARY KEY (`area_code`)\n) \nCREATE TABLE `CONTESTANTS` (\n    `contestant_number` integer,  -- Unique identifier for each contestant\n    `contestant_name` varchar(50) NOT NULL,  -- Name of the contestant\n    PRIMARY KEY (`contestant_number`)\n) \nCREATE TABLE `VOTES` (\n    `vote_id` integer NOT NULL PRIMARY KEY,  -- Unique identifier for each vote\n    `phone_number` integer NOT NULL,  -- Phone number from which the vote was cast\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state from which the vote was cast\n    `contestant_number` integer NOT NULL,  -- Identifier of the contestant receiving the vote\n    `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Timestamp when the vote was recorded\n    FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`),  -- Foreign key linking to the state in AREA_CODE_STATE table\n    FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)  -- Foreign key linking to the contestant in CONTESTANTS table\n)"
    },
    {
        "question_id": 693,
        "difficulty": null,
        "db_id": "voter_1",
        "question": "What are the distinct states and create time of all votes?",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT state ,  created FROM votes",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/voter_1/voter_1.sqlite",
        "schema": "CREATE TABLE `AREA_CODE_STATE` (\n    `area_code` integer NOT NULL,  -- Unique identifier for the area code\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state associated with the area code\n    PRIMARY KEY (`area_code`)\n) \nCREATE TABLE `CONTESTANTS` (\n    `contestant_number` integer,  -- Unique identifier for each contestant\n    `contestant_name` varchar(50) NOT NULL,  -- Name of the contestant\n    PRIMARY KEY (`contestant_number`)\n) \nCREATE TABLE `VOTES` (\n    `vote_id` integer NOT NULL PRIMARY KEY,  -- Unique identifier for each vote\n    `phone_number` integer NOT NULL,  -- Phone number from which the vote was cast\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state from which the vote was cast\n    `contestant_number` integer NOT NULL,  -- Identifier of the contestant receiving the vote\n    `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Timestamp when the vote was recorded\n    FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`),  -- Foreign key linking to the state in AREA_CODE_STATE table\n    FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)  -- Foreign key linking to the contestant in CONTESTANTS table\n)"
    },
    {
        "question_id": 690,
        "difficulty": null,
        "db_id": "voter_1",
        "question": "What are the maximum and minimum values of area codes?",
        "prediction": null,
        "ground_truth": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/voter_1/voter_1.sqlite",
        "schema": "CREATE TABLE `AREA_CODE_STATE` (\n    `area_code` integer NOT NULL,  -- Unique identifier for the area code\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state associated with the area code\n    PRIMARY KEY (`area_code`)\n) \nCREATE TABLE `CONTESTANTS` (\n    `contestant_number` integer,  -- Unique identifier for each contestant\n    `contestant_name` varchar(50) NOT NULL,  -- Name of the contestant\n    PRIMARY KEY (`contestant_number`)\n) \nCREATE TABLE `VOTES` (\n    `vote_id` integer NOT NULL PRIMARY KEY,  -- Unique identifier for each vote\n    `phone_number` integer NOT NULL,  -- Phone number from which the vote was cast\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state from which the vote was cast\n    `contestant_number` integer NOT NULL,  -- Identifier of the contestant receiving the vote\n    `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Timestamp when the vote was recorded\n    FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`),  -- Foreign key linking to the state in AREA_CODE_STATE table\n    FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)  -- Foreign key linking to the contestant in CONTESTANTS table\n)"
    },
    {
        "question_id": 692,
        "difficulty": null,
        "db_id": "voter_1",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "prediction": null,
        "ground_truth": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/voter_1/voter_1.sqlite",
        "schema": "CREATE TABLE `AREA_CODE_STATE` (\n    `area_code` integer NOT NULL,  -- Unique identifier for the area code\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state associated with the area code\n    PRIMARY KEY (`area_code`)\n) \nCREATE TABLE `CONTESTANTS` (\n    `contestant_number` integer,  -- Unique identifier for each contestant\n    `contestant_name` varchar(50) NOT NULL,  -- Name of the contestant\n    PRIMARY KEY (`contestant_number`)\n) \nCREATE TABLE `VOTES` (\n    `vote_id` integer NOT NULL PRIMARY KEY,  -- Unique identifier for each vote\n    `phone_number` integer NOT NULL,  -- Phone number from which the vote was cast\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state from which the vote was cast\n    `contestant_number` integer NOT NULL,  -- Identifier of the contestant receiving the vote\n    `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Timestamp when the vote was recorded\n    FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`),  -- Foreign key linking to the state in AREA_CODE_STATE table\n    FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)  -- Foreign key linking to the contestant in CONTESTANTS table\n)"
    },
    {
        "question_id": 696,
        "difficulty": null,
        "db_id": "voter_1",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/voter_1/voter_1.sqlite",
        "schema": "CREATE TABLE `AREA_CODE_STATE` (\n    `area_code` integer NOT NULL,  -- Unique identifier for the area code\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state associated with the area code\n    PRIMARY KEY (`area_code`)\n) \nCREATE TABLE `CONTESTANTS` (\n    `contestant_number` integer,  -- Unique identifier for each contestant\n    `contestant_name` varchar(50) NOT NULL,  -- Name of the contestant\n    PRIMARY KEY (`contestant_number`)\n) \nCREATE TABLE `VOTES` (\n    `vote_id` integer NOT NULL PRIMARY KEY,  -- Unique identifier for each vote\n    `phone_number` integer NOT NULL,  -- Phone number from which the vote was cast\n    `state` varchar(2) NOT NULL,  -- Abbreviation of the state from which the vote was cast\n    `contestant_number` integer NOT NULL,  -- Identifier of the contestant receiving the vote\n    `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- Timestamp when the vote was recorded\n    FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`),  -- Foreign key linking to the state in AREA_CODE_STATE table\n    FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)  -- Foreign key linking to the contestant in CONTESTANTS table\n)"
    },
    {
        "question_id": 809,
        "difficulty": null,
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "prediction": null,
        "ground_truth": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/world_1/world_1.sqlite",
        "schema": "CREATE TABLE `city` (\n    `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the city\n    `Name` char(35) NOT NULL DEFAULT '',  -- Name of the city\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 country code associated with the city\n    `District` char(20) NOT NULL DEFAULT '',  -- Administrative district or region where the city is located\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the city\n    CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n) \nCREATE TABLE `country` (\n    `Code` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code representing the country\n    `Name` char(52) NOT NULL DEFAULT '',  -- Official name of the country\n    `Continent` text NOT NULL DEFAULT 'Asia',  -- Continent on which the country is located\n    `Region` char(26) NOT NULL DEFAULT '',  -- Geographical region within the continent\n    `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00',  -- Total land area of the country in square kilometers\n    `IndepYear` integer DEFAULT NULL,  -- Year in which the country gained independence\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the country\n    `LifeExpectancy` float(3,1) DEFAULT NULL,  -- Average life expectancy of the population in years\n    `GNP` float(10,2) DEFAULT NULL,  -- Gross National Product of the country in millions of dollars\n    `GNPOld` float(10,2) DEFAULT NULL,  -- Previous year's Gross National Product in millions of dollars\n    `LocalName` char(45) NOT NULL DEFAULT '',  -- Local name of the country\n    `GovernmentForm` char(45) NOT NULL DEFAULT '',  -- Type of government in the country\n    `HeadOfState` char(60) DEFAULT NULL,  -- Name of the current head of state\n    `Capital` integer DEFAULT NULL,  -- ID of the capital city, referencing the `city` table\n    `Code2` char(2) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-2 code representing the country\n    PRIMARY KEY (`Code`)\n) \nCREATE TABLE `countrylanguage` (\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code of the country where the language is spoken\n    `Language` char(30) NOT NULL DEFAULT '',  -- Name of the language spoken in the country\n    `IsOfficial` text NOT NULL DEFAULT 'F',  -- Indicates whether the language is an official language of the country ('T' for true, 'F' for false)\n    `Percentage` float(4,1) NOT NULL DEFAULT '0.0',  -- Percentage of the population that speaks the language\n    PRIMARY KEY (`CountryCode`,`Language`),  \n    CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)"
    },
    {
        "question_id": 739,
        "difficulty": null,
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "prediction": null,
        "ground_truth": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/world_1/world_1.sqlite",
        "schema": "CREATE TABLE `city` (\n    `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the city\n    `Name` char(35) NOT NULL DEFAULT '',  -- Name of the city\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 country code associated with the city\n    `District` char(20) NOT NULL DEFAULT '',  -- Administrative district or region where the city is located\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the city\n    CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n) \nCREATE TABLE `country` (\n    `Code` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code representing the country\n    `Name` char(52) NOT NULL DEFAULT '',  -- Official name of the country\n    `Continent` text NOT NULL DEFAULT 'Asia',  -- Continent on which the country is located\n    `Region` char(26) NOT NULL DEFAULT '',  -- Geographical region within the continent\n    `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00',  -- Total land area of the country in square kilometers\n    `IndepYear` integer DEFAULT NULL,  -- Year in which the country gained independence\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the country\n    `LifeExpectancy` float(3,1) DEFAULT NULL,  -- Average life expectancy of the population in years\n    `GNP` float(10,2) DEFAULT NULL,  -- Gross National Product of the country in millions of dollars\n    `GNPOld` float(10,2) DEFAULT NULL,  -- Previous year's Gross National Product in millions of dollars\n    `LocalName` char(45) NOT NULL DEFAULT '',  -- Local name of the country\n    `GovernmentForm` char(45) NOT NULL DEFAULT '',  -- Type of government in the country\n    `HeadOfState` char(60) DEFAULT NULL,  -- Name of the current head of state\n    `Capital` integer DEFAULT NULL,  -- ID of the capital city, referencing the `city` table\n    `Code2` char(2) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-2 code representing the country\n    PRIMARY KEY (`Code`)\n) \nCREATE TABLE `countrylanguage` (\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code of the country where the language is spoken\n    `Language` char(30) NOT NULL DEFAULT '',  -- Name of the language spoken in the country\n    `IsOfficial` text NOT NULL DEFAULT 'F',  -- Indicates whether the language is an official language of the country ('T' for true, 'F' for false)\n    `Percentage` float(4,1) NOT NULL DEFAULT '0.0',  -- Percentage of the population that speaks the language\n    PRIMARY KEY (`CountryCode`,`Language`),  \n    CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)"
    },
    {
        "question_id": 741,
        "difficulty": null,
        "db_id": "world_1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "prediction": null,
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/world_1/world_1.sqlite",
        "schema": "CREATE TABLE `city` (\n    `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the city\n    `Name` char(35) NOT NULL DEFAULT '',  -- Name of the city\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 country code associated with the city\n    `District` char(20) NOT NULL DEFAULT '',  -- Administrative district or region where the city is located\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the city\n    CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n) \nCREATE TABLE `country` (\n    `Code` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code representing the country\n    `Name` char(52) NOT NULL DEFAULT '',  -- Official name of the country\n    `Continent` text NOT NULL DEFAULT 'Asia',  -- Continent on which the country is located\n    `Region` char(26) NOT NULL DEFAULT '',  -- Geographical region within the continent\n    `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00',  -- Total land area of the country in square kilometers\n    `IndepYear` integer DEFAULT NULL,  -- Year in which the country gained independence\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the country\n    `LifeExpectancy` float(3,1) DEFAULT NULL,  -- Average life expectancy of the population in years\n    `GNP` float(10,2) DEFAULT NULL,  -- Gross National Product of the country in millions of dollars\n    `GNPOld` float(10,2) DEFAULT NULL,  -- Previous year's Gross National Product in millions of dollars\n    `LocalName` char(45) NOT NULL DEFAULT '',  -- Local name of the country\n    `GovernmentForm` char(45) NOT NULL DEFAULT '',  -- Type of government in the country\n    `HeadOfState` char(60) DEFAULT NULL,  -- Name of the current head of state\n    `Capital` integer DEFAULT NULL,  -- ID of the capital city, referencing the `city` table\n    `Code2` char(2) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-2 code representing the country\n    PRIMARY KEY (`Code`)\n) \nCREATE TABLE `countrylanguage` (\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code of the country where the language is spoken\n    `Language` char(30) NOT NULL DEFAULT '',  -- Name of the language spoken in the country\n    `IsOfficial` text NOT NULL DEFAULT 'F',  -- Indicates whether the language is an official language of the country ('T' for true, 'F' for false)\n    `Percentage` float(4,1) NOT NULL DEFAULT '0.0',  -- Percentage of the population that speaks the language\n    PRIMARY KEY (`CountryCode`,`Language`),  \n    CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)"
    },
    {
        "question_id": 719,
        "difficulty": null,
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "prediction": null,
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/world_1/world_1.sqlite",
        "schema": "CREATE TABLE `city` (\n    `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the city\n    `Name` char(35) NOT NULL DEFAULT '',  -- Name of the city\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 country code associated with the city\n    `District` char(20) NOT NULL DEFAULT '',  -- Administrative district or region where the city is located\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the city\n    CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n) \nCREATE TABLE `country` (\n    `Code` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code representing the country\n    `Name` char(52) NOT NULL DEFAULT '',  -- Official name of the country\n    `Continent` text NOT NULL DEFAULT 'Asia',  -- Continent on which the country is located\n    `Region` char(26) NOT NULL DEFAULT '',  -- Geographical region within the continent\n    `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00',  -- Total land area of the country in square kilometers\n    `IndepYear` integer DEFAULT NULL,  -- Year in which the country gained independence\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the country\n    `LifeExpectancy` float(3,1) DEFAULT NULL,  -- Average life expectancy of the population in years\n    `GNP` float(10,2) DEFAULT NULL,  -- Gross National Product of the country in millions of dollars\n    `GNPOld` float(10,2) DEFAULT NULL,  -- Previous year's Gross National Product in millions of dollars\n    `LocalName` char(45) NOT NULL DEFAULT '',  -- Local name of the country\n    `GovernmentForm` char(45) NOT NULL DEFAULT '',  -- Type of government in the country\n    `HeadOfState` char(60) DEFAULT NULL,  -- Name of the current head of state\n    `Capital` integer DEFAULT NULL,  -- ID of the capital city, referencing the `city` table\n    `Code2` char(2) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-2 code representing the country\n    PRIMARY KEY (`Code`)\n) \nCREATE TABLE `countrylanguage` (\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code of the country where the language is spoken\n    `Language` char(30) NOT NULL DEFAULT '',  -- Name of the language spoken in the country\n    `IsOfficial` text NOT NULL DEFAULT 'F',  -- Indicates whether the language is an official language of the country ('T' for true, 'F' for false)\n    `Percentage` float(4,1) NOT NULL DEFAULT '0.0',  -- Percentage of the population that speaks the language\n    PRIMARY KEY (`CountryCode`,`Language`),  \n    CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)"
    },
    {
        "question_id": 754,
        "difficulty": null,
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "prediction": null,
        "ground_truth": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/world_1/world_1.sqlite",
        "schema": "CREATE TABLE `city` (\n    `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for the city\n    `Name` char(35) NOT NULL DEFAULT '',  -- Name of the city\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 country code associated with the city\n    `District` char(20) NOT NULL DEFAULT '',  -- Administrative district or region where the city is located\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the city\n    CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n) \nCREATE TABLE `country` (\n    `Code` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code representing the country\n    `Name` char(52) NOT NULL DEFAULT '',  -- Official name of the country\n    `Continent` text NOT NULL DEFAULT 'Asia',  -- Continent on which the country is located\n    `Region` char(26) NOT NULL DEFAULT '',  -- Geographical region within the continent\n    `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00',  -- Total land area of the country in square kilometers\n    `IndepYear` integer DEFAULT NULL,  -- Year in which the country gained independence\n    `Population` integer NOT NULL DEFAULT '0',  -- Total population of the country\n    `LifeExpectancy` float(3,1) DEFAULT NULL,  -- Average life expectancy of the population in years\n    `GNP` float(10,2) DEFAULT NULL,  -- Gross National Product of the country in millions of dollars\n    `GNPOld` float(10,2) DEFAULT NULL,  -- Previous year's Gross National Product in millions of dollars\n    `LocalName` char(45) NOT NULL DEFAULT '',  -- Local name of the country\n    `GovernmentForm` char(45) NOT NULL DEFAULT '',  -- Type of government in the country\n    `HeadOfState` char(60) DEFAULT NULL,  -- Name of the current head of state\n    `Capital` integer DEFAULT NULL,  -- ID of the capital city, referencing the `city` table\n    `Code2` char(2) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-2 code representing the country\n    PRIMARY KEY (`Code`)\n) \nCREATE TABLE `countrylanguage` (\n    `CountryCode` char(3) NOT NULL DEFAULT '',  -- ISO 3166-1 alpha-3 code of the country where the language is spoken\n    `Language` char(30) NOT NULL DEFAULT '',  -- Name of the language spoken in the country\n    `IsOfficial` text NOT NULL DEFAULT 'F',  -- Indicates whether the language is an official language of the country ('T' for true, 'F' for false)\n    `Percentage` float(4,1) NOT NULL DEFAULT '0.0',  -- Percentage of the population that speaks the language\n    PRIMARY KEY (`CountryCode`,`Language`),  \n    CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)"
    },
    {
        "question_id": 850,
        "difficulty": null,
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "prediction": null,
        "ground_truth": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/orchestra/orchestra.sqlite",
        "schema": "CREATE TABLE \"conductor\" (\n    \"Conductor_ID\" int,  -- Unique identifier for the conductor\n    \"Name\" text,  -- Full name of the conductor\n    \"Age\" int,  -- Age of the conductor\n    \"Nationality\" text,  -- Nationality of the conductor\n    \"Year_of_Work\" int,  -- Number of years the conductor has been working\n    PRIMARY KEY (\"Conductor_ID\")\n)\nCREATE TABLE \"orchestra\" (\n    \"Orchestra_ID\" int,  -- Unique identifier for the orchestra\n    \"Orchestra\" text,  -- Name of the orchestra\n    \"Conductor_ID\" int,  -- Identifier for the conductor associated with the orchestra\n    \"Record_Company\" text,  -- Name of the record company associated with the orchestra\n    \"Year_of_Founded\" real,  -- Year the orchestra was founded\n    \"Major_Record_Format\" text,  -- Primary format in which the orchestra's records are produced\n    PRIMARY KEY (\"Orchestra_ID\"),\n    FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\nCREATE TABLE \"performance\" (\n    \"Performance_ID\" int,  -- Unique identifier for the performance\n    \"Orchestra_ID\" int,  -- Identifier for the orchestra performing\n    \"Type\" text,  -- Type or genre of the performance\n    \"Date\" text,  -- Date of the performance\n    \"Official_ratings_(millions)\" real,  -- Official ratings of the performance in millions\n    \"Weekly_rank\" text,  -- Weekly ranking of the performance\n    \"Share\" text,  -- Share of the audience or market captured by the performance\n    PRIMARY KEY (\"Performance_ID\"),\n    FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\nCREATE TABLE \"show\" (\n    \"Show_ID\" int,  -- Unique identifier for the show\n    \"Performance_ID\" int,  -- Identifier for the performance associated with the show\n    \"If_first_show\" bool,  -- Indicator of whether this is the first show (true/false)\n    \"Result\" text,  -- Outcome or result of the show\n    \"Attendance\" real,  -- Number of attendees at the show\n    FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)"
    },
    {
        "question_id": 841,
        "difficulty": null,
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "prediction": null,
        "ground_truth": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/orchestra/orchestra.sqlite",
        "schema": "CREATE TABLE \"conductor\" (\n    \"Conductor_ID\" int,  -- Unique identifier for the conductor\n    \"Name\" text,  -- Full name of the conductor\n    \"Age\" int,  -- Age of the conductor\n    \"Nationality\" text,  -- Nationality of the conductor\n    \"Year_of_Work\" int,  -- Number of years the conductor has been working\n    PRIMARY KEY (\"Conductor_ID\")\n)\nCREATE TABLE \"orchestra\" (\n    \"Orchestra_ID\" int,  -- Unique identifier for the orchestra\n    \"Orchestra\" text,  -- Name of the orchestra\n    \"Conductor_ID\" int,  -- Identifier for the conductor associated with the orchestra\n    \"Record_Company\" text,  -- Name of the record company associated with the orchestra\n    \"Year_of_Founded\" real,  -- Year the orchestra was founded\n    \"Major_Record_Format\" text,  -- Primary format in which the orchestra's records are produced\n    PRIMARY KEY (\"Orchestra_ID\"),\n    FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\nCREATE TABLE \"performance\" (\n    \"Performance_ID\" int,  -- Unique identifier for the performance\n    \"Orchestra_ID\" int,  -- Identifier for the orchestra performing\n    \"Type\" text,  -- Type or genre of the performance\n    \"Date\" text,  -- Date of the performance\n    \"Official_ratings_(millions)\" real,  -- Official ratings of the performance in millions\n    \"Weekly_rank\" text,  -- Weekly ranking of the performance\n    \"Share\" text,  -- Share of the audience or market captured by the performance\n    PRIMARY KEY (\"Performance_ID\"),\n    FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\nCREATE TABLE \"show\" (\n    \"Show_ID\" int,  -- Unique identifier for the show\n    \"Performance_ID\" int,  -- Identifier for the performance associated with the show\n    \"If_first_show\" bool,  -- Indicator of whether this is the first show (true/false)\n    \"Result\" text,  -- Outcome or result of the show\n    \"Attendance\" real,  -- Number of attendees at the show\n    FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)"
    },
    {
        "question_id": 836,
        "difficulty": null,
        "db_id": "orchestra",
        "question": "List names of conductors in descending order of years of work.",
        "prediction": null,
        "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/orchestra/orchestra.sqlite",
        "schema": "CREATE TABLE \"conductor\" (\n    \"Conductor_ID\" int,  -- Unique identifier for the conductor\n    \"Name\" text,  -- Full name of the conductor\n    \"Age\" int,  -- Age of the conductor\n    \"Nationality\" text,  -- Nationality of the conductor\n    \"Year_of_Work\" int,  -- Number of years the conductor has been working\n    PRIMARY KEY (\"Conductor_ID\")\n)\nCREATE TABLE \"orchestra\" (\n    \"Orchestra_ID\" int,  -- Unique identifier for the orchestra\n    \"Orchestra\" text,  -- Name of the orchestra\n    \"Conductor_ID\" int,  -- Identifier for the conductor associated with the orchestra\n    \"Record_Company\" text,  -- Name of the record company associated with the orchestra\n    \"Year_of_Founded\" real,  -- Year the orchestra was founded\n    \"Major_Record_Format\" text,  -- Primary format in which the orchestra's records are produced\n    PRIMARY KEY (\"Orchestra_ID\"),\n    FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\nCREATE TABLE \"performance\" (\n    \"Performance_ID\" int,  -- Unique identifier for the performance\n    \"Orchestra_ID\" int,  -- Identifier for the orchestra performing\n    \"Type\" text,  -- Type or genre of the performance\n    \"Date\" text,  -- Date of the performance\n    \"Official_ratings_(millions)\" real,  -- Official ratings of the performance in millions\n    \"Weekly_rank\" text,  -- Weekly ranking of the performance\n    \"Share\" text,  -- Share of the audience or market captured by the performance\n    PRIMARY KEY (\"Performance_ID\"),\n    FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\nCREATE TABLE \"show\" (\n    \"Show_ID\" int,  -- Unique identifier for the show\n    \"Performance_ID\" int,  -- Identifier for the performance associated with the show\n    \"If_first_show\" bool,  -- Indicator of whether this is the first show (true/false)\n    \"Result\" text,  -- Outcome or result of the show\n    \"Attendance\" real,  -- Number of attendees at the show\n    FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)"
    },
    {
        "question_id": 854,
        "difficulty": null,
        "db_id": "orchestra",
        "question": "List the names of orchestras that have no performance.",
        "prediction": null,
        "ground_truth": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/orchestra/orchestra.sqlite",
        "schema": "CREATE TABLE \"conductor\" (\n    \"Conductor_ID\" int,  -- Unique identifier for the conductor\n    \"Name\" text,  -- Full name of the conductor\n    \"Age\" int,  -- Age of the conductor\n    \"Nationality\" text,  -- Nationality of the conductor\n    \"Year_of_Work\" int,  -- Number of years the conductor has been working\n    PRIMARY KEY (\"Conductor_ID\")\n)\nCREATE TABLE \"orchestra\" (\n    \"Orchestra_ID\" int,  -- Unique identifier for the orchestra\n    \"Orchestra\" text,  -- Name of the orchestra\n    \"Conductor_ID\" int,  -- Identifier for the conductor associated with the orchestra\n    \"Record_Company\" text,  -- Name of the record company associated with the orchestra\n    \"Year_of_Founded\" real,  -- Year the orchestra was founded\n    \"Major_Record_Format\" text,  -- Primary format in which the orchestra's records are produced\n    PRIMARY KEY (\"Orchestra_ID\"),\n    FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\nCREATE TABLE \"performance\" (\n    \"Performance_ID\" int,  -- Unique identifier for the performance\n    \"Orchestra_ID\" int,  -- Identifier for the orchestra performing\n    \"Type\" text,  -- Type or genre of the performance\n    \"Date\" text,  -- Date of the performance\n    \"Official_ratings_(millions)\" real,  -- Official ratings of the performance in millions\n    \"Weekly_rank\" text,  -- Weekly ranking of the performance\n    \"Share\" text,  -- Share of the audience or market captured by the performance\n    PRIMARY KEY (\"Performance_ID\"),\n    FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\nCREATE TABLE \"show\" (\n    \"Show_ID\" int,  -- Unique identifier for the show\n    \"Performance_ID\" int,  -- Identifier for the performance associated with the show\n    \"If_first_show\" bool,  -- Indicator of whether this is the first show (true/false)\n    \"Result\" text,  -- Outcome or result of the show\n    \"Attendance\" real,  -- Number of attendees at the show\n    FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)"
    },
    {
        "question_id": 833,
        "difficulty": null,
        "db_id": "orchestra",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "prediction": null,
        "ground_truth": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/orchestra/orchestra.sqlite",
        "schema": "CREATE TABLE \"conductor\" (\n    \"Conductor_ID\" int,  -- Unique identifier for the conductor\n    \"Name\" text,  -- Full name of the conductor\n    \"Age\" int,  -- Age of the conductor\n    \"Nationality\" text,  -- Nationality of the conductor\n    \"Year_of_Work\" int,  -- Number of years the conductor has been working\n    PRIMARY KEY (\"Conductor_ID\")\n)\nCREATE TABLE \"orchestra\" (\n    \"Orchestra_ID\" int,  -- Unique identifier for the orchestra\n    \"Orchestra\" text,  -- Name of the orchestra\n    \"Conductor_ID\" int,  -- Identifier for the conductor associated with the orchestra\n    \"Record_Company\" text,  -- Name of the record company associated with the orchestra\n    \"Year_of_Founded\" real,  -- Year the orchestra was founded\n    \"Major_Record_Format\" text,  -- Primary format in which the orchestra's records are produced\n    PRIMARY KEY (\"Orchestra_ID\"),\n    FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\nCREATE TABLE \"performance\" (\n    \"Performance_ID\" int,  -- Unique identifier for the performance\n    \"Orchestra_ID\" int,  -- Identifier for the orchestra performing\n    \"Type\" text,  -- Type or genre of the performance\n    \"Date\" text,  -- Date of the performance\n    \"Official_ratings_(millions)\" real,  -- Official ratings of the performance in millions\n    \"Weekly_rank\" text,  -- Weekly ranking of the performance\n    \"Share\" text,  -- Share of the audience or market captured by the performance\n    PRIMARY KEY (\"Performance_ID\"),\n    FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\nCREATE TABLE \"show\" (\n    \"Show_ID\" int,  -- Unique identifier for the show\n    \"Performance_ID\" int,  -- Identifier for the performance associated with the show\n    \"If_first_show\" bool,  -- Indicator of whether this is the first show (true/false)\n    \"Result\" text,  -- Outcome or result of the show\n    \"Attendance\" real,  -- Number of attendees at the show\n    FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)"
    },
    {
        "question_id": 881,
        "difficulty": null,
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "prediction": null,
        "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/network_1/network_1.sqlite",
        "schema": "CREATE TABLE Highschooler(\n    ID int primary key,  -- Unique identifier for each high school student\n    name text,  -- Full name of the high school student\n    grade int  -- Current grade level of the high school student\n)\nCREATE TABLE Friend(\n    student_id int,  -- Unique identifier of the student who has a friend\n    friend_id int,  -- Unique identifier of the friend of the student\n    primary key (student_id, friend_id),  -- Composite primary key to ensure unique friendship pairs\n    foreign key(student_id) references Highschooler(ID),  -- Foreign key referencing the student in the Highschooler table\n    foreign key (friend_id) references Highschooler(ID)  -- Foreign key referencing the friend in the Highschooler table\n)\nCREATE TABLE Likes(\n    student_id int,  -- Unique identifier of the student who likes another student\n    liked_id int,  -- Unique identifier of the student who is liked\n    primary key (student_id, liked_id),  -- Composite primary key to ensure unique like pairs\n    foreign key (liked_id) references Highschooler(ID),  -- Foreign key referencing the liked student in the Highschooler table\n    foreign key (student_id) references Highschooler(ID)  -- Foreign key referencing the student who likes in the Highschooler table\n)"
    },
    {
        "question_id": 904,
        "difficulty": null,
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "prediction": null,
        "ground_truth": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/network_1/network_1.sqlite",
        "schema": "CREATE TABLE Highschooler(\n    ID int primary key,  -- Unique identifier for each high school student\n    name text,  -- Full name of the high school student\n    grade int  -- Current grade level of the high school student\n)\nCREATE TABLE Friend(\n    student_id int,  -- Unique identifier of the student who has a friend\n    friend_id int,  -- Unique identifier of the friend of the student\n    primary key (student_id, friend_id),  -- Composite primary key to ensure unique friendship pairs\n    foreign key(student_id) references Highschooler(ID),  -- Foreign key referencing the student in the Highschooler table\n    foreign key (friend_id) references Highschooler(ID)  -- Foreign key referencing the friend in the Highschooler table\n)\nCREATE TABLE Likes(\n    student_id int,  -- Unique identifier of the student who likes another student\n    liked_id int,  -- Unique identifier of the student who is liked\n    primary key (student_id, liked_id),  -- Composite primary key to ensure unique like pairs\n    foreign key (liked_id) references Highschooler(ID),  -- Foreign key referencing the liked student in the Highschooler table\n    foreign key (student_id) references Highschooler(ID)  -- Foreign key referencing the student who likes in the Highschooler table\n)"
    },
    {
        "question_id": 892,
        "difficulty": null,
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/network_1/network_1.sqlite",
        "schema": "CREATE TABLE Highschooler(\n    ID int primary key,  -- Unique identifier for each high school student\n    name text,  -- Full name of the high school student\n    grade int  -- Current grade level of the high school student\n)\nCREATE TABLE Friend(\n    student_id int,  -- Unique identifier of the student who has a friend\n    friend_id int,  -- Unique identifier of the friend of the student\n    primary key (student_id, friend_id),  -- Composite primary key to ensure unique friendship pairs\n    foreign key(student_id) references Highschooler(ID),  -- Foreign key referencing the student in the Highschooler table\n    foreign key (friend_id) references Highschooler(ID)  -- Foreign key referencing the friend in the Highschooler table\n)\nCREATE TABLE Likes(\n    student_id int,  -- Unique identifier of the student who likes another student\n    liked_id int,  -- Unique identifier of the student who is liked\n    primary key (student_id, liked_id),  -- Composite primary key to ensure unique like pairs\n    foreign key (liked_id) references Highschooler(ID),  -- Foreign key referencing the liked student in the Highschooler table\n    foreign key (student_id) references Highschooler(ID)  -- Foreign key referencing the student who likes in the Highschooler table\n)"
    },
    {
        "question_id": 893,
        "difficulty": null,
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/network_1/network_1.sqlite",
        "schema": "CREATE TABLE Highschooler(\n    ID int primary key,  -- Unique identifier for each high school student\n    name text,  -- Full name of the high school student\n    grade int  -- Current grade level of the high school student\n)\nCREATE TABLE Friend(\n    student_id int,  -- Unique identifier of the student who has a friend\n    friend_id int,  -- Unique identifier of the friend of the student\n    primary key (student_id, friend_id),  -- Composite primary key to ensure unique friendship pairs\n    foreign key(student_id) references Highschooler(ID),  -- Foreign key referencing the student in the Highschooler table\n    foreign key (friend_id) references Highschooler(ID)  -- Foreign key referencing the friend in the Highschooler table\n)\nCREATE TABLE Likes(\n    student_id int,  -- Unique identifier of the student who likes another student\n    liked_id int,  -- Unique identifier of the student who is liked\n    primary key (student_id, liked_id),  -- Composite primary key to ensure unique like pairs\n    foreign key (liked_id) references Highschooler(ID),  -- Foreign key referencing the liked student in the Highschooler table\n    foreign key (student_id) references Highschooler(ID)  -- Foreign key referencing the student who likes in the Highschooler table\n)"
    },
    {
        "question_id": 894,
        "difficulty": null,
        "db_id": "network_1",
        "question": "Show ids of all students who do not have any friends.",
        "prediction": null,
        "ground_truth": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/network_1/network_1.sqlite",
        "schema": "CREATE TABLE Highschooler(\n    ID int primary key,  -- Unique identifier for each high school student\n    name text,  -- Full name of the high school student\n    grade int  -- Current grade level of the high school student\n)\nCREATE TABLE Friend(\n    student_id int,  -- Unique identifier of the student who has a friend\n    friend_id int,  -- Unique identifier of the friend of the student\n    primary key (student_id, friend_id),  -- Composite primary key to ensure unique friendship pairs\n    foreign key(student_id) references Highschooler(ID),  -- Foreign key referencing the student in the Highschooler table\n    foreign key (friend_id) references Highschooler(ID)  -- Foreign key referencing the friend in the Highschooler table\n)\nCREATE TABLE Likes(\n    student_id int,  -- Unique identifier of the student who likes another student\n    liked_id int,  -- Unique identifier of the student who is liked\n    primary key (student_id, liked_id),  -- Composite primary key to ensure unique like pairs\n    foreign key (liked_id) references Highschooler(ID),  -- Foreign key referencing the liked student in the Highschooler table\n    foreign key (student_id) references Highschooler(ID)  -- Foreign key referencing the student who likes in the Highschooler table\n)"
    },
    {
        "question_id": 945,
        "difficulty": null,
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/dog_kennels/dog_kennels.sqlite",
        "schema": "CREATE TABLE `Breeds` (\n  `breed_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the breed\n  `breed_name` VARCHAR(80)               -- Name of the breed\n)\nCREATE TABLE `Charges` (\n  `charge_id` INTEGER PRIMARY KEY,       -- Unique identifier for the charge\n  `charge_type` VARCHAR(10),             -- Type of charge\n  `charge_amount` DECIMAL(19,4)          -- Amount of the charge\n)\nCREATE TABLE `Sizes` (\n  `size_code` VARCHAR(10) PRIMARY KEY,   -- Unique code identifying the size\n  `size_description` VARCHAR(80)         -- Description of the size\n)\nCREATE TABLE `Treatment_Types` (\n  `treatment_type_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the treatment type\n  `treatment_type_description` VARCHAR(80)        -- Description of the treatment type\n)\nCREATE TABLE `Owners` (\n  `owner_id` INTEGER PRIMARY KEY,        -- Unique identifier for the owner\n  `first_name` VARCHAR(50),              -- First name of the owner\n  `last_name` VARCHAR(50),               -- Last name of the owner\n  `street` VARCHAR(50),                  -- Street address of the owner\n  `city` VARCHAR(50),                    -- City of the owner's address\n  `state` VARCHAR(20),                   -- State of the owner's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the owner's address\n  `email_address` VARCHAR(50),           -- Email address of the owner\n  `home_phone` VARCHAR(20),              -- Home phone number of the owner\n  `cell_number` VARCHAR(20)              -- Cell phone number of the owner\n)\nCREATE TABLE `Dogs` (\n  `dog_id` INTEGER PRIMARY KEY,          -- Unique identifier for the dog\n  `owner_id` INTEGER NOT NULL,           -- Identifier for the owner of the dog\n  `abandoned_yn` VARCHAR(1),             -- Indicator if the dog is abandoned (Y/N)\n  `breed_code` VARCHAR(10) NOT NULL,     -- Code identifying the breed of the dog\n  `size_code` VARCHAR(10) NOT NULL,      -- Code identifying the size of the dog\n  `name` VARCHAR(50),                    -- Name of the dog\n  `age` VARCHAR(20),                     -- Age of the dog\n  `date_of_birth` DATETIME,              -- Date of birth of the dog\n  `gender` VARCHAR(1),                   -- Gender of the dog (M/F)\n  `weight` VARCHAR(20),                  -- Weight of the dog\n  `date_arrived` DATETIME,               -- Date the dog arrived\n  `date_adopted` DATETIME,               -- Date the dog was adopted\n  `date_departed` DATETIME,              -- Date the dog departed\n  FOREIGN KEY (`breed_code`) REFERENCES `Breeds`(`breed_code`),\n  FOREIGN KEY (`size_code`) REFERENCES `Sizes`(`size_code`),\n  FOREIGN KEY (`owner_id`) REFERENCES `Owners`(`owner_id`)\n)\nCREATE TABLE `Professionals` (\n  `professional_id` INTEGER PRIMARY KEY, -- Unique identifier for the professional\n  `role_code` VARCHAR(10) NOT NULL,      -- Code identifying the role of the professional\n  `first_name` VARCHAR(50),              -- First name of the professional\n  `street` VARCHAR(50),                  -- Street address of the professional\n  `city` VARCHAR(50),                    -- City of the professional's address\n  `state` VARCHAR(20),                   -- State of the professional's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the professional's address\n  `last_name` VARCHAR(50),               -- Last name of the professional\n  `email_address` VARCHAR(50),           -- Email address of the professional\n  `home_phone` VARCHAR(20),              -- Home phone number of the professional\n  `cell_number` VARCHAR(20)              -- Cell phone number of the professional\n)\nCREATE TABLE `Treatments` (\n  `treatment_id` INTEGER PRIMARY KEY,    -- Unique identifier for the treatment\n  `dog_id` INTEGER NOT NULL,             -- Identifier for the dog receiving the treatment\n  `professional_id` INTEGER NOT NULL,    -- Identifier for the professional administering the treatment\n  `treatment_type_code` VARCHAR(10) NOT NULL,  -- Code identifying the type of treatment\n  `date_of_treatment` DATETIME,          -- Date the treatment was administered\n  `cost_of_treatment` DECIMAL(19,4),     -- Cost of the treatment\n  FOREIGN KEY (`treatment_type_code`) REFERENCES `Treatment_Types`(`treatment_type_code`),\n  FOREIGN KEY (`professional_id`) REFERENCES `Professionals`(`professional_id`),\n  FOREIGN KEY (`dog_id`) REFERENCES `Dogs`(`dog_id`)\n)"
    },
    {
        "question_id": 944,
        "difficulty": null,
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "prediction": null,
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/dog_kennels/dog_kennels.sqlite",
        "schema": "CREATE TABLE `Breeds` (\n  `breed_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the breed\n  `breed_name` VARCHAR(80)               -- Name of the breed\n)\nCREATE TABLE `Charges` (\n  `charge_id` INTEGER PRIMARY KEY,       -- Unique identifier for the charge\n  `charge_type` VARCHAR(10),             -- Type of charge\n  `charge_amount` DECIMAL(19,4)          -- Amount of the charge\n)\nCREATE TABLE `Sizes` (\n  `size_code` VARCHAR(10) PRIMARY KEY,   -- Unique code identifying the size\n  `size_description` VARCHAR(80)         -- Description of the size\n)\nCREATE TABLE `Treatment_Types` (\n  `treatment_type_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the treatment type\n  `treatment_type_description` VARCHAR(80)        -- Description of the treatment type\n)\nCREATE TABLE `Owners` (\n  `owner_id` INTEGER PRIMARY KEY,        -- Unique identifier for the owner\n  `first_name` VARCHAR(50),              -- First name of the owner\n  `last_name` VARCHAR(50),               -- Last name of the owner\n  `street` VARCHAR(50),                  -- Street address of the owner\n  `city` VARCHAR(50),                    -- City of the owner's address\n  `state` VARCHAR(20),                   -- State of the owner's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the owner's address\n  `email_address` VARCHAR(50),           -- Email address of the owner\n  `home_phone` VARCHAR(20),              -- Home phone number of the owner\n  `cell_number` VARCHAR(20)              -- Cell phone number of the owner\n)\nCREATE TABLE `Dogs` (\n  `dog_id` INTEGER PRIMARY KEY,          -- Unique identifier for the dog\n  `owner_id` INTEGER NOT NULL,           -- Identifier for the owner of the dog\n  `abandoned_yn` VARCHAR(1),             -- Indicator if the dog is abandoned (Y/N)\n  `breed_code` VARCHAR(10) NOT NULL,     -- Code identifying the breed of the dog\n  `size_code` VARCHAR(10) NOT NULL,      -- Code identifying the size of the dog\n  `name` VARCHAR(50),                    -- Name of the dog\n  `age` VARCHAR(20),                     -- Age of the dog\n  `date_of_birth` DATETIME,              -- Date of birth of the dog\n  `gender` VARCHAR(1),                   -- Gender of the dog (M/F)\n  `weight` VARCHAR(20),                  -- Weight of the dog\n  `date_arrived` DATETIME,               -- Date the dog arrived\n  `date_adopted` DATETIME,               -- Date the dog was adopted\n  `date_departed` DATETIME,              -- Date the dog departed\n  FOREIGN KEY (`breed_code`) REFERENCES `Breeds`(`breed_code`),\n  FOREIGN KEY (`size_code`) REFERENCES `Sizes`(`size_code`),\n  FOREIGN KEY (`owner_id`) REFERENCES `Owners`(`owner_id`)\n)\nCREATE TABLE `Professionals` (\n  `professional_id` INTEGER PRIMARY KEY, -- Unique identifier for the professional\n  `role_code` VARCHAR(10) NOT NULL,      -- Code identifying the role of the professional\n  `first_name` VARCHAR(50),              -- First name of the professional\n  `street` VARCHAR(50),                  -- Street address of the professional\n  `city` VARCHAR(50),                    -- City of the professional's address\n  `state` VARCHAR(20),                   -- State of the professional's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the professional's address\n  `last_name` VARCHAR(50),               -- Last name of the professional\n  `email_address` VARCHAR(50),           -- Email address of the professional\n  `home_phone` VARCHAR(20),              -- Home phone number of the professional\n  `cell_number` VARCHAR(20)              -- Cell phone number of the professional\n)\nCREATE TABLE `Treatments` (\n  `treatment_id` INTEGER PRIMARY KEY,    -- Unique identifier for the treatment\n  `dog_id` INTEGER NOT NULL,             -- Identifier for the dog receiving the treatment\n  `professional_id` INTEGER NOT NULL,    -- Identifier for the professional administering the treatment\n  `treatment_type_code` VARCHAR(10) NOT NULL,  -- Code identifying the type of treatment\n  `date_of_treatment` DATETIME,          -- Date the treatment was administered\n  `cost_of_treatment` DECIMAL(19,4),     -- Cost of the treatment\n  FOREIGN KEY (`treatment_type_code`) REFERENCES `Treatment_Types`(`treatment_type_code`),\n  FOREIGN KEY (`professional_id`) REFERENCES `Professionals`(`professional_id`),\n  FOREIGN KEY (`dog_id`) REFERENCES `Dogs`(`dog_id`)\n)"
    },
    {
        "question_id": 955,
        "difficulty": null,
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "prediction": null,
        "ground_truth": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/dog_kennels/dog_kennels.sqlite",
        "schema": "CREATE TABLE `Breeds` (\n  `breed_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the breed\n  `breed_name` VARCHAR(80)               -- Name of the breed\n)\nCREATE TABLE `Charges` (\n  `charge_id` INTEGER PRIMARY KEY,       -- Unique identifier for the charge\n  `charge_type` VARCHAR(10),             -- Type of charge\n  `charge_amount` DECIMAL(19,4)          -- Amount of the charge\n)\nCREATE TABLE `Sizes` (\n  `size_code` VARCHAR(10) PRIMARY KEY,   -- Unique code identifying the size\n  `size_description` VARCHAR(80)         -- Description of the size\n)\nCREATE TABLE `Treatment_Types` (\n  `treatment_type_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the treatment type\n  `treatment_type_description` VARCHAR(80)        -- Description of the treatment type\n)\nCREATE TABLE `Owners` (\n  `owner_id` INTEGER PRIMARY KEY,        -- Unique identifier for the owner\n  `first_name` VARCHAR(50),              -- First name of the owner\n  `last_name` VARCHAR(50),               -- Last name of the owner\n  `street` VARCHAR(50),                  -- Street address of the owner\n  `city` VARCHAR(50),                    -- City of the owner's address\n  `state` VARCHAR(20),                   -- State of the owner's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the owner's address\n  `email_address` VARCHAR(50),           -- Email address of the owner\n  `home_phone` VARCHAR(20),              -- Home phone number of the owner\n  `cell_number` VARCHAR(20)              -- Cell phone number of the owner\n)\nCREATE TABLE `Dogs` (\n  `dog_id` INTEGER PRIMARY KEY,          -- Unique identifier for the dog\n  `owner_id` INTEGER NOT NULL,           -- Identifier for the owner of the dog\n  `abandoned_yn` VARCHAR(1),             -- Indicator if the dog is abandoned (Y/N)\n  `breed_code` VARCHAR(10) NOT NULL,     -- Code identifying the breed of the dog\n  `size_code` VARCHAR(10) NOT NULL,      -- Code identifying the size of the dog\n  `name` VARCHAR(50),                    -- Name of the dog\n  `age` VARCHAR(20),                     -- Age of the dog\n  `date_of_birth` DATETIME,              -- Date of birth of the dog\n  `gender` VARCHAR(1),                   -- Gender of the dog (M/F)\n  `weight` VARCHAR(20),                  -- Weight of the dog\n  `date_arrived` DATETIME,               -- Date the dog arrived\n  `date_adopted` DATETIME,               -- Date the dog was adopted\n  `date_departed` DATETIME,              -- Date the dog departed\n  FOREIGN KEY (`breed_code`) REFERENCES `Breeds`(`breed_code`),\n  FOREIGN KEY (`size_code`) REFERENCES `Sizes`(`size_code`),\n  FOREIGN KEY (`owner_id`) REFERENCES `Owners`(`owner_id`)\n)\nCREATE TABLE `Professionals` (\n  `professional_id` INTEGER PRIMARY KEY, -- Unique identifier for the professional\n  `role_code` VARCHAR(10) NOT NULL,      -- Code identifying the role of the professional\n  `first_name` VARCHAR(50),              -- First name of the professional\n  `street` VARCHAR(50),                  -- Street address of the professional\n  `city` VARCHAR(50),                    -- City of the professional's address\n  `state` VARCHAR(20),                   -- State of the professional's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the professional's address\n  `last_name` VARCHAR(50),               -- Last name of the professional\n  `email_address` VARCHAR(50),           -- Email address of the professional\n  `home_phone` VARCHAR(20),              -- Home phone number of the professional\n  `cell_number` VARCHAR(20)              -- Cell phone number of the professional\n)\nCREATE TABLE `Treatments` (\n  `treatment_id` INTEGER PRIMARY KEY,    -- Unique identifier for the treatment\n  `dog_id` INTEGER NOT NULL,             -- Identifier for the dog receiving the treatment\n  `professional_id` INTEGER NOT NULL,    -- Identifier for the professional administering the treatment\n  `treatment_type_code` VARCHAR(10) NOT NULL,  -- Code identifying the type of treatment\n  `date_of_treatment` DATETIME,          -- Date the treatment was administered\n  `cost_of_treatment` DECIMAL(19,4),     -- Cost of the treatment\n  FOREIGN KEY (`treatment_type_code`) REFERENCES `Treatment_Types`(`treatment_type_code`),\n  FOREIGN KEY (`professional_id`) REFERENCES `Professionals`(`professional_id`),\n  FOREIGN KEY (`dog_id`) REFERENCES `Dogs`(`dog_id`)\n)"
    },
    {
        "question_id": 964,
        "difficulty": null,
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "prediction": null,
        "ground_truth": "SELECT date_arrived ,  date_departed FROM Dogs",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/dog_kennels/dog_kennels.sqlite",
        "schema": "CREATE TABLE `Breeds` (\n  `breed_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the breed\n  `breed_name` VARCHAR(80)               -- Name of the breed\n)\nCREATE TABLE `Charges` (\n  `charge_id` INTEGER PRIMARY KEY,       -- Unique identifier for the charge\n  `charge_type` VARCHAR(10),             -- Type of charge\n  `charge_amount` DECIMAL(19,4)          -- Amount of the charge\n)\nCREATE TABLE `Sizes` (\n  `size_code` VARCHAR(10) PRIMARY KEY,   -- Unique code identifying the size\n  `size_description` VARCHAR(80)         -- Description of the size\n)\nCREATE TABLE `Treatment_Types` (\n  `treatment_type_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the treatment type\n  `treatment_type_description` VARCHAR(80)        -- Description of the treatment type\n)\nCREATE TABLE `Owners` (\n  `owner_id` INTEGER PRIMARY KEY,        -- Unique identifier for the owner\n  `first_name` VARCHAR(50),              -- First name of the owner\n  `last_name` VARCHAR(50),               -- Last name of the owner\n  `street` VARCHAR(50),                  -- Street address of the owner\n  `city` VARCHAR(50),                    -- City of the owner's address\n  `state` VARCHAR(20),                   -- State of the owner's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the owner's address\n  `email_address` VARCHAR(50),           -- Email address of the owner\n  `home_phone` VARCHAR(20),              -- Home phone number of the owner\n  `cell_number` VARCHAR(20)              -- Cell phone number of the owner\n)\nCREATE TABLE `Dogs` (\n  `dog_id` INTEGER PRIMARY KEY,          -- Unique identifier for the dog\n  `owner_id` INTEGER NOT NULL,           -- Identifier for the owner of the dog\n  `abandoned_yn` VARCHAR(1),             -- Indicator if the dog is abandoned (Y/N)\n  `breed_code` VARCHAR(10) NOT NULL,     -- Code identifying the breed of the dog\n  `size_code` VARCHAR(10) NOT NULL,      -- Code identifying the size of the dog\n  `name` VARCHAR(50),                    -- Name of the dog\n  `age` VARCHAR(20),                     -- Age of the dog\n  `date_of_birth` DATETIME,              -- Date of birth of the dog\n  `gender` VARCHAR(1),                   -- Gender of the dog (M/F)\n  `weight` VARCHAR(20),                  -- Weight of the dog\n  `date_arrived` DATETIME,               -- Date the dog arrived\n  `date_adopted` DATETIME,               -- Date the dog was adopted\n  `date_departed` DATETIME,              -- Date the dog departed\n  FOREIGN KEY (`breed_code`) REFERENCES `Breeds`(`breed_code`),\n  FOREIGN KEY (`size_code`) REFERENCES `Sizes`(`size_code`),\n  FOREIGN KEY (`owner_id`) REFERENCES `Owners`(`owner_id`)\n)\nCREATE TABLE `Professionals` (\n  `professional_id` INTEGER PRIMARY KEY, -- Unique identifier for the professional\n  `role_code` VARCHAR(10) NOT NULL,      -- Code identifying the role of the professional\n  `first_name` VARCHAR(50),              -- First name of the professional\n  `street` VARCHAR(50),                  -- Street address of the professional\n  `city` VARCHAR(50),                    -- City of the professional's address\n  `state` VARCHAR(20),                   -- State of the professional's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the professional's address\n  `last_name` VARCHAR(50),               -- Last name of the professional\n  `email_address` VARCHAR(50),           -- Email address of the professional\n  `home_phone` VARCHAR(20),              -- Home phone number of the professional\n  `cell_number` VARCHAR(20)              -- Cell phone number of the professional\n)\nCREATE TABLE `Treatments` (\n  `treatment_id` INTEGER PRIMARY KEY,    -- Unique identifier for the treatment\n  `dog_id` INTEGER NOT NULL,             -- Identifier for the dog receiving the treatment\n  `professional_id` INTEGER NOT NULL,    -- Identifier for the professional administering the treatment\n  `treatment_type_code` VARCHAR(10) NOT NULL,  -- Code identifying the type of treatment\n  `date_of_treatment` DATETIME,          -- Date the treatment was administered\n  `cost_of_treatment` DECIMAL(19,4),     -- Cost of the treatment\n  FOREIGN KEY (`treatment_type_code`) REFERENCES `Treatment_Types`(`treatment_type_code`),\n  FOREIGN KEY (`professional_id`) REFERENCES `Professionals`(`professional_id`),\n  FOREIGN KEY (`dog_id`) REFERENCES `Dogs`(`dog_id`)\n)"
    },
    {
        "question_id": 976,
        "difficulty": null,
        "db_id": "dog_kennels",
        "question": "How much does the most recent treatment cost?",
        "prediction": null,
        "ground_truth": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/dog_kennels/dog_kennels.sqlite",
        "schema": "CREATE TABLE `Breeds` (\n  `breed_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the breed\n  `breed_name` VARCHAR(80)               -- Name of the breed\n)\nCREATE TABLE `Charges` (\n  `charge_id` INTEGER PRIMARY KEY,       -- Unique identifier for the charge\n  `charge_type` VARCHAR(10),             -- Type of charge\n  `charge_amount` DECIMAL(19,4)          -- Amount of the charge\n)\nCREATE TABLE `Sizes` (\n  `size_code` VARCHAR(10) PRIMARY KEY,   -- Unique code identifying the size\n  `size_description` VARCHAR(80)         -- Description of the size\n)\nCREATE TABLE `Treatment_Types` (\n  `treatment_type_code` VARCHAR(10) PRIMARY KEY,  -- Unique code identifying the treatment type\n  `treatment_type_description` VARCHAR(80)        -- Description of the treatment type\n)\nCREATE TABLE `Owners` (\n  `owner_id` INTEGER PRIMARY KEY,        -- Unique identifier for the owner\n  `first_name` VARCHAR(50),              -- First name of the owner\n  `last_name` VARCHAR(50),               -- Last name of the owner\n  `street` VARCHAR(50),                  -- Street address of the owner\n  `city` VARCHAR(50),                    -- City of the owner's address\n  `state` VARCHAR(20),                   -- State of the owner's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the owner's address\n  `email_address` VARCHAR(50),           -- Email address of the owner\n  `home_phone` VARCHAR(20),              -- Home phone number of the owner\n  `cell_number` VARCHAR(20)              -- Cell phone number of the owner\n)\nCREATE TABLE `Dogs` (\n  `dog_id` INTEGER PRIMARY KEY,          -- Unique identifier for the dog\n  `owner_id` INTEGER NOT NULL,           -- Identifier for the owner of the dog\n  `abandoned_yn` VARCHAR(1),             -- Indicator if the dog is abandoned (Y/N)\n  `breed_code` VARCHAR(10) NOT NULL,     -- Code identifying the breed of the dog\n  `size_code` VARCHAR(10) NOT NULL,      -- Code identifying the size of the dog\n  `name` VARCHAR(50),                    -- Name of the dog\n  `age` VARCHAR(20),                     -- Age of the dog\n  `date_of_birth` DATETIME,              -- Date of birth of the dog\n  `gender` VARCHAR(1),                   -- Gender of the dog (M/F)\n  `weight` VARCHAR(20),                  -- Weight of the dog\n  `date_arrived` DATETIME,               -- Date the dog arrived\n  `date_adopted` DATETIME,               -- Date the dog was adopted\n  `date_departed` DATETIME,              -- Date the dog departed\n  FOREIGN KEY (`breed_code`) REFERENCES `Breeds`(`breed_code`),\n  FOREIGN KEY (`size_code`) REFERENCES `Sizes`(`size_code`),\n  FOREIGN KEY (`owner_id`) REFERENCES `Owners`(`owner_id`)\n)\nCREATE TABLE `Professionals` (\n  `professional_id` INTEGER PRIMARY KEY, -- Unique identifier for the professional\n  `role_code` VARCHAR(10) NOT NULL,      -- Code identifying the role of the professional\n  `first_name` VARCHAR(50),              -- First name of the professional\n  `street` VARCHAR(50),                  -- Street address of the professional\n  `city` VARCHAR(50),                    -- City of the professional's address\n  `state` VARCHAR(20),                   -- State of the professional's address\n  `zip_code` VARCHAR(20),                -- ZIP code of the professional's address\n  `last_name` VARCHAR(50),               -- Last name of the professional\n  `email_address` VARCHAR(50),           -- Email address of the professional\n  `home_phone` VARCHAR(20),              -- Home phone number of the professional\n  `cell_number` VARCHAR(20)              -- Cell phone number of the professional\n)\nCREATE TABLE `Treatments` (\n  `treatment_id` INTEGER PRIMARY KEY,    -- Unique identifier for the treatment\n  `dog_id` INTEGER NOT NULL,             -- Identifier for the dog receiving the treatment\n  `professional_id` INTEGER NOT NULL,    -- Identifier for the professional administering the treatment\n  `treatment_type_code` VARCHAR(10) NOT NULL,  -- Code identifying the type of treatment\n  `date_of_treatment` DATETIME,          -- Date the treatment was administered\n  `cost_of_treatment` DECIMAL(19,4),     -- Cost of the treatment\n  FOREIGN KEY (`treatment_type_code`) REFERENCES `Treatment_Types`(`treatment_type_code`),\n  FOREIGN KEY (`professional_id`) REFERENCES `Professionals`(`professional_id`),\n  FOREIGN KEY (`dog_id`) REFERENCES `Dogs`(`dog_id`)\n)"
    },
    {
        "question_id": 1011,
        "difficulty": null,
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "prediction": null,
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/singer/singer.sqlite",
        "schema": "CREATE TABLE \"singer\" (\n    \"Singer_ID\" int,  -- Unique identifier for the singer\n    \"Name\" text,  -- Full name of the singer\n    \"Birth_Year\" real,  -- Year of birth of the singer\n    \"Net_Worth_Millions\" real,  -- Estimated net worth of the singer in millions\n    \"Citizenship\" text,  -- Country of citizenship of the singer\n    PRIMARY KEY (\"Singer_ID\")\n) \nCREATE TABLE \"song\" (\n    \"Song_ID\" int,  -- Unique identifier for the song\n    \"Title\" text,  -- Title of the song\n    \"Singer_ID\" int,  -- Identifier for the singer who performed the song, referencing `singer` table\n    \"Sales\" real,  -- Total sales of the song in units\n    \"Highest_Position\" real,  -- Highest chart position achieved by the song\n    PRIMARY KEY (\"Song_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)"
    },
    {
        "question_id": 1002,
        "difficulty": null,
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "prediction": null,
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/singer/singer.sqlite",
        "schema": "CREATE TABLE \"singer\" (\n    \"Singer_ID\" int,  -- Unique identifier for the singer\n    \"Name\" text,  -- Full name of the singer\n    \"Birth_Year\" real,  -- Year of birth of the singer\n    \"Net_Worth_Millions\" real,  -- Estimated net worth of the singer in millions\n    \"Citizenship\" text,  -- Country of citizenship of the singer\n    PRIMARY KEY (\"Singer_ID\")\n) \nCREATE TABLE \"song\" (\n    \"Song_ID\" int,  -- Unique identifier for the song\n    \"Title\" text,  -- Title of the song\n    \"Singer_ID\" int,  -- Identifier for the singer who performed the song, referencing `singer` table\n    \"Sales\" real,  -- Total sales of the song in units\n    \"Highest_Position\" real,  -- Highest chart position achieved by the song\n    PRIMARY KEY (\"Song_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)"
    },
    {
        "question_id": 1010,
        "difficulty": null,
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "prediction": null,
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/singer/singer.sqlite",
        "schema": "CREATE TABLE \"singer\" (\n    \"Singer_ID\" int,  -- Unique identifier for the singer\n    \"Name\" text,  -- Full name of the singer\n    \"Birth_Year\" real,  -- Year of birth of the singer\n    \"Net_Worth_Millions\" real,  -- Estimated net worth of the singer in millions\n    \"Citizenship\" text,  -- Country of citizenship of the singer\n    PRIMARY KEY (\"Singer_ID\")\n) \nCREATE TABLE \"song\" (\n    \"Song_ID\" int,  -- Unique identifier for the song\n    \"Title\" text,  -- Title of the song\n    \"Singer_ID\" int,  -- Identifier for the singer who performed the song, referencing `singer` table\n    \"Sales\" real,  -- Total sales of the song in units\n    \"Highest_Position\" real,  -- Highest chart position achieved by the song\n    PRIMARY KEY (\"Song_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)"
    },
    {
        "question_id": 1000,
        "difficulty": null,
        "db_id": "singer",
        "question": "How many singers are there?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM singer",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/singer/singer.sqlite",
        "schema": "CREATE TABLE \"singer\" (\n    \"Singer_ID\" int,  -- Unique identifier for the singer\n    \"Name\" text,  -- Full name of the singer\n    \"Birth_Year\" real,  -- Year of birth of the singer\n    \"Net_Worth_Millions\" real,  -- Estimated net worth of the singer in millions\n    \"Citizenship\" text,  -- Country of citizenship of the singer\n    PRIMARY KEY (\"Singer_ID\")\n) \nCREATE TABLE \"song\" (\n    \"Song_ID\" int,  -- Unique identifier for the song\n    \"Title\" text,  -- Title of the song\n    \"Singer_ID\" int,  -- Identifier for the singer who performed the song, referencing `singer` table\n    \"Sales\" real,  -- Total sales of the song in units\n    \"Highest_Position\" real,  -- Highest chart position achieved by the song\n    PRIMARY KEY (\"Song_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)"
    },
    {
        "question_id": 1019,
        "difficulty": null,
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "prediction": null,
        "ground_truth": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/singer/singer.sqlite",
        "schema": "CREATE TABLE \"singer\" (\n    \"Singer_ID\" int,  -- Unique identifier for the singer\n    \"Name\" text,  -- Full name of the singer\n    \"Birth_Year\" real,  -- Year of birth of the singer\n    \"Net_Worth_Millions\" real,  -- Estimated net worth of the singer in millions\n    \"Citizenship\" text,  -- Country of citizenship of the singer\n    PRIMARY KEY (\"Singer_ID\")\n) \nCREATE TABLE \"song\" (\n    \"Song_ID\" int,  -- Unique identifier for the song\n    \"Title\" text,  -- Title of the song\n    \"Singer_ID\" int,  -- Identifier for the singer who performed the song, referencing `singer` table\n    \"Sales\" real,  -- Total sales of the song in units\n    \"Highest_Position\" real,  -- Highest chart position achieved by the song\n    PRIMARY KEY (\"Song_ID\"),\n    FOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)"
    },
    {
        "question_id": 1030,
        "difficulty": null,
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM Other_Available_Features",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/real_estate_properties/real_estate_properties.sqlite",
        "schema": "CREATE TABLE `Ref_Feature_Types` (\n    `feature_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of feature\n    `feature_type_name` VARCHAR(80),  -- Name of the feature type\n) \nCREATE TABLE `Ref_Property_Types` (\n    `property_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of property\n    `property_type_description` VARCHAR(80),  -- Description of the property type\n) \nCREATE TABLE `Other_Available_Features` (\n    `feature_id` INTEGER PRIMARY KEY,  -- Unique identifier for the feature\n    `feature_type_code` VARCHAR(20) NOT NULL,  -- Code linking the feature to its type\n    `feature_name` VARCHAR(80),  -- Name of the feature\n    `feature_description` VARCHAR(80),  -- Description of the feature\n    FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n) \nCREATE TABLE `Properties` (\n    `property_id` INTEGER PRIMARY KEY,  -- Unique identifier for the property\n    `property_type_code` VARCHAR(20) NOT NULL,  -- Code linking the property to its type\n    `date_on_market` DATETIME,  -- Date when the property was listed on the market\n    `date_sold` DATETIME,  -- Date when the property was sold\n    `property_name` VARCHAR(80),  -- Name of the property\n    `property_address` VARCHAR(255),  -- Address of the property\n    `room_count` INTEGER,  -- Number of rooms in the property\n    `vendor_requested_price` DECIMAL(19,4),  -- Price requested by the vendor\n    `buyer_offered_price` DECIMAL(19,4),  -- Price offered by the buyer\n    `agreed_selling_price` DECIMAL(19,4),  -- Final agreed selling price\n    `apt_feature_1` VARCHAR(255),  -- First feature specific to apartments\n    `apt_feature_2` VARCHAR(255),  -- Second feature specific to apartments\n    `apt_feature_3` VARCHAR(255),  -- Third feature specific to apartments\n    `fld_feature_1` VARCHAR(255),  -- First feature specific to fields\n    `fld_feature_2` VARCHAR(255),  -- Second feature specific to fields\n    `fld_feature_3` VARCHAR(255),  -- Third feature specific to fields\n    `hse_feature_1` VARCHAR(255),  -- First feature specific to houses\n    `hse_feature_2` VARCHAR(255),  -- Second feature specific to houses\n    `hse_feature_3` VARCHAR(255),  -- Third feature specific to houses\n    `oth_feature_1` VARCHAR(255),  -- First feature specific to other property types\n    `oth_feature_2` VARCHAR(255),  -- Second feature specific to other property types\n    `oth_feature_3` VARCHAR(255),  -- Third feature specific to other property types\n    `shp_feature_1` VARCHAR(255),  -- First feature specific to shops\n    `shp_feature_2` VARCHAR(255),  -- Second feature specific to shops\n    `shp_feature_3` VARCHAR(255),  -- Third feature specific to shops\n    `other_property_details` VARCHAR(255),  -- Additional details about the property\n    FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n) CREATE TABLE `Other_Property_Features` (\n    `property_id` INTEGER NOT NULL,  -- Identifier linking the feature to a specific property\n    `feature_id` INTEGER NOT NULL,  -- Identifier linking the feature to its details\n    `property_feature_description` VARCHAR(80),  -- Description of the feature as it applies to the property\n    FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\n    FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)"
    },
    {
        "question_id": 1031,
        "difficulty": null,
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "prediction": null,
        "ground_truth": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/real_estate_properties/real_estate_properties.sqlite",
        "schema": "CREATE TABLE `Ref_Feature_Types` (\n    `feature_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of feature\n    `feature_type_name` VARCHAR(80),  -- Name of the feature type\n) \nCREATE TABLE `Ref_Property_Types` (\n    `property_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of property\n    `property_type_description` VARCHAR(80),  -- Description of the property type\n) \nCREATE TABLE `Other_Available_Features` (\n    `feature_id` INTEGER PRIMARY KEY,  -- Unique identifier for the feature\n    `feature_type_code` VARCHAR(20) NOT NULL,  -- Code linking the feature to its type\n    `feature_name` VARCHAR(80),  -- Name of the feature\n    `feature_description` VARCHAR(80),  -- Description of the feature\n    FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n) \nCREATE TABLE `Properties` (\n    `property_id` INTEGER PRIMARY KEY,  -- Unique identifier for the property\n    `property_type_code` VARCHAR(20) NOT NULL,  -- Code linking the property to its type\n    `date_on_market` DATETIME,  -- Date when the property was listed on the market\n    `date_sold` DATETIME,  -- Date when the property was sold\n    `property_name` VARCHAR(80),  -- Name of the property\n    `property_address` VARCHAR(255),  -- Address of the property\n    `room_count` INTEGER,  -- Number of rooms in the property\n    `vendor_requested_price` DECIMAL(19,4),  -- Price requested by the vendor\n    `buyer_offered_price` DECIMAL(19,4),  -- Price offered by the buyer\n    `agreed_selling_price` DECIMAL(19,4),  -- Final agreed selling price\n    `apt_feature_1` VARCHAR(255),  -- First feature specific to apartments\n    `apt_feature_2` VARCHAR(255),  -- Second feature specific to apartments\n    `apt_feature_3` VARCHAR(255),  -- Third feature specific to apartments\n    `fld_feature_1` VARCHAR(255),  -- First feature specific to fields\n    `fld_feature_2` VARCHAR(255),  -- Second feature specific to fields\n    `fld_feature_3` VARCHAR(255),  -- Third feature specific to fields\n    `hse_feature_1` VARCHAR(255),  -- First feature specific to houses\n    `hse_feature_2` VARCHAR(255),  -- Second feature specific to houses\n    `hse_feature_3` VARCHAR(255),  -- Third feature specific to houses\n    `oth_feature_1` VARCHAR(255),  -- First feature specific to other property types\n    `oth_feature_2` VARCHAR(255),  -- Second feature specific to other property types\n    `oth_feature_3` VARCHAR(255),  -- Third feature specific to other property types\n    `shp_feature_1` VARCHAR(255),  -- First feature specific to shops\n    `shp_feature_2` VARCHAR(255),  -- Second feature specific to shops\n    `shp_feature_3` VARCHAR(255),  -- Third feature specific to shops\n    `other_property_details` VARCHAR(255),  -- Additional details about the property\n    FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n) CREATE TABLE `Other_Property_Features` (\n    `property_id` INTEGER NOT NULL,  -- Identifier linking the feature to a specific property\n    `feature_id` INTEGER NOT NULL,  -- Identifier linking the feature to its details\n    `property_feature_description` VARCHAR(80),  -- Description of the feature as it applies to the property\n    FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\n    FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)"
    },
    {
        "question_id": 1032,
        "difficulty": null,
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "prediction": null,
        "ground_truth": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/real_estate_properties/real_estate_properties.sqlite",
        "schema": "CREATE TABLE `Ref_Feature_Types` (\n    `feature_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of feature\n    `feature_type_name` VARCHAR(80),  -- Name of the feature type\n) \nCREATE TABLE `Ref_Property_Types` (\n    `property_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of property\n    `property_type_description` VARCHAR(80),  -- Description of the property type\n) \nCREATE TABLE `Other_Available_Features` (\n    `feature_id` INTEGER PRIMARY KEY,  -- Unique identifier for the feature\n    `feature_type_code` VARCHAR(20) NOT NULL,  -- Code linking the feature to its type\n    `feature_name` VARCHAR(80),  -- Name of the feature\n    `feature_description` VARCHAR(80),  -- Description of the feature\n    FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n) \nCREATE TABLE `Properties` (\n    `property_id` INTEGER PRIMARY KEY,  -- Unique identifier for the property\n    `property_type_code` VARCHAR(20) NOT NULL,  -- Code linking the property to its type\n    `date_on_market` DATETIME,  -- Date when the property was listed on the market\n    `date_sold` DATETIME,  -- Date when the property was sold\n    `property_name` VARCHAR(80),  -- Name of the property\n    `property_address` VARCHAR(255),  -- Address of the property\n    `room_count` INTEGER,  -- Number of rooms in the property\n    `vendor_requested_price` DECIMAL(19,4),  -- Price requested by the vendor\n    `buyer_offered_price` DECIMAL(19,4),  -- Price offered by the buyer\n    `agreed_selling_price` DECIMAL(19,4),  -- Final agreed selling price\n    `apt_feature_1` VARCHAR(255),  -- First feature specific to apartments\n    `apt_feature_2` VARCHAR(255),  -- Second feature specific to apartments\n    `apt_feature_3` VARCHAR(255),  -- Third feature specific to apartments\n    `fld_feature_1` VARCHAR(255),  -- First feature specific to fields\n    `fld_feature_2` VARCHAR(255),  -- Second feature specific to fields\n    `fld_feature_3` VARCHAR(255),  -- Third feature specific to fields\n    `hse_feature_1` VARCHAR(255),  -- First feature specific to houses\n    `hse_feature_2` VARCHAR(255),  -- Second feature specific to houses\n    `hse_feature_3` VARCHAR(255),  -- Third feature specific to houses\n    `oth_feature_1` VARCHAR(255),  -- First feature specific to other property types\n    `oth_feature_2` VARCHAR(255),  -- Second feature specific to other property types\n    `oth_feature_3` VARCHAR(255),  -- Third feature specific to other property types\n    `shp_feature_1` VARCHAR(255),  -- First feature specific to shops\n    `shp_feature_2` VARCHAR(255),  -- Second feature specific to shops\n    `shp_feature_3` VARCHAR(255),  -- Third feature specific to shops\n    `other_property_details` VARCHAR(255),  -- Additional details about the property\n    FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n) CREATE TABLE `Other_Property_Features` (\n    `property_id` INTEGER NOT NULL,  -- Identifier linking the feature to a specific property\n    `feature_id` INTEGER NOT NULL,  -- Identifier linking the feature to its details\n    `property_feature_description` VARCHAR(80),  -- Description of the feature as it applies to the property\n    FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\n    FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)"
    },
    {
        "question_id": 1033,
        "difficulty": null,
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "prediction": null,
        "ground_truth": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/real_estate_properties/real_estate_properties.sqlite",
        "schema": "CREATE TABLE `Ref_Feature_Types` (\n    `feature_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of feature\n    `feature_type_name` VARCHAR(80),  -- Name of the feature type\n) \nCREATE TABLE `Ref_Property_Types` (\n    `property_type_code` VARCHAR(20) PRIMARY KEY,  -- Unique code identifying the type of property\n    `property_type_description` VARCHAR(80),  -- Description of the property type\n) \nCREATE TABLE `Other_Available_Features` (\n    `feature_id` INTEGER PRIMARY KEY,  -- Unique identifier for the feature\n    `feature_type_code` VARCHAR(20) NOT NULL,  -- Code linking the feature to its type\n    `feature_name` VARCHAR(80),  -- Name of the feature\n    `feature_description` VARCHAR(80),  -- Description of the feature\n    FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n) \nCREATE TABLE `Properties` (\n    `property_id` INTEGER PRIMARY KEY,  -- Unique identifier for the property\n    `property_type_code` VARCHAR(20) NOT NULL,  -- Code linking the property to its type\n    `date_on_market` DATETIME,  -- Date when the property was listed on the market\n    `date_sold` DATETIME,  -- Date when the property was sold\n    `property_name` VARCHAR(80),  -- Name of the property\n    `property_address` VARCHAR(255),  -- Address of the property\n    `room_count` INTEGER,  -- Number of rooms in the property\n    `vendor_requested_price` DECIMAL(19,4),  -- Price requested by the vendor\n    `buyer_offered_price` DECIMAL(19,4),  -- Price offered by the buyer\n    `agreed_selling_price` DECIMAL(19,4),  -- Final agreed selling price\n    `apt_feature_1` VARCHAR(255),  -- First feature specific to apartments\n    `apt_feature_2` VARCHAR(255),  -- Second feature specific to apartments\n    `apt_feature_3` VARCHAR(255),  -- Third feature specific to apartments\n    `fld_feature_1` VARCHAR(255),  -- First feature specific to fields\n    `fld_feature_2` VARCHAR(255),  -- Second feature specific to fields\n    `fld_feature_3` VARCHAR(255),  -- Third feature specific to fields\n    `hse_feature_1` VARCHAR(255),  -- First feature specific to houses\n    `hse_feature_2` VARCHAR(255),  -- Second feature specific to houses\n    `hse_feature_3` VARCHAR(255),  -- Third feature specific to houses\n    `oth_feature_1` VARCHAR(255),  -- First feature specific to other property types\n    `oth_feature_2` VARCHAR(255),  -- Second feature specific to other property types\n    `oth_feature_3` VARCHAR(255),  -- Third feature specific to other property types\n    `shp_feature_1` VARCHAR(255),  -- First feature specific to shops\n    `shp_feature_2` VARCHAR(255),  -- Second feature specific to shops\n    `shp_feature_3` VARCHAR(255),  -- Third feature specific to shops\n    `other_property_details` VARCHAR(255),  -- Additional details about the property\n    FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n) CREATE TABLE `Other_Property_Features` (\n    `property_id` INTEGER NOT NULL,  -- Identifier linking the feature to a specific property\n    `feature_id` INTEGER NOT NULL,  -- Identifier linking the feature to its details\n    `property_feature_description` VARCHAR(80),  -- Description of the feature as it applies to the property\n    FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\n    FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)"
    },
    {
        "question_id": 892,
        "difficulty": null,
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "prediction": null,
        "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "sql_path": "/Users/chinonsoosuji/Desktop/text2sql/spider/database/network_1/network_1.sqlite",
        "schema": "CREATE TABLE Highschooler(\n    ID int primary key,  -- Unique identifier for each high school student\n    name text,  -- Full name of the high school student\n    grade int  -- Current grade level of the high school student\n)\nCREATE TABLE Friend(\n    student_id int,  -- Unique identifier of the student who has a friend\n    friend_id int,  -- Unique identifier of the friend of the student\n    primary key (student_id, friend_id),  -- Composite primary key to ensure unique friendship pairs\n    foreign key(student_id) references Highschooler(ID),  -- Foreign key referencing the student in the Highschooler table\n    foreign key (friend_id) references Highschooler(ID)  -- Foreign key referencing the friend in the Highschooler table\n)\nCREATE TABLE Likes(\n    student_id int,  -- Unique identifier of the student who likes another student\n    liked_id int,  -- Unique identifier of the student who is liked\n    primary key (student_id, liked_id),  -- Composite primary key to ensure unique like pairs\n    foreign key (liked_id) references Highschooler(ID),  -- Foreign key referencing the liked student in the Highschooler table\n    foreign key (student_id) references Highschooler(ID)  -- Foreign key referencing the student who likes in the Highschooler table\n)"
    }
]